
lab_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f20  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005114  08005114  00007080  2**0
                  CONTENTS
  4 .ARM          00000008  08005114  08005114  00006114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800511c  0800511c  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800511c  0800511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005120  08005120  00006120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005124  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000080  080051a4  00007080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080051a4  00007378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bde7  00000000  00000000  000070a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb7  00000000  00000000  00012e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00014d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000947  00000000  00000000  00015938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a7e  00000000  00000000  0001627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9cc  00000000  00000000  0002dcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ef2  00000000  00000000  0003c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c25bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  000c2600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c5d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08005018 	.word	0x08005018

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08005018 	.word	0x08005018

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2uiz>:
 8000910:	004a      	lsls	r2, r1, #1
 8000912:	d211      	bcs.n	8000938 <__aeabi_d2uiz+0x28>
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000918:	d211      	bcs.n	800093e <__aeabi_d2uiz+0x2e>
 800091a:	d50d      	bpl.n	8000938 <__aeabi_d2uiz+0x28>
 800091c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d40e      	bmi.n	8000944 <__aeabi_d2uiz+0x34>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	4770      	bx	lr
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4770      	bx	lr
 800093e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000942:	d102      	bne.n	800094a <__aeabi_d2uiz+0x3a>
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	4770      	bx	lr
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	4770      	bx	lr

08000950 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	80fb      	strh	r3, [r7, #6]
 800095c:	4613      	mov	r3, r2
 800095e:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	085b      	lsrs	r3, r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f916 	bl	8001ba0 <VL53L1_WrByte>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	4313      	orrs	r3, r2
 800097c:	73fb      	strb	r3, [r7, #15]
	return status;
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 800099a:	2300      	movs	r3, #0
 800099c:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800099e:	232d      	movs	r3, #45	@ 0x2d
 80009a0:	73bb      	strb	r3, [r7, #14]
 80009a2:	e011      	b.n	80009c8 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	b299      	uxth	r1, r3
 80009a8:	7bbb      	ldrb	r3, [r7, #14]
 80009aa:	3b2d      	subs	r3, #45	@ 0x2d
 80009ac:	4a2c      	ldr	r2, [pc, #176]	@ (8000a60 <VL53L1X_SensorInit+0xd4>)
 80009ae:	5cd2      	ldrb	r2, [r2, r3]
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f8f4 	bl	8001ba0 <VL53L1_WrByte>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	4313      	orrs	r3, r2
 80009c0:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	3301      	adds	r3, #1
 80009c6:	73bb      	strb	r3, [r7, #14]
 80009c8:	7bbb      	ldrb	r3, [r7, #14]
 80009ca:	2b87      	cmp	r3, #135	@ 0x87
 80009cc:	d9ea      	bls.n	80009a4 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f889 	bl	8000ae8 <VL53L1X_StartRanging>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4313      	orrs	r3, r2
 80009de:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80009e4:	e00b      	b.n	80009fe <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80009e6:	f107 020d 	add.w	r2, r7, #13
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f8aa 	bl	8000b48 <VL53L1X_CheckForDataReady>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80009fe:	7b7b      	ldrb	r3, [r7, #13]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f0      	beq.n	80009e6 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f82c 	bl	8000a64 <VL53L1X_ClearInterrupt>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f87d 	bl	8000b18 <VL53L1X_StopRanging>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	2209      	movs	r2, #9
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 f8b6 	bl	8001ba0 <VL53L1_WrByte>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	2200      	movs	r2, #0
 8000a42:	210b      	movs	r1, #11
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f8ab 	bl	8001ba0 <VL53L1_WrByte>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	73fb      	strb	r3, [r7, #15]
	return status;
 8000a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08005040 	.word	0x08005040

08000a64 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	2201      	movs	r2, #1
 8000a76:	2186      	movs	r1, #134	@ 0x86
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 f891 	bl	8001ba0 <VL53L1_WrByte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	73fb      	strb	r3, [r7, #15]
	return status;
 8000a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000aa4:	f107 020e 	add.w	r2, r7, #14
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	2130      	movs	r1, #48	@ 0x30
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 f805 	bl	8001abc <VL53L1_RdByte>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	701a      	strb	r2, [r3, #0]
	return status;
 8000adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	2240      	movs	r2, #64	@ 0x40
 8000afa:	2187      	movs	r1, #135	@ 0x87
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f84f 	bl	8001ba0 <VL53L1_WrByte>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	73fb      	strb	r3, [r7, #15]
	return status;
 8000b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2187      	movs	r1, #135	@ 0x87
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 f837 	bl	8001ba0 <VL53L1_WrByte>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461a      	mov	r2, r3
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	73fb      	strb	r3, [r7, #15]
	return status;
 8000b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000b58:	f107 020d 	add.w	r2, r7, #13
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff97 	bl	8000a94 <VL53L1X_GetInterruptPolarity>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000b70:	f107 020e 	add.w	r2, r7, #14
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	2131      	movs	r1, #49	@ 0x31
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 ff9f 	bl	8001abc <VL53L1_RdByte>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10c      	bne.n	8000baa <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	7b7a      	ldrb	r2, [r7, #13]
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d103      	bne.n	8000ba4 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e002      	b.n	8000baa <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8000bca:	f107 020c 	add.w	r2, r7, #12
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fa2a 	bl	800102c <VL53L1X_GetDistanceMode>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 8000be2:	89bb      	ldrh	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e0f6      	b.n	8000dda <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 8000bec:	89bb      	ldrh	r3, [r7, #12]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	f040 8082 	bne.w	8000cf8 <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bfa:	d06b      	beq.n	8000cd4 <VL53L1X_SetTimingBudgetInMs+0x11e>
 8000bfc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c00:	dc77      	bgt.n	8000cf2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000c02:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c04:	d057      	beq.n	8000cb6 <VL53L1X_SetTimingBudgetInMs+0x100>
 8000c06:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c08:	dc73      	bgt.n	8000cf2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000c0a:	2b64      	cmp	r3, #100	@ 0x64
 8000c0c:	d044      	beq.n	8000c98 <VL53L1X_SetTimingBudgetInMs+0xe2>
 8000c0e:	2b64      	cmp	r3, #100	@ 0x64
 8000c10:	dc6f      	bgt.n	8000cf2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000c12:	2b32      	cmp	r3, #50	@ 0x32
 8000c14:	d031      	beq.n	8000c7a <VL53L1X_SetTimingBudgetInMs+0xc4>
 8000c16:	2b32      	cmp	r3, #50	@ 0x32
 8000c18:	dc6b      	bgt.n	8000cf2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000c1a:	2b21      	cmp	r3, #33	@ 0x21
 8000c1c:	d020      	beq.n	8000c60 <VL53L1X_SetTimingBudgetInMs+0xaa>
 8000c1e:	2b21      	cmp	r3, #33	@ 0x21
 8000c20:	dc67      	bgt.n	8000cf2 <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000c22:	2b0f      	cmp	r3, #15
 8000c24:	d002      	beq.n	8000c2c <VL53L1X_SetTimingBudgetInMs+0x76>
 8000c26:	2b14      	cmp	r3, #20
 8000c28:	d00d      	beq.n	8000c46 <VL53L1X_SetTimingBudgetInMs+0x90>
 8000c2a:	e062      	b.n	8000cf2 <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	221d      	movs	r2, #29
 8000c30:	215e      	movs	r1, #94	@ 0x5e
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 ffd6 	bl	8001be4 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	2227      	movs	r2, #39	@ 0x27
 8000c3c:	2161      	movs	r1, #97	@ 0x61
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 ffd0 	bl	8001be4 <VL53L1_WrWord>
					0x0027);
			break;
 8000c44:	e0c7      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	2251      	movs	r2, #81	@ 0x51
 8000c4a:	215e      	movs	r1, #94	@ 0x5e
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 ffc9 	bl	8001be4 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	226e      	movs	r2, #110	@ 0x6e
 8000c56:	2161      	movs	r1, #97	@ 0x61
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 ffc3 	bl	8001be4 <VL53L1_WrWord>
					0x006E);
			break;
 8000c5e:	e0ba      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	22d6      	movs	r2, #214	@ 0xd6
 8000c64:	215e      	movs	r1, #94	@ 0x5e
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 ffbc 	bl	8001be4 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	226e      	movs	r2, #110	@ 0x6e
 8000c70:	2161      	movs	r1, #97	@ 0x61
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 ffb6 	bl	8001be4 <VL53L1_WrWord>
					0x006E);
			break;
 8000c78:	e0ad      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8000c80:	215e      	movs	r1, #94	@ 0x5e
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 ffae 	bl	8001be4 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000c8e:	2161      	movs	r1, #97	@ 0x61
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 ffa7 	bl	8001be4 <VL53L1_WrWord>
					0x01E8);
			break;
 8000c96:	e09e      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8000c9e:	215e      	movs	r1, #94	@ 0x5e
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 ff9f 	bl	8001be4 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8000cac:	2161      	movs	r1, #97	@ 0x61
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ff98 	bl	8001be4 <VL53L1_WrWord>
					0x0388);
			break;
 8000cb4:	e08f      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8000cbc:	215e      	movs	r1, #94	@ 0x5e
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 ff90 	bl	8001be4 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	f240 4296 	movw	r2, #1174	@ 0x496
 8000cca:	2161      	movs	r1, #97	@ 0x61
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 ff89 	bl	8001be4 <VL53L1_WrWord>
					0x0496);
			break;
 8000cd2:	e080      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	f240 5291 	movw	r2, #1425	@ 0x591
 8000cda:	215e      	movs	r1, #94	@ 0x5e
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 ff81 	bl	8001be4 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 8000ce8:	2161      	movs	r1, #97	@ 0x61
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 ff7a 	bl	8001be4 <VL53L1_WrWord>
					0x05C1);
			break;
 8000cf0:	e071      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
			break;
 8000cf6:	e06e      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000cfe:	d058      	beq.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x1fc>
 8000d00:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d04:	dc64      	bgt.n	8000dd0 <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000d06:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d08:	d044      	beq.n	8000d94 <VL53L1X_SetTimingBudgetInMs+0x1de>
 8000d0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d0c:	dc60      	bgt.n	8000dd0 <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000d0e:	2b64      	cmp	r3, #100	@ 0x64
 8000d10:	d031      	beq.n	8000d76 <VL53L1X_SetTimingBudgetInMs+0x1c0>
 8000d12:	2b64      	cmp	r3, #100	@ 0x64
 8000d14:	dc5c      	bgt.n	8000dd0 <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000d16:	2b32      	cmp	r3, #50	@ 0x32
 8000d18:	d020      	beq.n	8000d5c <VL53L1X_SetTimingBudgetInMs+0x1a6>
 8000d1a:	2b32      	cmp	r3, #50	@ 0x32
 8000d1c:	dc58      	bgt.n	8000dd0 <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000d1e:	2b14      	cmp	r3, #20
 8000d20:	d002      	beq.n	8000d28 <VL53L1X_SetTimingBudgetInMs+0x172>
 8000d22:	2b21      	cmp	r3, #33	@ 0x21
 8000d24:	d00d      	beq.n	8000d42 <VL53L1X_SetTimingBudgetInMs+0x18c>
 8000d26:	e053      	b.n	8000dd0 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	221e      	movs	r2, #30
 8000d2c:	215e      	movs	r1, #94	@ 0x5e
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 ff58 	bl	8001be4 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	2222      	movs	r2, #34	@ 0x22
 8000d38:	2161      	movs	r1, #97	@ 0x61
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 ff52 	bl	8001be4 <VL53L1_WrWord>
					0x0022);
			break;
 8000d40:	e049      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	2260      	movs	r2, #96	@ 0x60
 8000d46:	215e      	movs	r1, #94	@ 0x5e
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 ff4b 	bl	8001be4 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	226e      	movs	r2, #110	@ 0x6e
 8000d52:	2161      	movs	r1, #97	@ 0x61
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 ff45 	bl	8001be4 <VL53L1_WrWord>
					0x006E);
			break;
 8000d5a:	e03c      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	22ad      	movs	r2, #173	@ 0xad
 8000d60:	215e      	movs	r1, #94	@ 0x5e
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 ff3e 	bl	8001be4 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	22c6      	movs	r2, #198	@ 0xc6
 8000d6c:	2161      	movs	r1, #97	@ 0x61
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 ff38 	bl	8001be4 <VL53L1_WrWord>
					0x00C6);
			break;
 8000d74:	e02f      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8000d7c:	215e      	movs	r1, #94	@ 0x5e
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 ff30 	bl	8001be4 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8000d8a:	2161      	movs	r1, #97	@ 0x61
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 ff29 	bl	8001be4 <VL53L1_WrWord>
					0x01EA);
			break;
 8000d92:	e020      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000d9a:	215e      	movs	r1, #94	@ 0x5e
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 ff21 	bl	8001be4 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8000da8:	2161      	movs	r1, #97	@ 0x61
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 ff1a 	bl	8001be4 <VL53L1_WrWord>
					0x02F8);
			break;
 8000db0:	e011      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f240 428f 	movw	r2, #1167	@ 0x48f
 8000db8:	215e      	movs	r1, #94	@ 0x5e
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 ff12 	bl	8001be4 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 8000dc6:	2161      	movs	r1, #97	@ 0x61
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 ff0b 	bl	8001be4 <VL53L1_WrWord>
					0x04A4);
			break;
 8000dce:	e002      	b.n	8000dd6 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
			break;
 8000dd4:	bf00      	nop
		}
	}
	return status;
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	6039      	str	r1, [r7, #0]
 8000dec:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8000df2:	f107 020c 	add.w	r2, r7, #12
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	215e      	movs	r1, #94	@ 0x5e
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fe80 	bl	8001b00 <VL53L1_RdWord>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 8000e0a:	89bb      	ldrh	r3, [r7, #12]
 8000e0c:	f240 5291 	movw	r2, #1425	@ 0x591
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d05b      	beq.n	8000ecc <VL53L1X_GetTimingBudgetInMs+0xea>
 8000e14:	f240 5291 	movw	r2, #1425	@ 0x591
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	dc5c      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e1c:	f240 428f 	movw	r2, #1167	@ 0x48f
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d053      	beq.n	8000ecc <VL53L1X_GetTimingBudgetInMs+0xea>
 8000e24:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 8000e28:	da55      	bge.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e2a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d048      	beq.n	8000ec4 <VL53L1X_GetTimingBudgetInMs+0xe2>
 8000e32:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8000e36:	4293      	cmp	r3, r2
 8000e38:	dc4d      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e3a:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d03c      	beq.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xda>
 8000e42:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8000e46:	4293      	cmp	r3, r2
 8000e48:	dc45      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e4a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d038      	beq.n	8000ec4 <VL53L1X_GetTimingBudgetInMs+0xe2>
 8000e52:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000e56:	4293      	cmp	r3, r2
 8000e58:	dc3d      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e5a:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8000e5e:	d02d      	beq.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xda>
 8000e60:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8000e64:	dc37      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e66:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8000e6a:	d023      	beq.n	8000eb4 <VL53L1X_GetTimingBudgetInMs+0xd2>
 8000e6c:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8000e70:	dc31      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e72:	2bd6      	cmp	r3, #214	@ 0xd6
 8000e74:	d01a      	beq.n	8000eac <VL53L1X_GetTimingBudgetInMs+0xca>
 8000e76:	2bd6      	cmp	r3, #214	@ 0xd6
 8000e78:	dc2d      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e7a:	2bad      	cmp	r3, #173	@ 0xad
 8000e7c:	d01a      	beq.n	8000eb4 <VL53L1X_GetTimingBudgetInMs+0xd2>
 8000e7e:	2bad      	cmp	r3, #173	@ 0xad
 8000e80:	dc29      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e82:	2b60      	cmp	r3, #96	@ 0x60
 8000e84:	d012      	beq.n	8000eac <VL53L1X_GetTimingBudgetInMs+0xca>
 8000e86:	2b60      	cmp	r3, #96	@ 0x60
 8000e88:	dc25      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e8a:	2b51      	cmp	r3, #81	@ 0x51
 8000e8c:	d00a      	beq.n	8000ea4 <VL53L1X_GetTimingBudgetInMs+0xc2>
 8000e8e:	2b51      	cmp	r3, #81	@ 0x51
 8000e90:	dc21      	bgt.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e92:	2b1d      	cmp	r3, #29
 8000e94:	d002      	beq.n	8000e9c <VL53L1X_GetTimingBudgetInMs+0xba>
 8000e96:	2b1e      	cmp	r3, #30
 8000e98:	d004      	beq.n	8000ea4 <VL53L1X_GetTimingBudgetInMs+0xc2>
 8000e9a:	e01c      	b.n	8000ed6 <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	801a      	strh	r2, [r3, #0]
			break;
 8000ea2:	e01d      	b.n	8000ee0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2214      	movs	r2, #20
 8000ea8:	801a      	strh	r2, [r3, #0]
			break;
 8000eaa:	e019      	b.n	8000ee0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2221      	movs	r2, #33	@ 0x21
 8000eb0:	801a      	strh	r2, [r3, #0]
			break;
 8000eb2:	e015      	b.n	8000ee0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2232      	movs	r2, #50	@ 0x32
 8000eb8:	801a      	strh	r2, [r3, #0]
			break;
 8000eba:	e011      	b.n	8000ee0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2264      	movs	r2, #100	@ 0x64
 8000ec0:	801a      	strh	r2, [r3, #0]
			break;
 8000ec2:	e00d      	b.n	8000ee0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	22c8      	movs	r2, #200	@ 0xc8
 8000ec8:	801a      	strh	r2, [r3, #0]
			break;
 8000eca:	e009      	b.n	8000ee0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ed2:	801a      	strh	r2, [r3, #0]
			break;
 8000ed4:	e004      	b.n	8000ee0 <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	80fb      	strh	r3, [r7, #6]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff6a 	bl	8000de2 <VL53L1X_GetTimingBudgetInMs>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <VL53L1X_SetDistanceMode+0x38>
		return 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e07f      	b.n	8001024 <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d002      	beq.n	8000f30 <VL53L1X_SetDistanceMode+0x44>
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d033      	beq.n	8000f96 <VL53L1X_SetDistanceMode+0xaa>
 8000f2e:	e065      	b.n	8000ffc <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	2214      	movs	r2, #20
 8000f34:	214b      	movs	r1, #75	@ 0x4b
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fe32 	bl	8001ba0 <VL53L1_WrByte>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	2207      	movs	r2, #7
 8000f44:	2160      	movs	r1, #96	@ 0x60
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fe2a 	bl	8001ba0 <VL53L1_WrByte>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	2205      	movs	r2, #5
 8000f54:	2163      	movs	r1, #99	@ 0x63
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fe22 	bl	8001ba0 <VL53L1_WrByte>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	2238      	movs	r2, #56	@ 0x38
 8000f64:	2169      	movs	r1, #105	@ 0x69
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fe1a 	bl	8001ba0 <VL53L1_WrByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	f240 7205 	movw	r2, #1797	@ 0x705
 8000f76:	2178      	movs	r1, #120	@ 0x78
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fe33 	bl	8001be4 <VL53L1_WrWord>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	f240 6206 	movw	r2, #1542	@ 0x606
 8000f88:	217a      	movs	r1, #122	@ 0x7a
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fe2a 	bl	8001be4 <VL53L1_WrWord>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
		break;
 8000f94:	e035      	b.n	8001002 <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	220a      	movs	r2, #10
 8000f9a:	214b      	movs	r1, #75	@ 0x4b
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fdff 	bl	8001ba0 <VL53L1_WrByte>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	220f      	movs	r2, #15
 8000faa:	2160      	movs	r1, #96	@ 0x60
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fdf7 	bl	8001ba0 <VL53L1_WrByte>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	220d      	movs	r2, #13
 8000fba:	2163      	movs	r1, #99	@ 0x63
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fdef 	bl	8001ba0 <VL53L1_WrByte>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	22b8      	movs	r2, #184	@ 0xb8
 8000fca:	2169      	movs	r1, #105	@ 0x69
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fde7 	bl	8001ba0 <VL53L1_WrByte>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f640 720d 	movw	r2, #3853	@ 0xf0d
 8000fdc:	2178      	movs	r1, #120	@ 0x78
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fe00 	bl	8001be4 <VL53L1_WrWord>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	f640 620e 	movw	r2, #3598	@ 0xe0e
 8000fee:	217a      	movs	r1, #122	@ 0x7a
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fdf7 	bl	8001be4 <VL53L1_WrWord>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
		break;
 8000ffa:	e002      	b.n	8001002 <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
		break;
 8001000:	bf00      	nop
	}

	if (status == 0)
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10a      	bne.n	8001020 <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 800100a:	89ba      	ldrh	r2, [r7, #12]
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fdd0 	bl	8000bb6 <VL53L1X_SetTimingBudgetInMs>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	4313      	orrs	r3, r2
 800101e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 800103c:	f107 020e 	add.w	r2, r7, #14
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	214b      	movs	r1, #75	@ 0x4b
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fd39 	bl	8001abc <VL53L1_RdByte>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4313      	orrs	r3, r2
 8001054:	b25b      	sxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2b14      	cmp	r3, #20
 800105c:	d102      	bne.n	8001064 <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d102      	bne.n	8001070 <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2202      	movs	r2, #2
 800106e:	801a      	strh	r2, [r3, #0]
	return status;
 8001070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	0000      	movs	r0, r0
	...

08001080 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001090:	f107 020c 	add.w	r2, r7, #12
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	21de      	movs	r1, #222	@ 0xde
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fd31 	bl	8001b00 <VL53L1_RdWord>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 80010a8:	89bb      	ldrh	r3, [r7, #12]
 80010aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 80010b2:	89bb      	ldrh	r3, [r7, #12]
 80010b4:	461a      	mov	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f99b 	bl	80003f8 <__aeabi_ui2d>
 80010c2:	a30b      	add	r3, pc, #44	@ (adr r3, 80010f0 <VL53L1X_SetInterMeasurementInMs+0x70>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fa10 	bl	80004ec <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fc1c 	bl	8000910 <__aeabi_d2uiz>
 80010d8:	4602      	mov	r2, r0
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	216c      	movs	r1, #108	@ 0x6c
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fdac 	bl	8001c3c <VL53L1_WrDWord>
	return status;
 80010e4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	33333333 	.word	0x33333333
 80010f4:	3ff13333 	.word	0x3ff13333

080010f8 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 800110c:	f107 020e 	add.w	r2, r7, #14
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	21e5      	movs	r1, #229	@ 0xe5
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fcd1 	bl	8001abc <VL53L1_RdByte>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	4313      	orrs	r3, r2
 8001122:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8001124:	7bba      	ldrb	r2, [r7, #14]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	701a      	strb	r2, [r3, #0]
	return status;
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	6039      	str	r1, [r7, #0]
 8001140:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	2196      	movs	r1, #150	@ 0x96
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fcd6 	bl	8001b00 <VL53L1_RdWord>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4313      	orrs	r3, r2
 800115c:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800115e:	89ba      	ldrh	r2, [r7, #12]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	801a      	strh	r2, [r3, #0]
	return status;
 8001164:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	*rangeStatus = 255;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	22ff      	movs	r2, #255	@ 0xff
 8001184:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8001186:	f107 020e 	add.w	r2, r7, #14
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2189      	movs	r1, #137	@ 0x89
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fc94 	bl	8001abc <VL53L1_RdByte>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	4313      	orrs	r3, r2
 800119c:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt & 0x1F;
 800119e:	7bbb      	ldrb	r3, [r7, #14]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	73bb      	strb	r3, [r7, #14]
	if (RgSt < 24)
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	2b17      	cmp	r3, #23
 80011ac:	d805      	bhi.n	80011ba <VL53L1X_GetRangeStatus+0x4a>
		*rangeStatus = status_rtn[RgSt];
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <VL53L1X_GetRangeStatus+0x58>)
 80011b4:	5c9a      	ldrb	r2, [r3, r2]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	701a      	strb	r2, [r3, #0]
	return status;
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	0800509c 	.word	0x0800509c

080011cc <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	80fb      	strh	r3, [r7, #6]
 80011d8:	4613      	mov	r3, r2
 80011da:	80bb      	strh	r3, [r7, #4]
	VL53L1X_ERROR status = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
	int16_t Temp;

	Temp = (OffsetValue*4);
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	81bb      	strh	r3, [r7, #12]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 80011e8:	89ba      	ldrh	r2, [r7, #12]
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	211e      	movs	r1, #30
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fcf8 	bl	8001be4 <VL53L1_WrWord>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	73fb      	strb	r3, [r7, #15]
			(uint16_t)Temp);
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	2200      	movs	r2, #0
 8001202:	2120      	movs	r1, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fced 	bl	8001be4 <VL53L1_WrWord>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	4313      	orrs	r3, r2
 8001212:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	2200      	movs	r2, #0
 8001218:	2122      	movs	r1, #34	@ 0x22
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fce2 	bl	8001be4 <VL53L1_WrWord>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	4313      	orrs	r3, r2
 8001228:	73fb      	strb	r3, [r7, #15]
	return status;
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <VL53L1X_SetXtalk>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetXtalk(uint16_t dev, uint16_t XtalkValue)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	460a      	mov	r2, r1
 8001242:	80fb      	strh	r3, [r7, #6]
 8001244:	4613      	mov	r3, r2
 8001246:	80bb      	strh	r3, [r7, #4]
/* XTalkValue in count per second to avoid float type */
	VL53L1X_ERROR status = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrWord(dev,
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	2200      	movs	r2, #0
 8001250:	2118      	movs	r1, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fcc6 	bl	8001be4 <VL53L1_WrWord>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	4313      	orrs	r3, r2
 8001260:	73fb      	strb	r3, [r7, #15]
			ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS,
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS,
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2200      	movs	r2, #0
 8001266:	211a      	movs	r1, #26
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fcbb 	bl	8001be4 <VL53L1_WrWord>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	4313      	orrs	r3, r2
 8001276:	73fb      	strb	r3, [r7, #15]
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
			(XtalkValue<<9)/1000); /* * << 9 (7.9 format) and /1000 to convert cps to kpcs */
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <VL53L1X_SetXtalk+0x74>)
 800127e:	fb82 1203 	smull	r1, r2, r2, r3
 8001282:	1192      	asrs	r2, r2, #6
 8001284:	17db      	asrs	r3, r3, #31
 8001286:	1ad3      	subs	r3, r2, r3
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
 8001288:	b29a      	uxth	r2, r3
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2116      	movs	r1, #22
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fca8 	bl	8001be4 <VL53L1_WrWord>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	4313      	orrs	r3, r2
 800129c:	73fb      	strb	r3, [r7, #15]
	return status;
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	10624dd3 	.word	0x10624dd3

080012b0 <VL53L1X_SetDistanceThreshold>:
}

VL53L1X_ERROR VL53L1X_SetDistanceThreshold(uint16_t dev, uint16_t ThreshLow,
			      uint16_t ThreshHigh, uint8_t Window,
			      uint8_t IntOnNoTarget)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4604      	mov	r4, r0
 80012b8:	4608      	mov	r0, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4623      	mov	r3, r4
 80012c0:	80fb      	strh	r3, [r7, #6]
 80012c2:	4603      	mov	r3, r0
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]
 80012ca:	4613      	mov	r3, r2
 80012cc:	707b      	strb	r3, [r7, #1]
	VL53L1X_ERROR status = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO, &Temp);
 80012d6:	f107 020e 	add.w	r2, r7, #14
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	2146      	movs	r1, #70	@ 0x46
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fbec 	bl	8001abc <VL53L1_RdByte>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & (~0x6F);
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	f023 036f 	bic.w	r3, r3, #111	@ 0x6f
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	73bb      	strb	r3, [r7, #14]
	Temp = Temp|Window;
 80012f8:	7bba      	ldrb	r2, [r7, #14]
 80012fa:	787b      	ldrb	r3, [r7, #1]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	73bb      	strb	r3, [r7, #14]
	if (IntOnNoTarget == 0) {
 8001302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d108      	bne.n	800131c <VL53L1X_SetDistanceThreshold+0x6c>
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,Temp);
 800130a:	7bba      	ldrb	r2, [r7, #14]
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2146      	movs	r1, #70	@ 0x46
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fc45 	bl	8001ba0 <VL53L1_WrByte>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e00a      	b.n	8001332 <VL53L1X_SetDistanceThreshold+0x82>
	} else {
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,(Temp | 0x40));
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001322:	b2da      	uxtb	r2, r3
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	2146      	movs	r1, #70	@ 0x46
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fc39 	bl	8001ba0 <VL53L1_WrByte>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
	}
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_HIGH, ThreshHigh);
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	2172      	movs	r1, #114	@ 0x72
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc53 	bl	8001be4 <VL53L1_WrWord>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	4313      	orrs	r3, r2
 8001346:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_LOW, ThreshLow);
 8001348:	88ba      	ldrh	r2, [r7, #4]
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	2174      	movs	r1, #116	@ 0x74
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fc48 	bl	8001be4 <VL53L1_WrWord>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	4313      	orrs	r3, r2
 800135c:	73fb      	strb	r3, [r7, #15]
	return status;
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
	...

0800136c <FLASH_WritePage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void FLASH_WritePage(void)
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
	data_len = strlen(write_data) + 1;
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <FLASH_WritePage+0xac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe fef4 	bl	8000164 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	3301      	adds	r3, #1
 8001380:	4a26      	ldr	r2, [pc, #152]	@ (800141c <FLASH_WritePage+0xb0>)
 8001382:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Unlock();
 8001384:	f000 ffba 	bl	80022fc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInit =
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <FLASH_WritePage+0xb4>)
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
			{
					.TypeErase = FLASH_TYPEERASE_PAGES,
					.PageAddress = START_PAGE_ADRR,
					.NbPages = PAGE_NUM_USE
			};
	uint32_t PageError = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80013a2:	f107 0208 	add.w	r2, r7, #8
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f88d 	bl	80024cc <HAL_FLASHEx_Erase>

	uint32_t data = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
	for(uint32_t position = 0; position < data_len; position += WORD_TO_BYTES)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e022      	b.n	8001402 <FLASH_WritePage+0x96>
	{
		data = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
		memcpy(&data, &write_data[position],
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <FLASH_WritePage+0xac>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	18d1      	adds	r1, r2, r3
				(data_len - position >= WORD_TO_BYTES) ? WORD_TO_BYTES : (data_len - position));
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <FLASH_WritePage+0xb0>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	bf28      	it	cs
 80013d4:	2304      	movcs	r3, #4
 80013d6:	461a      	mov	r2, r3
		memcpy(&data, &write_data[position],
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f9c0 	bl	8004760 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_PAGE_ADRR + position, data);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 80013e6:	f501 31fe 	add.w	r1, r1, #130048	@ 0x1fc00
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	461c      	mov	r4, r3
 80013f0:	4615      	mov	r5, r2
 80013f2:	4622      	mov	r2, r4
 80013f4:	462b      	mov	r3, r5
 80013f6:	2002      	movs	r0, #2
 80013f8:	f000 ff10 	bl	800221c <HAL_FLASH_Program>
	for(uint32_t position = 0; position < data_len; position += WORD_TO_BYTES)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	3304      	adds	r3, #4
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <FLASH_WritePage+0xb0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3d7      	bcc.n	80013bc <FLASH_WritePage+0x50>
	}
	HAL_FLASH_Lock();
 800140c:	f000 ff9c 	bl	8002348 <HAL_FLASH_Lock>
}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bdb0      	pop	{r4, r5, r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	20000138 	.word	0x20000138
 8001420:	0801fc00 	.word	0x0801fc00

08001424 <FLASH_ReadPage>:
void FLASH_ReadPage(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint32_t address = START_PAGE_ADRR;
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <FLASH_ReadPage+0x48>)
 800142c:	603b      	str	r3, [r7, #0]
	memset(read_data, 0, sizeof(read_data));
 800142e:	22c8      	movs	r2, #200	@ 0xc8
 8001430:	2100      	movs	r1, #0
 8001432:	480f      	ldr	r0, [pc, #60]	@ (8001470 <FLASH_ReadPage+0x4c>)
 8001434:	f003 f960 	bl	80046f8 <memset>

	for (uint32_t position = 0; position < data_len; position += WORD_TO_BYTES)
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	e00c      	b.n	8001458 <FLASH_ReadPage+0x34>
	{
	   read_data[position / WORD_TO_BYTES] = *(__IO uint32_t *)(address + position);
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	4908      	ldr	r1, [pc, #32]	@ (8001470 <FLASH_ReadPage+0x4c>)
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t position = 0; position < data_len; position += WORD_TO_BYTES)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <FLASH_ReadPage+0x50>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3ed      	bcc.n	800143e <FLASH_ReadPage+0x1a>
	}
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0801fc00 	.word	0x0801fc00
 8001470:	2000013c 	.word	0x2000013c
 8001474:	20000138 	.word	0x20000138

08001478 <FLASH_CompareData>:
bool FLASH_CompareData(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	@ 0x38
 800147c:	af00      	add	r7, sp, #0
    char buffer[50] = {0};
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	222e      	movs	r2, #46	@ 0x2e
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f003 f935 	bl	80046f8 <memset>

    for (uint32_t position = 0; position < (data_len + OFF_SET) / WORD_TO_BYTES; position++)
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
 8001492:	e00c      	b.n	80014ae <FLASH_CompareData+0x36>
    {
        memcpy(&buffer[position * WORD_TO_BYTES], &read_data[position], WORD_TO_BYTES);
 8001494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	463a      	mov	r2, r7
 800149a:	4413      	add	r3, r2
 800149c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	490f      	ldr	r1, [pc, #60]	@ (80014e0 <FLASH_CompareData+0x68>)
 80014a2:	440a      	add	r2, r1
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	601a      	str	r2, [r3, #0]
    for (uint32_t position = 0; position < (data_len + OFF_SET) / WORD_TO_BYTES; position++)
 80014a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014aa:	3301      	adds	r3, #1
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <FLASH_CompareData+0x6c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3303      	adds	r3, #3
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3eb      	bcc.n	8001494 <FLASH_CompareData+0x1c>
    }


    return (strcmp(buffer, write_data) == 0);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <FLASH_CompareData+0x70>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	463b      	mov	r3, r7
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe43 	bl	8000150 <strcmp>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3738      	adds	r7, #56	@ 0x38
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000013c 	.word	0x2000013c
 80014e4:	20000138 	.word	0x20000138
 80014e8:	20000000 	.word	0x20000000

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 fd29 	bl	8001f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f88b 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 f927 	bl	800174c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014fe:	f000 f8cd 	bl	800169c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001502:	f000 f8f9 	bl	80016f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t Distance_0 = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	83bb      	strh	r3, [r7, #28]
  uint16_t Distance_1 = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	837b      	strh	r3, [r7, #26]
  char Data[20] = "";
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  uint16_t Data_len = 20;
 8001520:	2314      	movs	r3, #20
 8001522:	83fb      	strh	r3, [r7, #30]
  HAL_GPIO_WritePin(XShut0.Port, XShut0.Pin, 0);
 8001524:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <main+0x108>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a32      	ldr	r2, [pc, #200]	@ (80015f4 <main+0x108>)
 800152a:	6852      	ldr	r2, [r2, #4]
 800152c:	b291      	uxth	r1, r2
 800152e:	2200      	movs	r2, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fa0e 	bl	8002952 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(XShut1.Port, XShut1.Pin, 0);
 8001536:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <main+0x10c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a2f      	ldr	r2, [pc, #188]	@ (80015f8 <main+0x10c>)
 800153c:	6852      	ldr	r2, [r2, #4]
 800153e:	b291      	uxth	r1, r2
 8001540:	2200      	movs	r2, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f001 fa05 	bl	8002952 <HAL_GPIO_WritePin>
  while(VL53L1__Init(VL53L1_0_ADDR, XShut0) != 0){}
 8001548:	bf00      	nop
 800154a:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <main+0x108>)
 800154c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001550:	2054      	movs	r0, #84	@ 0x54
 8001552:	f000 fbcb 	bl	8001cec <VL53L1__Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f6      	bne.n	800154a <main+0x5e>
  while(VL53L1__Init(VL53L1_1_ADDR, XShut1) != 0){}
 800155c:	bf00      	nop
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <main+0x10c>)
 8001560:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001564:	2056      	movs	r0, #86	@ 0x56
 8001566:	f000 fbc1 	bl	8001cec <VL53L1__Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f6      	bne.n	800155e <main+0x72>

  HAL_Delay(500);
 8001570:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001574:	f000 fd4a 	bl	800200c <HAL_Delay>
  FLASH_WritePage();
 8001578:	f7ff fef8 	bl	800136c <FLASH_WritePage>
  FLASH_ReadPage();
 800157c:	f7ff ff52 	bl	8001424 <FLASH_ReadPage>
  if(FLASH_CompareData())
 8001580:	f7ff ff7a 	bl	8001478 <FLASH_CompareData>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <main+0xac>
  {
	  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001590:	481a      	ldr	r0, [pc, #104]	@ (80015fc <main+0x110>)
 8001592:	f001 f9de 	bl	8002952 <HAL_GPIO_WritePin>
 8001596:	e005      	b.n	80015a4 <main+0xb8>
  }
  else
  {
	  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800159e:	4817      	ldr	r0, [pc, #92]	@ (80015fc <main+0x110>)
 80015a0:	f001 f9d7 	bl	8002952 <HAL_GPIO_WritePin>
  }
  VL53L1X_StartRanging(VL53L1_0_ADDR);
 80015a4:	2054      	movs	r0, #84	@ 0x54
 80015a6:	f7ff fa9f 	bl	8000ae8 <VL53L1X_StartRanging>
  VL53L1X_StartRanging(VL53L1_1_ADDR);
 80015aa:	2056      	movs	r0, #86	@ 0x56
 80015ac:	f7ff fa9c 	bl	8000ae8 <VL53L1X_StartRanging>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VL53L1__GetDistance(VL53L1_0_ADDR, GPIO1_0, &Distance_0);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <main+0x114>)
 80015b6:	ca06      	ldmia	r2, {r1, r2}
 80015b8:	2054      	movs	r0, #84	@ 0x54
 80015ba:	f000 fc2d 	bl	8001e18 <VL53L1__GetDistance>
	  VL53L1__GetDistance(VL53L1_1_ADDR, GPIO1_1, &Distance_1);
 80015be:	f107 031a 	add.w	r3, r7, #26
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <main+0x118>)
 80015c4:	ca06      	ldmia	r2, {r1, r2}
 80015c6:	2056      	movs	r0, #86	@ 0x56
 80015c8:	f000 fc26 	bl	8001e18 <VL53L1__GetDistance>
	  Data_len = sprintf(Data, "\n\r%u %u", Distance_0, Distance_1);
 80015cc:	8bbb      	ldrh	r3, [r7, #28]
 80015ce:	461a      	mov	r2, r3
 80015d0:	8b7b      	ldrh	r3, [r7, #26]
 80015d2:	1d38      	adds	r0, r7, #4
 80015d4:	490c      	ldr	r1, [pc, #48]	@ (8001608 <main+0x11c>)
 80015d6:	f003 f86f 	bl	80046b8 <siprintf>
 80015da:	4603      	mov	r3, r0
 80015dc:	83fb      	strh	r3, [r7, #30]
	  HAL_UART_Transmit(&huart1, (uint8_t*)Data, Data_len, 100);
 80015de:	8bfa      	ldrh	r2, [r7, #30]
 80015e0:	1d39      	adds	r1, r7, #4
 80015e2:	2364      	movs	r3, #100	@ 0x64
 80015e4:	4809      	ldr	r0, [pc, #36]	@ (800160c <main+0x120>)
 80015e6:	f002 fe93 	bl	8004310 <HAL_UART_Transmit>
	  HAL_Delay(200);
 80015ea:	20c8      	movs	r0, #200	@ 0xc8
 80015ec:	f000 fd0e 	bl	800200c <HAL_Delay>
	  VL53L1__GetDistance(VL53L1_0_ADDR, GPIO1_0, &Distance_0);
 80015f0:	bf00      	nop
 80015f2:	e7dd      	b.n	80015b0 <main+0xc4>
 80015f4:	20000004 	.word	0x20000004
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	20000014 	.word	0x20000014
 8001604:	2000001c 	.word	0x2000001c
 8001608:	08005038 	.word	0x08005038
 800160c:	200000f0 	.word	0x200000f0

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b090      	sub	sp, #64	@ 0x40
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	2228      	movs	r2, #40	@ 0x28
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f003 f86a 	bl	80046f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001636:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800163a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001644:	2302      	movs	r3, #2
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800164c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800164e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4618      	mov	r0, r3
 800165a:	f002 f9f9 	bl	8003a50 <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001664:	f000 f900 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	230f      	movs	r3, #15
 800166a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2302      	movs	r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fc66 	bl	8003f54 <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800168e:	f000 f8eb 	bl	8001868 <Error_Handler>
  }
}
 8001692:	bf00      	nop
 8001694:	3740      	adds	r7, #64	@ 0x40
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016a2:	4a13      	ldr	r2, [pc, #76]	@ (80016f0 <MX_I2C1_Init+0x54>)
 80016a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016a8:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <MX_I2C1_Init+0x58>)
 80016aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_I2C1_Init+0x50>)
 80016da:	f001 f953 	bl	8002984 <HAL_I2C_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e4:	f000 f8c0 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000009c 	.word	0x2000009c
 80016f0:	40005400 	.word	0x40005400
 80016f4:	000186a0 	.word	0x000186a0

080016f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <MX_USART1_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_USART1_UART_Init+0x4c>)
 8001730:	f002 fd9e 	bl	8004270 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800173a:	f000 f895 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000f0 	.word	0x200000f0
 8001748:	40013800 	.word	0x40013800

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001760:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <MX_GPIO_Init+0x110>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a3d      	ldr	r2, [pc, #244]	@ (800185c <MX_GPIO_Init+0x110>)
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b3b      	ldr	r3, [pc, #236]	@ (800185c <MX_GPIO_Init+0x110>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001778:	4b38      	ldr	r3, [pc, #224]	@ (800185c <MX_GPIO_Init+0x110>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a37      	ldr	r2, [pc, #220]	@ (800185c <MX_GPIO_Init+0x110>)
 800177e:	f043 0320 	orr.w	r3, r3, #32
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b35      	ldr	r3, [pc, #212]	@ (800185c <MX_GPIO_Init+0x110>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	4b32      	ldr	r3, [pc, #200]	@ (800185c <MX_GPIO_Init+0x110>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <MX_GPIO_Init+0x110>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <MX_GPIO_Init+0x110>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <MX_GPIO_Init+0x110>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a2b      	ldr	r2, [pc, #172]	@ (800185c <MX_GPIO_Init+0x110>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b29      	ldr	r3, [pc, #164]	@ (800185c <MX_GPIO_Init+0x110>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut0_GPIO_Port, XShut0_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c6:	4826      	ldr	r0, [pc, #152]	@ (8001860 <MX_GPIO_Init+0x114>)
 80017c8:	f001 f8c3 	bl	8002952 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDG_Pin|LEDR_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80017d2:	4824      	ldr	r0, [pc, #144]	@ (8001864 <MX_GPIO_Init+0x118>)
 80017d4:	f001 f8bd 	bl	8002952 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017de:	4821      	ldr	r0, [pc, #132]	@ (8001864 <MX_GPIO_Init+0x118>)
 80017e0:	f001 f8b7 	bl	8002952 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO1_0_Pin */
  GPIO_InitStruct.Pin = GPIO1_0_Pin;
 80017e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_0_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	4819      	ldr	r0, [pc, #100]	@ (8001860 <MX_GPIO_Init+0x114>)
 80017fa:	f000 ff0f 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : XShut0_Pin */
  GPIO_InitStruct.Pin = XShut0_Pin;
 80017fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2302      	movs	r3, #2
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XShut0_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	4812      	ldr	r0, [pc, #72]	@ (8001860 <MX_GPIO_Init+0x114>)
 8001818:	f000 ff00 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDG_Pin LEDR_Pin XShut1_Pin */
  GPIO_InitStruct.Pin = LEDG_Pin|LEDR_Pin|XShut1_Pin;
 800181c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2302      	movs	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <MX_GPIO_Init+0x118>)
 8001836:	f000 fef1 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_1_Pin */
  GPIO_InitStruct.Pin = GPIO1_1_Pin;
 800183a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_1_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_GPIO_Init+0x118>)
 8001850:	f000 fee4 	bl	800261c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	40011000 	.word	0x40011000
 8001864:	40010c00 	.word	0x40010c00

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <Error_Handler+0x8>

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_MspInit+0x5c>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <HAL_MspInit+0x5c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6193      	str	r3, [r2, #24]
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_MspInit+0x5c>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <HAL_MspInit+0x5c>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a0e      	ldr	r2, [pc, #56]	@ (80018d0 <HAL_MspInit+0x5c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_MspInit+0x5c>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_MspInit+0x60>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <HAL_MspInit+0x60>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000

080018d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a15      	ldr	r2, [pc, #84]	@ (8001948 <HAL_I2C_MspInit+0x70>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d123      	bne.n	8001940 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_I2C_MspInit+0x74>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <HAL_I2C_MspInit+0x74>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_I2C_MspInit+0x74>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001910:	23c0      	movs	r3, #192	@ 0xc0
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001914:	2312      	movs	r3, #18
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	480b      	ldr	r0, [pc, #44]	@ (8001950 <HAL_I2C_MspInit+0x78>)
 8001924:	f000 fe7a 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001928:	4b08      	ldr	r3, [pc, #32]	@ (800194c <HAL_I2C_MspInit+0x74>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a07      	ldr	r2, [pc, #28]	@ (800194c <HAL_I2C_MspInit+0x74>)
 800192e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001932:	61d3      	str	r3, [r2, #28]
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_I2C_MspInit+0x74>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40005400 	.word	0x40005400
 800194c:	40021000 	.word	0x40021000
 8001950:	40010c00 	.word	0x40010c00

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <HAL_UART_MspInit+0x8c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d131      	bne.n	80019d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_UART_MspInit+0x90>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <HAL_UART_MspInit+0x90>)
 800197a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_UART_MspInit+0x90>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_UART_MspInit+0x90>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <HAL_UART_MspInit+0x90>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_UART_MspInit+0x90>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <HAL_UART_MspInit+0x94>)
 80019ba:	f000 fe2f 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <HAL_UART_MspInit+0x94>)
 80019d4:	f000 fe22 	bl	800261c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40013800 	.word	0x40013800
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010800 	.word	0x40010800

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <NMI_Handler+0x4>

080019f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <MemManage_Handler+0x4>

08001a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3c:	f000 faca 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f002 fe48 	bl	8004708 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20005000 	.word	0x20005000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000204 	.word	0x20000204
 8001aac:	20000378 	.word	0x20000378

08001ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <VL53L1_RdByte>:
//#include <math.h>

extern I2C_HandleTypeDef VL53L1__PORT;


int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af04      	add	r7, sp, #16
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	603a      	str	r2, [r7, #0]
 8001ac6:	80fb      	strh	r3, [r7, #6]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 8001acc:	88ba      	ldrh	r2, [r7, #4]
 8001ace:	88f9      	ldrh	r1, [r7, #6]
 8001ad0:	2314      	movs	r3, #20
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2310      	movs	r3, #16
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <VL53L1_RdByte+0x40>)
 8001ae0:	f001 f98e 	bl	8002e00 <HAL_I2C_Mem_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <VL53L1_RdByte+0x34>
		return VL53L1__IO_ERROR;
 8001aea:	f06f 030c 	mvn.w	r3, #12
 8001aee:	e000      	b.n	8001af2 <VL53L1_RdByte+0x36>
	else
		return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000009c 	.word	0x2000009c

08001b00 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	4603      	mov	r3, r0
 8001b08:	603a      	str	r2, [r7, #0]
 8001b0a:	80fb      	strh	r3, [r7, #6]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	88f9      	ldrh	r1, [r7, #6]
 8001b14:	2314      	movs	r3, #20
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2310      	movs	r3, #16
 8001b22:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <VL53L1_RdWord+0x54>)
 8001b24:	f001 f96c 	bl	8002e00 <HAL_I2C_Mem_Read>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <VL53L1_RdWord+0x34>
		return VL53L1__IO_ERROR;
 8001b2e:	f06f 030c 	mvn.w	r3, #12
 8001b32:	e00b      	b.n	8001b4c <VL53L1_RdWord+0x4c>
	else {
		*data=__REVSH(*data);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8001b3c:	89fb      	ldrh	r3, [r7, #14]
 8001b3e:	ba5b      	rev16	r3, r3
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	801a      	strh	r2, [r3, #0]
		return 0;
 8001b4a:	2300      	movs	r3, #0
	}
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000009c 	.word	0x2000009c

08001b58 <VL53L1_ReadMulti>:
		*data=__REV(*data);
		return 0;
	}
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4603      	mov	r3, r0
 8001b64:	81fb      	strh	r3, [r7, #14]
 8001b66:	460b      	mov	r3, r1
 8001b68:	81bb      	strh	r3, [r7, #12]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, pdata, count, I2C_COMM_TIMEOUT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	89ba      	ldrh	r2, [r7, #12]
 8001b70:	89f9      	ldrh	r1, [r7, #14]
 8001b72:	2014      	movs	r0, #20
 8001b74:	9002      	str	r0, [sp, #8]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <VL53L1_ReadMulti+0x44>)
 8001b80:	f001 f93e 	bl	8002e00 <HAL_I2C_Mem_Read>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <VL53L1_ReadMulti+0x38>
		return VL53L1__IO_ERROR;
 8001b8a:	f06f 030c 	mvn.w	r3, #12
 8001b8e:	e000      	b.n	8001b92 <VL53L1_ReadMulti+0x3a>
	else
		return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000009c 	.word	0x2000009c

08001ba0 <VL53L1_WrByte>:

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af04      	add	r7, sp, #16
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
 8001baa:	460b      	mov	r3, r1
 8001bac:	80bb      	strh	r3, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 8001bb2:	88ba      	ldrh	r2, [r7, #4]
 8001bb4:	88f9      	ldrh	r1, [r7, #6]
 8001bb6:	2314      	movs	r3, #20
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	1cfb      	adds	r3, r7, #3
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <VL53L1_WrByte+0x40>)
 8001bc6:	f001 f821 	bl	8002c0c <HAL_I2C_Mem_Write>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 8001bd0:	f06f 030c 	mvn.w	r3, #12
 8001bd4:	e000      	b.n	8001bd8 <VL53L1_WrByte+0x38>
	else
		return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000009c 	.word	0x2000009c

08001be4 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af04      	add	r7, sp, #16
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	80bb      	strh	r3, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	807b      	strh	r3, [r7, #2]
	data=__REVSH(data);
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	81fb      	strh	r3, [r7, #14]
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	ba5b      	rev16	r3, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	807b      	strh	r3, [r7, #2]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 2, I2C_COMM_TIMEOUT))
 8001c08:	88ba      	ldrh	r2, [r7, #4]
 8001c0a:	88f9      	ldrh	r1, [r7, #6]
 8001c0c:	2314      	movs	r3, #20
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2302      	movs	r3, #2
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	1cbb      	adds	r3, r7, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2310      	movs	r3, #16
 8001c1a:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <VL53L1_WrWord+0x54>)
 8001c1c:	f000 fff6 	bl	8002c0c <HAL_I2C_Mem_Write>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <VL53L1_WrWord+0x48>
		return VL53L1__IO_ERROR;
 8001c26:	f06f 030c 	mvn.w	r3, #12
 8001c2a:	e000      	b.n	8001c2e <VL53L1_WrWord+0x4a>
	else
		return 0;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000009c 	.word	0x2000009c

08001c3c <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af04      	add	r7, sp, #16
 8001c42:	4603      	mov	r3, r0
 8001c44:	603a      	str	r2, [r7, #0]
 8001c46:	80fb      	strh	r3, [r7, #6]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	80bb      	strh	r3, [r7, #4]
	data=__REV(data);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]
  return __builtin_bswap32(value);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	ba1b      	rev	r3, r3
 8001c54:	603b      	str	r3, [r7, #0]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 4, I2C_COMM_TIMEOUT))
 8001c56:	88ba      	ldrh	r2, [r7, #4]
 8001c58:	88f9      	ldrh	r1, [r7, #6]
 8001c5a:	2314      	movs	r3, #20
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2304      	movs	r3, #4
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	463b      	mov	r3, r7
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2310      	movs	r3, #16
 8001c68:	4806      	ldr	r0, [pc, #24]	@ (8001c84 <VL53L1_WrDWord+0x48>)
 8001c6a:	f000 ffcf 	bl	8002c0c <HAL_I2C_Mem_Write>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <VL53L1_WrDWord+0x3e>
		return VL53L1__IO_ERROR;
 8001c74:	f06f 030c 	mvn.w	r3, #12
 8001c78:	e000      	b.n	8001c7c <VL53L1_WrDWord+0x40>
	else
		return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000009c 	.word	0x2000009c

08001c88 <VL53L1__Xshut>:
 * @brief 		set the VL53L1 Xshutdown pin
 * 				waiting for a complete boot sequence
 * @param 	1	VL53L1 enabled, wait for boot
 * 			0	VL53L1 disabled
 ****************************************************/
uint8_t VL53L1__Xshut(GPIO_HandlerStruct XShut, uint8_t level){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c96:	4613      	mov	r3, r2
 8001c98:	71fb      	strb	r3, [r7, #7]
	uint8_t sensorStatus =0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75bb      	strb	r3, [r7, #22]
	uint8_t status =0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(XShut.Port, XShut.Pin, level);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	b291      	uxth	r1, r2
 8001ca8:	79fa      	ldrb	r2, [r7, #7]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fe51 	bl	8002952 <HAL_GPIO_WritePin>
	if (level) {
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d015      	beq.n	8001ce2 <VL53L1__Xshut+0x5a>
		while (!(sensorStatus & 0x01)) {
 8001cb6:	e00f      	b.n	8001cd8 <VL53L1__Xshut+0x50>
			HAL_Delay(2);
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f000 f9a7 	bl	800200c <HAL_Delay>
			status |= VL53L1X_BootState(VL53L1__ADDR, &sensorStatus);
 8001cbe:	f107 0316 	add.w	r3, r7, #22
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	2052      	movs	r0, #82	@ 0x52
 8001cc6:	f7ff fa17 	bl	80010f8 <VL53L1X_BootState>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	75fb      	strb	r3, [r7, #23]
		while (!(sensorStatus & 0x01)) {
 8001cd8:	7dbb      	ldrb	r3, [r7, #22]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ea      	beq.n	8001cb8 <VL53L1__Xshut+0x30>
		}
	}
	return (status);
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <VL53L1__Init>:
 * 				test VL53L1 presence, initialize the sensor, and
 * 				set it the default Distance Mode, Timing Budget
 * 				and Intermeasurement time
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(uint8_t VL53L1_NEW_ADDR, GPIO_HandlerStruct XShut){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	e883 0006 	stmia.w	r3, {r1, r2}
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
	uint8_t refRegs[4] = {0,0,0,0};
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
	uint8_t status =0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]

	// Enable VL53L1 sensor waiting for a complete boot sequence
#ifdef	VL53L1__USING_XSHUT
	status |= VL53L1__Xshut(XShut, 1);
 8001d04:	2201      	movs	r2, #1
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d0c:	f7ff ffbc 	bl	8001c88 <VL53L1__Xshut>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	75fb      	strb	r3, [r7, #23]
	if (status)
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <VL53L1__Init+0x38>
		return (status);
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	e075      	b.n	8001e10 <VL53L1__Init+0x124>
#endif
	HAL_Delay(4);
 8001d24:	2004      	movs	r0, #4
 8001d26:	f000 f971 	bl	800200c <HAL_Delay>

	//check if VL53L1X is alive and kicking. Remove MASKREV if VL53L1
	VL53L1_ReadMulti(VL53L1__ADDR, VL53L1__MODELID_INDEX, refRegs, 4);
 8001d2a:	f107 0210 	add.w	r2, r7, #16
 8001d2e:	2304      	movs	r3, #4
 8001d30:	f240 110f 	movw	r1, #271	@ 0x10f
 8001d34:	2052      	movs	r0, #82	@ 0x52
 8001d36:	f7ff ff0f 	bl	8001b58 <VL53L1_ReadMulti>
	if ((refRegs[0]!=VL53L1__MODELID_VALUE) || (refRegs[1]!=VL53L1__MODULETYPE_VALUE) || (refRegs[2]!=VL53L1__MASKREV_VALUE))
 8001d3a:	7c3b      	ldrb	r3, [r7, #16]
 8001d3c:	2bea      	cmp	r3, #234	@ 0xea
 8001d3e:	d105      	bne.n	8001d4c <VL53L1__Init+0x60>
 8001d40:	7c7b      	ldrb	r3, [r7, #17]
 8001d42:	2bcc      	cmp	r3, #204	@ 0xcc
 8001d44:	d102      	bne.n	8001d4c <VL53L1__Init+0x60>
 8001d46:	7cbb      	ldrb	r3, [r7, #18]
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d001      	beq.n	8001d50 <VL53L1__Init+0x64>
		return (1);
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e05f      	b.n	8001e10 <VL53L1__Init+0x124>


	// VL53L1X sensor is available
	/* initializing: default setting  */
	status |= VL53L1X_SensorInit(VL53L1__ADDR);
 8001d50:	2052      	movs	r0, #82	@ 0x52
 8001d52:	f7fe fe1b 	bl	800098c <VL53L1X_SensorInit>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	75fb      	strb	r3, [r7, #23]
	/* initializing: device calibration settings*/
	status |= VL53L1X_SetOffset(VL53L1__ADDR, VL53L1__CALIB_OFFSET);
 8001d64:	f06f 0118 	mvn.w	r1, #24
 8001d68:	2052      	movs	r0, #82	@ 0x52
 8001d6a:	f7ff fa2f 	bl	80011cc <VL53L1X_SetOffset>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetXtalk(VL53L1__ADDR, VL53L1__CALIB_XTALK);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2052      	movs	r0, #82	@ 0x52
 8001d80:	f7ff fa5a 	bl	8001238 <VL53L1X_SetXtalk>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	75fb      	strb	r3, [r7, #23]
	/* initializing: project settings */
	status |= VL53L1X_SetDistanceMode(VL53L1__ADDR, VL53L1__DISTANCE_MODE);
 8001d92:	2102      	movs	r1, #2
 8001d94:	2052      	movs	r0, #82	@ 0x52
 8001d96:	f7ff f8a9 	bl	8000eec <VL53L1X_SetDistanceMode>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetTimingBudgetInMs(VL53L1__ADDR, VL53L1__TIMING_BUDGET);
 8001da8:	2114      	movs	r1, #20
 8001daa:	2052      	movs	r0, #82	@ 0x52
 8001dac:	f7fe ff03 	bl	8000bb6 <VL53L1X_SetTimingBudgetInMs>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetInterMeasurementInMs(VL53L1__ADDR, VL53L1__INTERMEASUREMENT);
 8001dbe:	2119      	movs	r1, #25
 8001dc0:	2052      	movs	r0, #82	@ 0x52
 8001dc2:	f7ff f95d 	bl	8001080 <VL53L1X_SetInterMeasurementInMs>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetDistanceThreshold(VL53L1__ADDR,VL53L1__LOWER_THRESHOLD, VL53L1__UPPER_THRESHOLD, VL53L1__WINDOW_MODE, 0);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001de2:	2052      	movs	r0, #82	@ 0x52
 8001de4:	f7ff fa64 	bl	80012b0 <VL53L1X_SetDistanceThreshold>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1X_SetI2CAddress(VL53L1__ADDR, VL53L1_NEW_ADDR);
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	2052      	movs	r0, #82	@ 0x52
 8001dfc:	f7fe fda8 	bl	8000950 <VL53L1X_SetI2CAddress>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	75fb      	strb	r3, [r7, #23]
	return (status);
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
};
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <VL53L1__GetDistance>:
 * @param	level	minimum value that RangeStatus must have
 * 					to consider wreading accepted
 * @return			0 		if errors or not accepptable reading
 * 					value	the read Distance, if not 0
 *****************************************/
uint8_t VL53L1__GetDistance(uint8_t __ADDR, GPIO_HandlerStruct GPIO1, uint16_t *Distance){
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4604      	mov	r4, r0
 8001e20:	1d38      	adds	r0, r7, #4
 8001e22:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	4623      	mov	r3, r4
 8001e2a:	73fb      	strb	r3, [r7, #15]
	uint8_t RangingStatus;
	uint8_t status =0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
	uint32_t testingTime=HAL_GetTick();
 8001e30:	f000 f8e2 	bl	8001ff8 <HAL_GetTick>
 8001e34:	61b8      	str	r0, [r7, #24]
	static uint16_t PrevDistance=0;

#ifdef	VL53L1__USING_GPIO
	// VL53L1X data available test if TOF_GPIO pin is available
	while ((!HAL_GPIO_ReadPin(GPIO1.Port, GPIO1.Pin)) && ((HAL_GetTick()-testingTime)<=VL53L1__INTERMEASUREMENT)) {};
 8001e36:	bf00      	nop
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fd6f 	bl	8002924 <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <VL53L1__GetDistance+0x42>
 8001e4c:	f000 f8d4 	bl	8001ff8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b19      	cmp	r3, #25
 8001e58:	d9ee      	bls.n	8001e38 <VL53L1__GetDistance+0x20>
	if (HAL_GPIO_ReadPin(GPIO1.Port, GPIO1.Pin)) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd5e 	bl	8002924 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d039      	beq.n	8001ee2 <VL53L1__GetDistance+0xca>
	uint8_t dataReady=0;
	while ((dataReady == 0) && ((HAL_GetTick()-testingTime)<VL53L1__INTERMEASUREMENT) && (!status))
		status |= VL53L1X_CheckForDataReady(__ADDR, &dataReady);
	if (dataReady && (!status)) {
#endif
		status |= VL53L1X_GetRangeStatus(__ADDR, &RangingStatus);
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f107 0217 	add.w	r2, r7, #23
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f979 	bl	8001170 <VL53L1X_GetRangeStatus>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	77fb      	strb	r3, [r7, #31]
		status |= VL53L1X_GetDistance(__ADDR, Distance);
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f94f 	bl	8001136 <VL53L1X_GetDistance>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	77fb      	strb	r3, [r7, #31]
		status |= VL53L1X_ClearInterrupt(__ADDR);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fdda 	bl	8000a64 <VL53L1X_ClearInterrupt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	77fb      	strb	r3, [r7, #31]
		if ((status==0) && (RangingStatus<=VL53L1__RANGE_STATUS_THRESH)) {
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <VL53L1__GetDistance+0xbc>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d804      	bhi.n	8001ed4 <VL53L1__GetDistance+0xbc>
			PrevDistance=*Distance;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <VL53L1__GetDistance+0xe0>)
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	e00c      	b.n	8001eee <VL53L1__GetDistance+0xd6>
		} else {
			*Distance=PrevDistance;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <VL53L1__GetDistance+0xe0>)
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	801a      	strh	r2, [r3, #0]
			status=1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
 8001ee0:	e005      	b.n	8001eee <VL53L1__GetDistance+0xd6>
		}
	} else{
		*Distance=PrevDistance;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <VL53L1__GetDistance+0xe0>)
 8001ee4:	881a      	ldrh	r2, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	801a      	strh	r2, [r3, #0]
		status=1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	77fb      	strb	r3, [r7, #31]
	}
	return status;
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3724      	adds	r7, #36	@ 0x24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	20000208 	.word	0x20000208

08001efc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001efc:	f7ff fdd8 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480b      	ldr	r0, [pc, #44]	@ (8001f30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f02:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f04:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a09      	ldr	r2, [pc, #36]	@ (8001f3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f18:	4c09      	ldr	r4, [pc, #36]	@ (8001f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f26:	f002 fbf5 	bl	8004714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2a:	f7ff fadf 	bl	80014ec <main>
  bx lr
 8001f2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f38:	08005124 	.word	0x08005124
  ldr r2, =_sbss
 8001f3c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f40:	20000378 	.word	0x20000378

08001f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC1_2_IRQHandler>
	...

08001f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_Init+0x28>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <HAL_Init+0x28>)
 8001f52:	f043 0310 	orr.w	r3, r3, #16
 8001f56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 f92b 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f000 f808 	bl	8001f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7ff fc86 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40022000 	.word	0x40022000

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <HAL_InitTick+0x54>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_InitTick+0x58>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f935 	bl	8002202 <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00e      	b.n	8001fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d80a      	bhi.n	8001fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f000 f90b 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	@ (8001fd0 <HAL_InitTick+0x5c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000024 	.word	0x20000024
 8001fcc:	2000002c 	.word	0x2000002c
 8001fd0:	20000028 	.word	0x20000028

08001fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_IncTick+0x1c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_IncTick+0x20>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a03      	ldr	r2, [pc, #12]	@ (8001ff4 <HAL_IncTick+0x20>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	2000002c 	.word	0x2000002c
 8001ff4:	2000020c 	.word	0x2000020c

08001ff8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	@ (8002008 <HAL_GetTick+0x10>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	2000020c 	.word	0x2000020c

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff fff0 	bl	8001ff8 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffe0 	bl	8001ff8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000002c 	.word	0x2000002c

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	@ (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	@ 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff90 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff49 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff5e 	bl	800209c <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff90 	bl	800210c <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5f 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffb0 	bl	8002170 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002236:	4b2f      	ldr	r3, [pc, #188]	@ (80022f4 <HAL_FLASH_Program+0xd8>)
 8002238:	7e1b      	ldrb	r3, [r3, #24]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_FLASH_Program+0x26>
 800223e:	2302      	movs	r3, #2
 8002240:	e054      	b.n	80022ec <HAL_FLASH_Program+0xd0>
 8002242:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <HAL_FLASH_Program+0xd8>)
 8002244:	2201      	movs	r2, #1
 8002246:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002248:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800224c:	f000 f8a8 	bl	80023a0 <FLASH_WaitForLastOperation>
 8002250:	4603      	mov	r3, r0
 8002252:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d144      	bne.n	80022e4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d102      	bne.n	8002266 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002260:	2301      	movs	r3, #1
 8002262:	757b      	strb	r3, [r7, #21]
 8002264:	e007      	b.n	8002276 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d102      	bne.n	8002272 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800226c:	2302      	movs	r3, #2
 800226e:	757b      	strb	r3, [r7, #21]
 8002270:	e001      	b.n	8002276 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002272:	2304      	movs	r3, #4
 8002274:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002276:	2300      	movs	r3, #0
 8002278:	75bb      	strb	r3, [r7, #22]
 800227a:	e02d      	b.n	80022d8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800227c:	7dbb      	ldrb	r3, [r7, #22]
 800227e:	005a      	lsls	r2, r3, #1
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	eb02 0c03 	add.w	ip, r2, r3
 8002286:	7dbb      	ldrb	r3, [r7, #22]
 8002288:	0119      	lsls	r1, r3, #4
 800228a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800228e:	f1c1 0620 	rsb	r6, r1, #32
 8002292:	f1a1 0020 	sub.w	r0, r1, #32
 8002296:	fa22 f401 	lsr.w	r4, r2, r1
 800229a:	fa03 f606 	lsl.w	r6, r3, r6
 800229e:	4334      	orrs	r4, r6
 80022a0:	fa23 f000 	lsr.w	r0, r3, r0
 80022a4:	4304      	orrs	r4, r0
 80022a6:	fa23 f501 	lsr.w	r5, r3, r1
 80022aa:	b2a3      	uxth	r3, r4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4660      	mov	r0, ip
 80022b0:	f000 f85a 	bl	8002368 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022b8:	f000 f872 	bl	80023a0 <FLASH_WaitForLastOperation>
 80022bc:	4603      	mov	r3, r0
 80022be:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80022c0:	4b0d      	ldr	r3, [pc, #52]	@ (80022f8 <HAL_FLASH_Program+0xdc>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4a0c      	ldr	r2, [pc, #48]	@ (80022f8 <HAL_FLASH_Program+0xdc>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d107      	bne.n	80022e2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80022d2:	7dbb      	ldrb	r3, [r7, #22]
 80022d4:	3301      	adds	r3, #1
 80022d6:	75bb      	strb	r3, [r7, #22]
 80022d8:	7dba      	ldrb	r2, [r7, #22]
 80022da:	7d7b      	ldrb	r3, [r7, #21]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3cd      	bcc.n	800227c <HAL_FLASH_Program+0x60>
 80022e0:	e000      	b.n	80022e4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80022e2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_FLASH_Program+0xd8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	761a      	strb	r2, [r3, #24]

  return status;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f4:	20000210 	.word	0x20000210
 80022f8:	40022000 	.word	0x40022000

080022fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_FLASH_Unlock+0x40>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00d      	beq.n	800232e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_FLASH_Unlock+0x40>)
 8002314:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <HAL_FLASH_Unlock+0x44>)
 8002316:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_FLASH_Unlock+0x40>)
 800231a:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_FLASH_Unlock+0x48>)
 800231c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800231e:	4b07      	ldr	r3, [pc, #28]	@ (800233c <HAL_FLASH_Unlock+0x40>)
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800232e:	79fb      	ldrb	r3, [r7, #7]
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000
 8002340:	45670123 	.word	0x45670123
 8002344:	cdef89ab 	.word	0xcdef89ab

08002348 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_FLASH_Lock+0x1c>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_FLASH_Lock+0x1c>)
 8002352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002356:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000

08002368 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002374:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <FLASH_Program_HalfWord+0x30>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <FLASH_Program_HalfWord+0x34>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	4a07      	ldr	r2, [pc, #28]	@ (800239c <FLASH_Program_HalfWord+0x34>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	801a      	strh	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000210 	.word	0x20000210
 800239c:	40022000 	.word	0x40022000

080023a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fe26 	bl	8001ff8 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80023ae:	e010      	b.n	80023d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d00c      	beq.n	80023d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <FLASH_WaitForLastOperation+0x2e>
 80023be:	f7ff fe1b 	bl	8001ff8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d201      	bcs.n	80023d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e025      	b.n	800241e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <FLASH_WaitForLastOperation+0x88>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e8      	bne.n	80023b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <FLASH_WaitForLastOperation+0x88>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <FLASH_WaitForLastOperation+0x88>)
 80023ec:	2220      	movs	r2, #32
 80023ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80023f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <FLASH_WaitForLastOperation+0x88>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80023fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <FLASH_WaitForLastOperation+0x88>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002408:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <FLASH_WaitForLastOperation+0x88>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002414:	f000 f80a 	bl	800242c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000

0800242c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002436:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002442:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <FLASH_SetErrorCode+0x9c>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <FLASH_SetErrorCode+0x9c>)
 800244c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f043 0310 	orr.w	r3, r3, #16
 8002454:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <FLASH_SetErrorCode+0x9c>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <FLASH_SetErrorCode+0x9c>)
 800246c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002476:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <FLASH_SetErrorCode+0x9c>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	4a0f      	ldr	r2, [pc, #60]	@ (80024c8 <FLASH_SetErrorCode+0x9c>)
 800248c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f240 1201 	movw	r2, #257	@ 0x101
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d106      	bne.n	80024b2 <FLASH_SetErrorCode+0x86>
 80024a4:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	4a06      	ldr	r2, [pc, #24]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	61d3      	str	r3, [r2, #28]
}  
 80024b0:	e002      	b.n	80024b8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80024b2:	4a04      	ldr	r2, [pc, #16]	@ (80024c4 <FLASH_SetErrorCode+0x98>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60d3      	str	r3, [r2, #12]
}  
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000
 80024c8:	20000210 	.word	0x20000210

080024cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024de:	4b2f      	ldr	r3, [pc, #188]	@ (800259c <HAL_FLASHEx_Erase+0xd0>)
 80024e0:	7e1b      	ldrb	r3, [r3, #24]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_FLASHEx_Erase+0x1e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e053      	b.n	8002592 <HAL_FLASHEx_Erase+0xc6>
 80024ea:	4b2c      	ldr	r3, [pc, #176]	@ (800259c <HAL_FLASHEx_Erase+0xd0>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d116      	bne.n	8002526 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024fc:	f7ff ff50 	bl	80023a0 <FLASH_WaitForLastOperation>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d141      	bne.n	800258a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002506:	2001      	movs	r0, #1
 8002508:	f000 f84c 	bl	80025a4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800250c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002510:	f7ff ff46 	bl	80023a0 <FLASH_WaitForLastOperation>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002518:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <HAL_FLASHEx_Erase+0xd4>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	4a20      	ldr	r2, [pc, #128]	@ (80025a0 <HAL_FLASHEx_Erase+0xd4>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6113      	str	r3, [r2, #16]
 8002524:	e031      	b.n	800258a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002526:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800252a:	f7ff ff39 	bl	80023a0 <FLASH_WaitForLastOperation>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d12a      	bne.n	800258a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f04f 32ff 	mov.w	r2, #4294967295
 800253a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	e019      	b.n	8002578 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002544:	68b8      	ldr	r0, [r7, #8]
 8002546:	f000 f849 	bl	80025dc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800254a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800254e:	f7ff ff27 	bl	80023a0 <FLASH_WaitForLastOperation>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_FLASHEx_Erase+0xd4>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	4a11      	ldr	r2, [pc, #68]	@ (80025a0 <HAL_FLASHEx_Erase+0xd4>)
 800255c:	f023 0302 	bic.w	r3, r3, #2
 8002560:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	601a      	str	r2, [r3, #0]
            break;
 800256e:	e00c      	b.n	800258a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002576:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	029a      	lsls	r2, r3, #10
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4413      	add	r3, r2
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	d3dc      	bcc.n	8002544 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <HAL_FLASHEx_Erase+0xd0>)
 800258c:	2200      	movs	r2, #0
 800258e:	761a      	strb	r2, [r3, #24]

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000210 	.word	0x20000210
 80025a0:	40022000 	.word	0x40022000

080025a4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025ac:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <FLASH_MassErase+0x30>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80025b2:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <FLASH_MassErase+0x34>)
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	4a08      	ldr	r2, [pc, #32]	@ (80025d8 <FLASH_MassErase+0x34>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <FLASH_MassErase+0x34>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <FLASH_MassErase+0x34>)
 80025c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025c8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000210 	.word	0x20000210
 80025d8:	40022000 	.word	0x40022000

080025dc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <FLASH_PageErase+0x38>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <FLASH_PageErase+0x3c>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002618 <FLASH_PageErase+0x3c>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80025f6:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <FLASH_PageErase+0x3c>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <FLASH_PageErase+0x3c>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <FLASH_PageErase+0x3c>)
 8002602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002606:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000210 	.word	0x20000210
 8002618:	40022000 	.word	0x40022000

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b08b      	sub	sp, #44	@ 0x2c
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262e:	e169      	b.n	8002904 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002630:	2201      	movs	r2, #1
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	429a      	cmp	r2, r3
 800264a:	f040 8158 	bne.w	80028fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4a9a      	ldr	r2, [pc, #616]	@ (80028bc <HAL_GPIO_Init+0x2a0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d05e      	beq.n	8002716 <HAL_GPIO_Init+0xfa>
 8002658:	4a98      	ldr	r2, [pc, #608]	@ (80028bc <HAL_GPIO_Init+0x2a0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d875      	bhi.n	800274a <HAL_GPIO_Init+0x12e>
 800265e:	4a98      	ldr	r2, [pc, #608]	@ (80028c0 <HAL_GPIO_Init+0x2a4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d058      	beq.n	8002716 <HAL_GPIO_Init+0xfa>
 8002664:	4a96      	ldr	r2, [pc, #600]	@ (80028c0 <HAL_GPIO_Init+0x2a4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d86f      	bhi.n	800274a <HAL_GPIO_Init+0x12e>
 800266a:	4a96      	ldr	r2, [pc, #600]	@ (80028c4 <HAL_GPIO_Init+0x2a8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d052      	beq.n	8002716 <HAL_GPIO_Init+0xfa>
 8002670:	4a94      	ldr	r2, [pc, #592]	@ (80028c4 <HAL_GPIO_Init+0x2a8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d869      	bhi.n	800274a <HAL_GPIO_Init+0x12e>
 8002676:	4a94      	ldr	r2, [pc, #592]	@ (80028c8 <HAL_GPIO_Init+0x2ac>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d04c      	beq.n	8002716 <HAL_GPIO_Init+0xfa>
 800267c:	4a92      	ldr	r2, [pc, #584]	@ (80028c8 <HAL_GPIO_Init+0x2ac>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d863      	bhi.n	800274a <HAL_GPIO_Init+0x12e>
 8002682:	4a92      	ldr	r2, [pc, #584]	@ (80028cc <HAL_GPIO_Init+0x2b0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d046      	beq.n	8002716 <HAL_GPIO_Init+0xfa>
 8002688:	4a90      	ldr	r2, [pc, #576]	@ (80028cc <HAL_GPIO_Init+0x2b0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d85d      	bhi.n	800274a <HAL_GPIO_Init+0x12e>
 800268e:	2b12      	cmp	r3, #18
 8002690:	d82a      	bhi.n	80026e8 <HAL_GPIO_Init+0xcc>
 8002692:	2b12      	cmp	r3, #18
 8002694:	d859      	bhi.n	800274a <HAL_GPIO_Init+0x12e>
 8002696:	a201      	add	r2, pc, #4	@ (adr r2, 800269c <HAL_GPIO_Init+0x80>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	08002717 	.word	0x08002717
 80026a0:	080026f1 	.word	0x080026f1
 80026a4:	08002703 	.word	0x08002703
 80026a8:	08002745 	.word	0x08002745
 80026ac:	0800274b 	.word	0x0800274b
 80026b0:	0800274b 	.word	0x0800274b
 80026b4:	0800274b 	.word	0x0800274b
 80026b8:	0800274b 	.word	0x0800274b
 80026bc:	0800274b 	.word	0x0800274b
 80026c0:	0800274b 	.word	0x0800274b
 80026c4:	0800274b 	.word	0x0800274b
 80026c8:	0800274b 	.word	0x0800274b
 80026cc:	0800274b 	.word	0x0800274b
 80026d0:	0800274b 	.word	0x0800274b
 80026d4:	0800274b 	.word	0x0800274b
 80026d8:	0800274b 	.word	0x0800274b
 80026dc:	0800274b 	.word	0x0800274b
 80026e0:	080026f9 	.word	0x080026f9
 80026e4:	0800270d 	.word	0x0800270d
 80026e8:	4a79      	ldr	r2, [pc, #484]	@ (80028d0 <HAL_GPIO_Init+0x2b4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ee:	e02c      	b.n	800274a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	623b      	str	r3, [r7, #32]
          break;
 80026f6:	e029      	b.n	800274c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	3304      	adds	r3, #4
 80026fe:	623b      	str	r3, [r7, #32]
          break;
 8002700:	e024      	b.n	800274c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	3308      	adds	r3, #8
 8002708:	623b      	str	r3, [r7, #32]
          break;
 800270a:	e01f      	b.n	800274c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	330c      	adds	r3, #12
 8002712:	623b      	str	r3, [r7, #32]
          break;
 8002714:	e01a      	b.n	800274c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800271e:	2304      	movs	r3, #4
 8002720:	623b      	str	r3, [r7, #32]
          break;
 8002722:	e013      	b.n	800274c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800272c:	2308      	movs	r3, #8
 800272e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	611a      	str	r2, [r3, #16]
          break;
 8002736:	e009      	b.n	800274c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002738:	2308      	movs	r3, #8
 800273a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	615a      	str	r2, [r3, #20]
          break;
 8002742:	e003      	b.n	800274c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
          break;
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x130>
          break;
 800274a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2bff      	cmp	r3, #255	@ 0xff
 8002750:	d801      	bhi.n	8002756 <HAL_GPIO_Init+0x13a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	e001      	b.n	800275a <HAL_GPIO_Init+0x13e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2bff      	cmp	r3, #255	@ 0xff
 8002760:	d802      	bhi.n	8002768 <HAL_GPIO_Init+0x14c>
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	e002      	b.n	800276e <HAL_GPIO_Init+0x152>
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	3b08      	subs	r3, #8
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	210f      	movs	r1, #15
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	6a39      	ldr	r1, [r7, #32]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	431a      	orrs	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80b1 	beq.w	80028fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800279c:	4b4d      	ldr	r3, [pc, #308]	@ (80028d4 <HAL_GPIO_Init+0x2b8>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4a4c      	ldr	r2, [pc, #304]	@ (80028d4 <HAL_GPIO_Init+0x2b8>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6193      	str	r3, [r2, #24]
 80027a8:	4b4a      	ldr	r3, [pc, #296]	@ (80028d4 <HAL_GPIO_Init+0x2b8>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027b4:	4a48      	ldr	r2, [pc, #288]	@ (80028d8 <HAL_GPIO_Init+0x2bc>)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3302      	adds	r3, #2
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	220f      	movs	r2, #15
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a40      	ldr	r2, [pc, #256]	@ (80028dc <HAL_GPIO_Init+0x2c0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d013      	beq.n	8002808 <HAL_GPIO_Init+0x1ec>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a3f      	ldr	r2, [pc, #252]	@ (80028e0 <HAL_GPIO_Init+0x2c4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00d      	beq.n	8002804 <HAL_GPIO_Init+0x1e8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3e      	ldr	r2, [pc, #248]	@ (80028e4 <HAL_GPIO_Init+0x2c8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d007      	beq.n	8002800 <HAL_GPIO_Init+0x1e4>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a3d      	ldr	r2, [pc, #244]	@ (80028e8 <HAL_GPIO_Init+0x2cc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_GPIO_Init+0x1e0>
 80027f8:	2303      	movs	r3, #3
 80027fa:	e006      	b.n	800280a <HAL_GPIO_Init+0x1ee>
 80027fc:	2304      	movs	r3, #4
 80027fe:	e004      	b.n	800280a <HAL_GPIO_Init+0x1ee>
 8002800:	2302      	movs	r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0x1ee>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_GPIO_Init+0x1ee>
 8002808:	2300      	movs	r3, #0
 800280a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280c:	f002 0203 	and.w	r2, r2, #3
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	4093      	lsls	r3, r2
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800281a:	492f      	ldr	r1, [pc, #188]	@ (80028d8 <HAL_GPIO_Init+0x2bc>)
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002834:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	492c      	ldr	r1, [pc, #176]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002842:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	43db      	mvns	r3, r3
 800284a:	4928      	ldr	r1, [pc, #160]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 800284c:	4013      	ands	r3, r2
 800284e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800285c:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	4922      	ldr	r1, [pc, #136]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	60cb      	str	r3, [r1, #12]
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	43db      	mvns	r3, r3
 8002872:	491e      	ldr	r1, [pc, #120]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 8002874:	4013      	ands	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002884:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4918      	ldr	r1, [pc, #96]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002892:	4b16      	ldr	r3, [pc, #88]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	43db      	mvns	r3, r3
 800289a:	4914      	ldr	r1, [pc, #80]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 800289c:	4013      	ands	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d021      	beq.n	80028f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028ac:	4b0f      	ldr	r3, [pc, #60]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	490e      	ldr	r1, [pc, #56]	@ (80028ec <HAL_GPIO_Init+0x2d0>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	e021      	b.n	80028fe <HAL_GPIO_Init+0x2e2>
 80028ba:	bf00      	nop
 80028bc:	10320000 	.word	0x10320000
 80028c0:	10310000 	.word	0x10310000
 80028c4:	10220000 	.word	0x10220000
 80028c8:	10210000 	.word	0x10210000
 80028cc:	10120000 	.word	0x10120000
 80028d0:	10110000 	.word	0x10110000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40010800 	.word	0x40010800
 80028e0:	40010c00 	.word	0x40010c00
 80028e4:	40011000 	.word	0x40011000
 80028e8:	40011400 	.word	0x40011400
 80028ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_GPIO_Init+0x304>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	4909      	ldr	r1, [pc, #36]	@ (8002920 <HAL_GPIO_Init+0x304>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	3301      	adds	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	f47f ae8e 	bne.w	8002630 <HAL_GPIO_Init+0x14>
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	372c      	adds	r7, #44	@ 0x2c
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	e001      	b.n	8002946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	807b      	strh	r3, [r7, #2]
 800295e:	4613      	mov	r3, r2
 8002960:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002962:	787b      	ldrb	r3, [r7, #1]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002968:	887a      	ldrh	r2, [r7, #2]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800296e:	e003      	b.n	8002978 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	041a      	lsls	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
	...

08002984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e12b      	b.n	8002bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe ff94 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	@ 0x24
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e8:	f001 fbfc 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 80029ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a81      	ldr	r2, [pc, #516]	@ (8002bf8 <HAL_I2C_Init+0x274>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d807      	bhi.n	8002a08 <HAL_I2C_Init+0x84>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a80      	ldr	r2, [pc, #512]	@ (8002bfc <HAL_I2C_Init+0x278>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e006      	b.n	8002a16 <HAL_I2C_Init+0x92>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c00 <HAL_I2C_Init+0x27c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	bf94      	ite	ls
 8002a10:	2301      	movls	r3, #1
 8002a12:	2300      	movhi	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0e7      	b.n	8002bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a78      	ldr	r2, [pc, #480]	@ (8002c04 <HAL_I2C_Init+0x280>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0c9b      	lsrs	r3, r3, #18
 8002a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf8 <HAL_I2C_Init+0x274>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d802      	bhi.n	8002a58 <HAL_I2C_Init+0xd4>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3301      	adds	r3, #1
 8002a56:	e009      	b.n	8002a6c <HAL_I2C_Init+0xe8>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	4a69      	ldr	r2, [pc, #420]	@ (8002c08 <HAL_I2C_Init+0x284>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	495c      	ldr	r1, [pc, #368]	@ (8002bf8 <HAL_I2C_Init+0x274>)
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	d819      	bhi.n	8002ac0 <HAL_I2C_Init+0x13c>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e59      	subs	r1, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_I2C_Init+0x138>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e59      	subs	r1, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aba:	e051      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e04f      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d111      	bne.n	8002aec <HAL_I2C_Init+0x168>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e012      	b.n	8002b12 <HAL_I2C_Init+0x18e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x196>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e022      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10e      	bne.n	8002b40 <HAL_I2C_Init+0x1bc>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1e58      	subs	r0, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	440b      	add	r3, r1
 8002b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b3e:	e00f      	b.n	8002b60 <HAL_I2C_Init+0x1dc>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e58      	subs	r0, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	0099      	lsls	r1, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	6809      	ldr	r1, [r1, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6911      	ldr	r1, [r2, #16]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68d2      	ldr	r2, [r2, #12]
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	000186a0 	.word	0x000186a0
 8002bfc:	001e847f 	.word	0x001e847f
 8002c00:	003d08ff 	.word	0x003d08ff
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	10624dd3 	.word	0x10624dd3

08002c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c26:	f7ff f9e7 	bl	8001ff8 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	f040 80d9 	bne.w	8002dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2319      	movs	r3, #25
 8002c40:	2201      	movs	r2, #1
 8002c42:	496d      	ldr	r1, [pc, #436]	@ (8002df8 <HAL_I2C_Mem_Write+0x1ec>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fccd 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0cc      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Mem_Write+0x56>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0c5      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d007      	beq.n	8002c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2221      	movs	r2, #33	@ 0x21
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2240      	movs	r2, #64	@ 0x40
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a4d      	ldr	r2, [pc, #308]	@ (8002dfc <HAL_I2C_Mem_Write+0x1f0>)
 8002cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cca:	88f8      	ldrh	r0, [r7, #6]
 8002ccc:	893a      	ldrh	r2, [r7, #8]
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4603      	mov	r3, r0
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fb04 	bl	80032e8 <I2C_RequestMemoryWrite>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d052      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e081      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fd92 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d107      	bne.n	8002d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06b      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d11b      	bne.n	8002d8c <HAL_I2C_Mem_Write+0x180>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1aa      	bne.n	8002cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fd85 	bl	80038a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d107      	bne.n	8002dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e016      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e000      	b.n	8002dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00100002 	.word	0x00100002
 8002dfc:	ffff0000 	.word	0xffff0000

08002e00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	@ 0x30
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	817b      	strh	r3, [r7, #10]
 8002e12:	460b      	mov	r3, r1
 8002e14:	813b      	strh	r3, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e1e:	f7ff f8eb 	bl	8001ff8 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	f040 8250 	bne.w	80032d2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	2319      	movs	r3, #25
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4982      	ldr	r1, [pc, #520]	@ (8003044 <HAL_I2C_Mem_Read+0x244>)
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fbd1 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e243      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x5a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e23c      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d007      	beq.n	8002e80 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2222      	movs	r2, #34	@ 0x22
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2240      	movs	r2, #64	@ 0x40
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a62      	ldr	r2, [pc, #392]	@ (8003048 <HAL_I2C_Mem_Read+0x248>)
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ec2:	88f8      	ldrh	r0, [r7, #6]
 8002ec4:	893a      	ldrh	r2, [r7, #8]
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fa9e 	bl	8003414 <I2C_RequestMemoryRead>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e1f8      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d113      	bne.n	8002f12 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e1cc      	b.n	80032ac <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d11e      	bne.n	8002f58 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2a:	b672      	cpsid	i
}
 8002f2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f54:	b662      	cpsie	i
}
 8002f56:	e035      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d11e      	bne.n	8002f9e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f70:	b672      	cpsid	i
}
 8002f72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f9a:	b662      	cpsie	i
}
 8002f9c:	e012      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fc4:	e172      	b.n	80032ac <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	f200 811f 	bhi.w	800320e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d123      	bne.n	8003020 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fcab 	bl	8003938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e173      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800301e:	e145      	b.n	80032ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	2b02      	cmp	r3, #2
 8003026:	d152      	bne.n	80030ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302e:	2200      	movs	r2, #0
 8003030:	4906      	ldr	r1, [pc, #24]	@ (800304c <HAL_I2C_Mem_Read+0x24c>)
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fad6 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e148      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
 8003042:	bf00      	nop
 8003044:	00100002 	.word	0x00100002
 8003048:	ffff0000 	.word	0xffff0000
 800304c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003050:	b672      	cpsid	i
}
 8003052:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003096:	b662      	cpsie	i
}
 8003098:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030cc:	e0ee      	b.n	80032ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	2200      	movs	r2, #0
 80030d6:	4981      	ldr	r1, [pc, #516]	@ (80032dc <HAL_I2C_Mem_Read+0x4dc>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fa83 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0f5      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030f8:	b672      	cpsid	i
}
 80030fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800312e:	4b6c      	ldr	r3, [pc, #432]	@ (80032e0 <HAL_I2C_Mem_Read+0x4e0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	08db      	lsrs	r3, r3, #3
 8003134:	4a6b      	ldr	r2, [pc, #428]	@ (80032e4 <HAL_I2C_Mem_Read+0x4e4>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a1a      	lsrs	r2, r3, #8
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00da      	lsls	r2, r3, #3
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	3b01      	subs	r3, #1
 800314c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d118      	bne.n	8003186 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003176:	b662      	cpsie	i
}
 8003178:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0a6      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b04      	cmp	r3, #4
 8003192:	d1d9      	bne.n	8003148 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031d6:	b662      	cpsie	i
}
 80031d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800320c:	e04e      	b.n	80032ac <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003210:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fb90 	bl	8003938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e058      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d124      	bne.n	80032ac <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003278:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f ae88 	bne.w	8002fc6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	@ 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	00010004 	.word	0x00010004
 80032e0:	20000024 	.word	0x20000024
 80032e4:	14f8b589 	.word	0x14f8b589

080032e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	817b      	strh	r3, [r7, #10]
 80032fa:	460b      	mov	r3, r1
 80032fc:	813b      	strh	r3, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	2200      	movs	r2, #0
 800331a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f960 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003338:	d103      	bne.n	8003342 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003340:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e05f      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003354:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	492d      	ldr	r1, [pc, #180]	@ (8003410 <I2C_RequestMemoryWrite+0x128>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f9bb 	bl	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e04c      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003384:	6a39      	ldr	r1, [r7, #32]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fa46 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	2b04      	cmp	r3, #4
 8003398:	d107      	bne.n	80033aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e02b      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	e021      	b.n	8003404 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fa20 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e005      	b.n	8003406 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033fa:	893b      	ldrh	r3, [r7, #8]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00010002 	.word	0x00010002

08003414 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	817b      	strh	r3, [r7, #10]
 8003426:	460b      	mov	r3, r1
 8003428:	813b      	strh	r3, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800343c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800344c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	2200      	movs	r2, #0
 8003456:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8c2 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003474:	d103      	bne.n	800347e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800347c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0aa      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003490:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	4952      	ldr	r1, [pc, #328]	@ (80035e0 <I2C_RequestMemoryRead+0x1cc>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f91d 	bl	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e097      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c0:	6a39      	ldr	r1, [r7, #32]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f9a8 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d107      	bne.n	80034e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e076      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f0:	893b      	ldrh	r3, [r7, #8]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	611a      	str	r2, [r3, #16]
 80034fa:	e021      	b.n	8003540 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034fc:	893b      	ldrh	r3, [r7, #8]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	b29b      	uxth	r3, r3
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350c:	6a39      	ldr	r1, [r7, #32]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f982 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	2b04      	cmp	r3, #4
 8003520:	d107      	bne.n	8003532 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e050      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003536:	893b      	ldrh	r3, [r7, #8]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	6a39      	ldr	r1, [r7, #32]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f967 	bl	8003818 <I2C_WaitOnTXEFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2b04      	cmp	r3, #4
 8003556:	d107      	bne.n	8003568 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003566:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e035      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800357a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2200      	movs	r2, #0
 8003584:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f82b 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a2:	d103      	bne.n	80035ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e013      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035b0:	897b      	ldrh	r3, [r7, #10]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	4906      	ldr	r1, [pc, #24]	@ (80035e0 <I2C_RequestMemoryRead+0x1cc>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f886 	bl	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00010002 	.word	0x00010002

080035e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	e048      	b.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d044      	beq.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe fcfb 	bl	8001ff8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d139      	bne.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10d      	bne.n	800363a <I2C_WaitOnFlagUntilTimeout+0x56>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	e00c      	b.n	8003654 <I2C_WaitOnFlagUntilTimeout+0x70>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	43da      	mvns	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d116      	bne.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e023      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10d      	bne.n	80036ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	e00c      	b.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	43da      	mvns	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d093      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e6:	e071      	b.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f6:	d123      	bne.n	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003706:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e067      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d041      	beq.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe fc56 	bl	8001ff8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d136      	bne.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10c      	bne.n	8003782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e00b      	b.n	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	43da      	mvns	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e021      	b.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10c      	bne.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e00b      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af6d 	bne.w	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003824:	e034      	b.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f8e3 	bl	80039f2 <I2C_IsAcknowledgeFailed>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e034      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d028      	beq.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe fbdb 	bl	8001ff8 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	d016      	beq.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e007      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389a:	2b80      	cmp	r3, #128	@ 0x80
 800389c:	d1c3      	bne.n	8003826 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b4:	e034      	b.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f89b 	bl	80039f2 <I2C_IsAcknowledgeFailed>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e034      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d028      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe fb93 	bl	8001ff8 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11d      	bne.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d016      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d1c3      	bne.n	80038b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003944:	e049      	b.n	80039da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b10      	cmp	r3, #16
 8003952:	d119      	bne.n	8003988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0210 	mvn.w	r2, #16
 800395c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e030      	b.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fe fb36 	bl	8001ff8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d016      	beq.n	80039da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e007      	b.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d1ae      	bne.n	8003946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a08:	d11b      	bne.n	8003a42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e272      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8087 	beq.w	8003b7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a70:	4b92      	ldr	r3, [pc, #584]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d00c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a7c:	4b8f      	ldr	r3, [pc, #572]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d112      	bne.n	8003aae <HAL_RCC_OscConfig+0x5e>
 8003a88:	4b8c      	ldr	r3, [pc, #560]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a94:	d10b      	bne.n	8003aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	4b89      	ldr	r3, [pc, #548]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d06c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x12c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d168      	bne.n	8003b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e24c      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x76>
 8003ab8:	4b80      	ldr	r3, [pc, #512]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7f      	ldr	r2, [pc, #508]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e02e      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x98>
 8003ace:	4b7b      	ldr	r3, [pc, #492]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b78      	ldr	r3, [pc, #480]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a77      	ldr	r2, [pc, #476]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0xbc>
 8003af2:	4b72      	ldr	r3, [pc, #456]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a71      	ldr	r2, [pc, #452]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xd4>
 8003b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6a      	ldr	r2, [pc, #424]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b68      	ldr	r3, [pc, #416]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a67      	ldr	r2, [pc, #412]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fa64 	bl	8001ff8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fa60 	bl	8001ff8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	@ 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e200      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b5d      	ldr	r3, [pc, #372]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe4>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fa50 	bl	8001ff8 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fa4c 	bl	8001ff8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1ec      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b53      	ldr	r3, [pc, #332]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x10c>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b96:	4b49      	ldr	r3, [pc, #292]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x18c>
 8003ba2:	4b46      	ldr	r3, [pc, #280]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b43      	ldr	r3, [pc, #268]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x176>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1c0      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4939      	ldr	r1, [pc, #228]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e03a      	b.n	8003c52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <HAL_RCC_OscConfig+0x270>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fe fa05 	bl	8001ff8 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fa01 	bl	8001ff8 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e1a1      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	4b2d      	ldr	r3, [pc, #180]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c10:	4b2a      	ldr	r3, [pc, #168]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4927      	ldr	r1, [pc, #156]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c26:	4b26      	ldr	r3, [pc, #152]	@ (8003cc0 <HAL_RCC_OscConfig+0x270>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f9e4 	bl	8001ff8 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe f9e0 	bl	8001ff8 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e180      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03a      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d019      	beq.n	8003c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c66:	4b17      	ldr	r3, [pc, #92]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fe f9c4 	bl	8001ff8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fe f9c0 	bl	8001ff8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e160      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c92:	2001      	movs	r0, #1
 8003c94:	f000 face 	bl	8004234 <RCC_Delay>
 8003c98:	e01c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fe f9aa 	bl	8001ff8 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca6:	e00f      	b.n	8003cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7fe f9a6 	bl	8001ff8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d908      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e146      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	42420000 	.word	0x42420000
 8003cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	4b92      	ldr	r3, [pc, #584]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e9      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a6 	beq.w	8003e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10d      	bne.n	8003d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b88      	ldr	r3, [pc, #544]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	4a87      	ldr	r2, [pc, #540]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	61d3      	str	r3, [r2, #28]
 8003cfe:	4b85      	ldr	r3, [pc, #532]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	4b82      	ldr	r3, [pc, #520]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fe f967 	bl	8001ff8 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fe f963 	bl	8001ff8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e103      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	4b75      	ldr	r3, [pc, #468]	@ (8003f18 <HAL_RCC_OscConfig+0x4c8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x312>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a6e      	ldr	r2, [pc, #440]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	e02d      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x334>
 8003d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a69      	ldr	r2, [pc, #420]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	6213      	str	r3, [r2, #32]
 8003d76:	4b67      	ldr	r3, [pc, #412]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4a66      	ldr	r2, [pc, #408]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	6213      	str	r3, [r2, #32]
 8003d82:	e01c      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_OscConfig+0x356>
 8003d8c:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4a60      	ldr	r2, [pc, #384]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6213      	str	r3, [r2, #32]
 8003d98:	4b5e      	ldr	r3, [pc, #376]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6213      	str	r3, [r2, #32]
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0x36e>
 8003da6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4a5a      	ldr	r2, [pc, #360]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6213      	str	r3, [r2, #32]
 8003db2:	4b58      	ldr	r3, [pc, #352]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4a57      	ldr	r2, [pc, #348]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d015      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fe f917 	bl	8001ff8 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fe f913 	bl	8001ff8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0b1      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <HAL_RCC_OscConfig+0x37e>
 8003df0:	e014      	b.n	8003e1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fe f901 	bl	8001ff8 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fe f8fd 	bl	8001ff8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e09b      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	4b40      	ldr	r3, [pc, #256]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ee      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b3c      	ldr	r3, [pc, #240]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4a3b      	ldr	r2, [pc, #236]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8087 	beq.w	8003f46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e38:	4b36      	ldr	r3, [pc, #216]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d061      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d146      	bne.n	8003eda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b33      	ldr	r3, [pc, #204]	@ (8003f1c <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fe f8d1 	bl	8001ff8 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fe f8cd 	bl	8001ff8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e06d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6c:	4b29      	ldr	r3, [pc, #164]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e80:	d108      	bne.n	8003e94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e82:	4b24      	ldr	r3, [pc, #144]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4921      	ldr	r1, [pc, #132]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e94:	4b1f      	ldr	r3, [pc, #124]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a19      	ldr	r1, [r3, #32]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	491b      	ldr	r1, [pc, #108]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe f8a1 	bl	8001ff8 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe f89d 	bl	8001ff8 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e03d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ecc:	4b11      	ldr	r3, [pc, #68]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x46a>
 8003ed8:	e035      	b.n	8003f46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_RCC_OscConfig+0x4cc>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fe f88a 	bl	8001ff8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fe f886 	bl	8001ff8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e026      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x498>
 8003f06:	e01e      	b.n	8003f46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e019      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_RCC_OscConfig+0x500>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000

08003f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0d0      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b6a      	ldr	r3, [pc, #424]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d910      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b67      	ldr	r3, [pc, #412]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 0207 	bic.w	r2, r3, #7
 8003f7e:	4965      	ldr	r1, [pc, #404]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0b8      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc8:	4b53      	ldr	r3, [pc, #332]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b50      	ldr	r3, [pc, #320]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	494d      	ldr	r1, [pc, #308]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d040      	beq.n	8004074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d115      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e07f      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e073      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	4b3d      	ldr	r3, [pc, #244]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e06b      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4936      	ldr	r1, [pc, #216]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004044:	f7fd ffd8 	bl	8001ff8 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fd ffd4 	bl	8001ff8 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e053      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b2d      	ldr	r3, [pc, #180]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d210      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b24      	ldr	r3, [pc, #144]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 0207 	bic.w	r2, r3, #7
 800408a:	4922      	ldr	r1, [pc, #136]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e032      	b.n	800410a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4916      	ldr	r1, [pc, #88]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	490e      	ldr	r1, [pc, #56]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e2:	f000 f821 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040e6:	4602      	mov	r2, r0
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	490a      	ldr	r1, [pc, #40]	@ (800411c <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1cc>)
 80040fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_ClockConfig+0x1d0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd ff36 	bl	8001f74 <HAL_InitTick>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40022000 	.word	0x40022000
 8004118:	40021000 	.word	0x40021000
 800411c:	080050b4 	.word	0x080050b4
 8004120:	20000024 	.word	0x20000024
 8004124:	20000028 	.word	0x20000028

08004128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b04      	cmp	r3, #4
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x30>
 8004152:	2b08      	cmp	r3, #8
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x36>
 8004156:	e027      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800415a:	613b      	str	r3, [r7, #16]
      break;
 800415c:	e027      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	0c9b      	lsrs	r3, r3, #18
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004168:	5cd3      	ldrb	r3, [r2, r3]
 800416a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004176:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	0c5b      	lsrs	r3, r3, #17
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	4a11      	ldr	r2, [pc, #68]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a0d      	ldr	r2, [pc, #52]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800418a:	fb03 f202 	mul.w	r2, r3, r2
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e004      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a0c      	ldr	r2, [pc, #48]	@ (80041cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800419c:	fb02 f303 	mul.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	613b      	str	r3, [r7, #16]
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80041aa:	613b      	str	r3, [r7, #16]
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	693b      	ldr	r3, [r7, #16]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	007a1200 	.word	0x007a1200
 80041c4:	080050cc 	.word	0x080050cc
 80041c8:	080050dc 	.word	0x080050dc
 80041cc:	003d0900 	.word	0x003d0900

080041d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d4:	4b02      	ldr	r3, [pc, #8]	@ (80041e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	20000024 	.word	0x20000024

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff2 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	080050c4 	.word	0x080050c4

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004210:	f7ff ffde 	bl	80041d0 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	0adb      	lsrs	r3, r3, #11
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	@ (8004230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	080050c4 	.word	0x080050c4

08004234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800423c:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <RCC_Delay+0x34>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <RCC_Delay+0x38>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	0a5b      	lsrs	r3, r3, #9
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004250:	bf00      	nop
  }
  while (Delay --);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	60fa      	str	r2, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f9      	bne.n	8004250 <RCC_Delay+0x1c>
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	20000024 	.word	0x20000024
 800426c:	10624dd3 	.word	0x10624dd3

08004270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e042      	b.n	8004308 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd fb5c 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	@ 0x24
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f971 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	@ 0x28
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b20      	cmp	r3, #32
 800432e:	d175      	bne.n	800441c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Transmit+0x2c>
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e06e      	b.n	800441e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2221      	movs	r2, #33	@ 0x21
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800434e:	f7fd fe53 	bl	8001ff8 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004368:	d108      	bne.n	800437c <HAL_UART_Transmit+0x6c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e003      	b.n	8004384 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004384:	e02e      	b.n	80043e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	@ 0x80
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f848 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e03a      	b.n	800441e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	3302      	adds	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e007      	b.n	80043d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1cb      	bne.n	8004386 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2140      	movs	r1, #64	@ 0x40
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f814 	bl	8004426 <UART_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e006      	b.n	800441e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e000      	b.n	800441e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
  }
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	e03b      	b.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d037      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fd fdda 	bl	8001ff8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <UART_WaitOnFlagUntilTimeout+0x30>
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e03a      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d020      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d01d      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b08      	cmp	r3, #8
 8004480:	d116      	bne.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f81d 	bl	80044d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2208      	movs	r2, #8
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e00f      	b.n	80044d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d0b4      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b095      	sub	sp, #84	@ 0x54
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004500:	643a      	str	r2, [r7, #64]	@ 0x40
 8004502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800450e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e5      	bne.n	80044e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3314      	adds	r3, #20
 800451a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	61fb      	str	r3, [r7, #28]
   return(result);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3314      	adds	r3, #20
 8004532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800453a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	2b01      	cmp	r3, #1
 800454e:	d119      	bne.n	8004584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	647b      	str	r3, [r7, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004570:	61ba      	str	r2, [r7, #24]
 8004572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	613b      	str	r3, [r7, #16]
   return(result);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e5      	bne.n	8004550 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004592:	bf00      	nop
 8004594:	3754      	adds	r7, #84	@ 0x54
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045d6:	f023 030c 	bic.w	r3, r3, #12
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <UART_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff fe02 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	e002      	b.n	8004612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7ff fdea 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8004610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a22      	ldr	r2, [pc, #136]	@ (80046b4 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	0119      	lsls	r1, r3, #4
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f2f3 	udiv	r2, r2, r3
 8004648:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <UART_SetConfig+0x118>)
 800464a:	fba3 0302 	umull	r0, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2064      	movs	r0, #100	@ 0x64
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	@ 0x32
 800465c:	4a15      	ldr	r2, [pc, #84]	@ (80046b4 <UART_SetConfig+0x118>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004668:	4419      	add	r1, r3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <UART_SetConfig+0x118>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	@ 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	@ 0x32
 8004694:	4a07      	ldr	r2, [pc, #28]	@ (80046b4 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	440a      	add	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013800 	.word	0x40013800
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <siprintf>:
 80046b8:	b40e      	push	{r1, r2, r3}
 80046ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046be:	b500      	push	{lr}
 80046c0:	b09c      	sub	sp, #112	@ 0x70
 80046c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80046c4:	9002      	str	r0, [sp, #8]
 80046c6:	9006      	str	r0, [sp, #24]
 80046c8:	9107      	str	r1, [sp, #28]
 80046ca:	9104      	str	r1, [sp, #16]
 80046cc:	4808      	ldr	r0, [pc, #32]	@ (80046f0 <siprintf+0x38>)
 80046ce:	4909      	ldr	r1, [pc, #36]	@ (80046f4 <siprintf+0x3c>)
 80046d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d4:	9105      	str	r1, [sp, #20]
 80046d6:	6800      	ldr	r0, [r0, #0]
 80046d8:	a902      	add	r1, sp, #8
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	f000 f9a0 	bl	8004a20 <_svfiprintf_r>
 80046e0:	2200      	movs	r2, #0
 80046e2:	9b02      	ldr	r3, [sp, #8]
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	b01c      	add	sp, #112	@ 0x70
 80046e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046ec:	b003      	add	sp, #12
 80046ee:	4770      	bx	lr
 80046f0:	20000030 	.word	0x20000030
 80046f4:	ffff0208 	.word	0xffff0208

080046f8 <memset>:
 80046f8:	4603      	mov	r3, r0
 80046fa:	4402      	add	r2, r0
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d100      	bne.n	8004702 <memset+0xa>
 8004700:	4770      	bx	lr
 8004702:	f803 1b01 	strb.w	r1, [r3], #1
 8004706:	e7f9      	b.n	80046fc <memset+0x4>

08004708 <__errno>:
 8004708:	4b01      	ldr	r3, [pc, #4]	@ (8004710 <__errno+0x8>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000030 	.word	0x20000030

08004714 <__libc_init_array>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	2600      	movs	r6, #0
 8004718:	4d0c      	ldr	r5, [pc, #48]	@ (800474c <__libc_init_array+0x38>)
 800471a:	4c0d      	ldr	r4, [pc, #52]	@ (8004750 <__libc_init_array+0x3c>)
 800471c:	1b64      	subs	r4, r4, r5
 800471e:	10a4      	asrs	r4, r4, #2
 8004720:	42a6      	cmp	r6, r4
 8004722:	d109      	bne.n	8004738 <__libc_init_array+0x24>
 8004724:	f000 fc78 	bl	8005018 <_init>
 8004728:	2600      	movs	r6, #0
 800472a:	4d0a      	ldr	r5, [pc, #40]	@ (8004754 <__libc_init_array+0x40>)
 800472c:	4c0a      	ldr	r4, [pc, #40]	@ (8004758 <__libc_init_array+0x44>)
 800472e:	1b64      	subs	r4, r4, r5
 8004730:	10a4      	asrs	r4, r4, #2
 8004732:	42a6      	cmp	r6, r4
 8004734:	d105      	bne.n	8004742 <__libc_init_array+0x2e>
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	f855 3b04 	ldr.w	r3, [r5], #4
 800473c:	4798      	blx	r3
 800473e:	3601      	adds	r6, #1
 8004740:	e7ee      	b.n	8004720 <__libc_init_array+0xc>
 8004742:	f855 3b04 	ldr.w	r3, [r5], #4
 8004746:	4798      	blx	r3
 8004748:	3601      	adds	r6, #1
 800474a:	e7f2      	b.n	8004732 <__libc_init_array+0x1e>
 800474c:	0800511c 	.word	0x0800511c
 8004750:	0800511c 	.word	0x0800511c
 8004754:	0800511c 	.word	0x0800511c
 8004758:	08005120 	.word	0x08005120

0800475c <__retarget_lock_acquire_recursive>:
 800475c:	4770      	bx	lr

0800475e <__retarget_lock_release_recursive>:
 800475e:	4770      	bx	lr

08004760 <memcpy>:
 8004760:	440a      	add	r2, r1
 8004762:	4291      	cmp	r1, r2
 8004764:	f100 33ff 	add.w	r3, r0, #4294967295
 8004768:	d100      	bne.n	800476c <memcpy+0xc>
 800476a:	4770      	bx	lr
 800476c:	b510      	push	{r4, lr}
 800476e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004772:	4291      	cmp	r1, r2
 8004774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004778:	d1f9      	bne.n	800476e <memcpy+0xe>
 800477a:	bd10      	pop	{r4, pc}

0800477c <_free_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4605      	mov	r5, r0
 8004780:	2900      	cmp	r1, #0
 8004782:	d040      	beq.n	8004806 <_free_r+0x8a>
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f0c      	subs	r4, r1, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfb8      	it	lt
 800478e:	18e4      	addlt	r4, r4, r3
 8004790:	f000 f8de 	bl	8004950 <__malloc_lock>
 8004794:	4a1c      	ldr	r2, [pc, #112]	@ (8004808 <_free_r+0x8c>)
 8004796:	6813      	ldr	r3, [r2, #0]
 8004798:	b933      	cbnz	r3, 80047a8 <_free_r+0x2c>
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	6014      	str	r4, [r2, #0]
 800479e:	4628      	mov	r0, r5
 80047a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a4:	f000 b8da 	b.w	800495c <__malloc_unlock>
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	d908      	bls.n	80047be <_free_r+0x42>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	1821      	adds	r1, r4, r0
 80047b0:	428b      	cmp	r3, r1
 80047b2:	bf01      	itttt	eq
 80047b4:	6819      	ldreq	r1, [r3, #0]
 80047b6:	685b      	ldreq	r3, [r3, #4]
 80047b8:	1809      	addeq	r1, r1, r0
 80047ba:	6021      	streq	r1, [r4, #0]
 80047bc:	e7ed      	b.n	800479a <_free_r+0x1e>
 80047be:	461a      	mov	r2, r3
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b10b      	cbz	r3, 80047c8 <_free_r+0x4c>
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	d9fa      	bls.n	80047be <_free_r+0x42>
 80047c8:	6811      	ldr	r1, [r2, #0]
 80047ca:	1850      	adds	r0, r2, r1
 80047cc:	42a0      	cmp	r0, r4
 80047ce:	d10b      	bne.n	80047e8 <_free_r+0x6c>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	4401      	add	r1, r0
 80047d4:	1850      	adds	r0, r2, r1
 80047d6:	4283      	cmp	r3, r0
 80047d8:	6011      	str	r1, [r2, #0]
 80047da:	d1e0      	bne.n	800479e <_free_r+0x22>
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4408      	add	r0, r1
 80047e2:	6010      	str	r0, [r2, #0]
 80047e4:	6053      	str	r3, [r2, #4]
 80047e6:	e7da      	b.n	800479e <_free_r+0x22>
 80047e8:	d902      	bls.n	80047f0 <_free_r+0x74>
 80047ea:	230c      	movs	r3, #12
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	e7d6      	b.n	800479e <_free_r+0x22>
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	1821      	adds	r1, r4, r0
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf01      	itttt	eq
 80047f8:	6819      	ldreq	r1, [r3, #0]
 80047fa:	685b      	ldreq	r3, [r3, #4]
 80047fc:	1809      	addeq	r1, r1, r0
 80047fe:	6021      	streq	r1, [r4, #0]
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6054      	str	r4, [r2, #4]
 8004804:	e7cb      	b.n	800479e <_free_r+0x22>
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	20000374 	.word	0x20000374

0800480c <sbrk_aligned>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4e0f      	ldr	r6, [pc, #60]	@ (800484c <sbrk_aligned+0x40>)
 8004810:	460c      	mov	r4, r1
 8004812:	6831      	ldr	r1, [r6, #0]
 8004814:	4605      	mov	r5, r0
 8004816:	b911      	cbnz	r1, 800481e <sbrk_aligned+0x12>
 8004818:	f000 fbaa 	bl	8004f70 <_sbrk_r>
 800481c:	6030      	str	r0, [r6, #0]
 800481e:	4621      	mov	r1, r4
 8004820:	4628      	mov	r0, r5
 8004822:	f000 fba5 	bl	8004f70 <_sbrk_r>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	d103      	bne.n	8004832 <sbrk_aligned+0x26>
 800482a:	f04f 34ff 	mov.w	r4, #4294967295
 800482e:	4620      	mov	r0, r4
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	1cc4      	adds	r4, r0, #3
 8004834:	f024 0403 	bic.w	r4, r4, #3
 8004838:	42a0      	cmp	r0, r4
 800483a:	d0f8      	beq.n	800482e <sbrk_aligned+0x22>
 800483c:	1a21      	subs	r1, r4, r0
 800483e:	4628      	mov	r0, r5
 8004840:	f000 fb96 	bl	8004f70 <_sbrk_r>
 8004844:	3001      	adds	r0, #1
 8004846:	d1f2      	bne.n	800482e <sbrk_aligned+0x22>
 8004848:	e7ef      	b.n	800482a <sbrk_aligned+0x1e>
 800484a:	bf00      	nop
 800484c:	20000370 	.word	0x20000370

08004850 <_malloc_r>:
 8004850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004854:	1ccd      	adds	r5, r1, #3
 8004856:	f025 0503 	bic.w	r5, r5, #3
 800485a:	3508      	adds	r5, #8
 800485c:	2d0c      	cmp	r5, #12
 800485e:	bf38      	it	cc
 8004860:	250c      	movcc	r5, #12
 8004862:	2d00      	cmp	r5, #0
 8004864:	4606      	mov	r6, r0
 8004866:	db01      	blt.n	800486c <_malloc_r+0x1c>
 8004868:	42a9      	cmp	r1, r5
 800486a:	d904      	bls.n	8004876 <_malloc_r+0x26>
 800486c:	230c      	movs	r3, #12
 800486e:	6033      	str	r3, [r6, #0]
 8004870:	2000      	movs	r0, #0
 8004872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800494c <_malloc_r+0xfc>
 800487a:	f000 f869 	bl	8004950 <__malloc_lock>
 800487e:	f8d8 3000 	ldr.w	r3, [r8]
 8004882:	461c      	mov	r4, r3
 8004884:	bb44      	cbnz	r4, 80048d8 <_malloc_r+0x88>
 8004886:	4629      	mov	r1, r5
 8004888:	4630      	mov	r0, r6
 800488a:	f7ff ffbf 	bl	800480c <sbrk_aligned>
 800488e:	1c43      	adds	r3, r0, #1
 8004890:	4604      	mov	r4, r0
 8004892:	d158      	bne.n	8004946 <_malloc_r+0xf6>
 8004894:	f8d8 4000 	ldr.w	r4, [r8]
 8004898:	4627      	mov	r7, r4
 800489a:	2f00      	cmp	r7, #0
 800489c:	d143      	bne.n	8004926 <_malloc_r+0xd6>
 800489e:	2c00      	cmp	r4, #0
 80048a0:	d04b      	beq.n	800493a <_malloc_r+0xea>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	4639      	mov	r1, r7
 80048a6:	4630      	mov	r0, r6
 80048a8:	eb04 0903 	add.w	r9, r4, r3
 80048ac:	f000 fb60 	bl	8004f70 <_sbrk_r>
 80048b0:	4581      	cmp	r9, r0
 80048b2:	d142      	bne.n	800493a <_malloc_r+0xea>
 80048b4:	6821      	ldr	r1, [r4, #0]
 80048b6:	4630      	mov	r0, r6
 80048b8:	1a6d      	subs	r5, r5, r1
 80048ba:	4629      	mov	r1, r5
 80048bc:	f7ff ffa6 	bl	800480c <sbrk_aligned>
 80048c0:	3001      	adds	r0, #1
 80048c2:	d03a      	beq.n	800493a <_malloc_r+0xea>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	442b      	add	r3, r5
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	f8d8 3000 	ldr.w	r3, [r8]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	bb62      	cbnz	r2, 800492c <_malloc_r+0xdc>
 80048d2:	f8c8 7000 	str.w	r7, [r8]
 80048d6:	e00f      	b.n	80048f8 <_malloc_r+0xa8>
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	1b52      	subs	r2, r2, r5
 80048dc:	d420      	bmi.n	8004920 <_malloc_r+0xd0>
 80048de:	2a0b      	cmp	r2, #11
 80048e0:	d917      	bls.n	8004912 <_malloc_r+0xc2>
 80048e2:	1961      	adds	r1, r4, r5
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	6025      	str	r5, [r4, #0]
 80048e8:	bf18      	it	ne
 80048ea:	6059      	strne	r1, [r3, #4]
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	bf08      	it	eq
 80048f0:	f8c8 1000 	streq.w	r1, [r8]
 80048f4:	5162      	str	r2, [r4, r5]
 80048f6:	604b      	str	r3, [r1, #4]
 80048f8:	4630      	mov	r0, r6
 80048fa:	f000 f82f 	bl	800495c <__malloc_unlock>
 80048fe:	f104 000b 	add.w	r0, r4, #11
 8004902:	1d23      	adds	r3, r4, #4
 8004904:	f020 0007 	bic.w	r0, r0, #7
 8004908:	1ac2      	subs	r2, r0, r3
 800490a:	bf1c      	itt	ne
 800490c:	1a1b      	subne	r3, r3, r0
 800490e:	50a3      	strne	r3, [r4, r2]
 8004910:	e7af      	b.n	8004872 <_malloc_r+0x22>
 8004912:	6862      	ldr	r2, [r4, #4]
 8004914:	42a3      	cmp	r3, r4
 8004916:	bf0c      	ite	eq
 8004918:	f8c8 2000 	streq.w	r2, [r8]
 800491c:	605a      	strne	r2, [r3, #4]
 800491e:	e7eb      	b.n	80048f8 <_malloc_r+0xa8>
 8004920:	4623      	mov	r3, r4
 8004922:	6864      	ldr	r4, [r4, #4]
 8004924:	e7ae      	b.n	8004884 <_malloc_r+0x34>
 8004926:	463c      	mov	r4, r7
 8004928:	687f      	ldr	r7, [r7, #4]
 800492a:	e7b6      	b.n	800489a <_malloc_r+0x4a>
 800492c:	461a      	mov	r2, r3
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	42a3      	cmp	r3, r4
 8004932:	d1fb      	bne.n	800492c <_malloc_r+0xdc>
 8004934:	2300      	movs	r3, #0
 8004936:	6053      	str	r3, [r2, #4]
 8004938:	e7de      	b.n	80048f8 <_malloc_r+0xa8>
 800493a:	230c      	movs	r3, #12
 800493c:	4630      	mov	r0, r6
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	f000 f80c 	bl	800495c <__malloc_unlock>
 8004944:	e794      	b.n	8004870 <_malloc_r+0x20>
 8004946:	6005      	str	r5, [r0, #0]
 8004948:	e7d6      	b.n	80048f8 <_malloc_r+0xa8>
 800494a:	bf00      	nop
 800494c:	20000374 	.word	0x20000374

08004950 <__malloc_lock>:
 8004950:	4801      	ldr	r0, [pc, #4]	@ (8004958 <__malloc_lock+0x8>)
 8004952:	f7ff bf03 	b.w	800475c <__retarget_lock_acquire_recursive>
 8004956:	bf00      	nop
 8004958:	2000036c 	.word	0x2000036c

0800495c <__malloc_unlock>:
 800495c:	4801      	ldr	r0, [pc, #4]	@ (8004964 <__malloc_unlock+0x8>)
 800495e:	f7ff befe 	b.w	800475e <__retarget_lock_release_recursive>
 8004962:	bf00      	nop
 8004964:	2000036c 	.word	0x2000036c

08004968 <__ssputs_r>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	461f      	mov	r7, r3
 800496e:	688e      	ldr	r6, [r1, #8]
 8004970:	4682      	mov	sl, r0
 8004972:	42be      	cmp	r6, r7
 8004974:	460c      	mov	r4, r1
 8004976:	4690      	mov	r8, r2
 8004978:	680b      	ldr	r3, [r1, #0]
 800497a:	d82d      	bhi.n	80049d8 <__ssputs_r+0x70>
 800497c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004980:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004984:	d026      	beq.n	80049d4 <__ssputs_r+0x6c>
 8004986:	6965      	ldr	r5, [r4, #20]
 8004988:	6909      	ldr	r1, [r1, #16]
 800498a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800498e:	eba3 0901 	sub.w	r9, r3, r1
 8004992:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004996:	1c7b      	adds	r3, r7, #1
 8004998:	444b      	add	r3, r9
 800499a:	106d      	asrs	r5, r5, #1
 800499c:	429d      	cmp	r5, r3
 800499e:	bf38      	it	cc
 80049a0:	461d      	movcc	r5, r3
 80049a2:	0553      	lsls	r3, r2, #21
 80049a4:	d527      	bpl.n	80049f6 <__ssputs_r+0x8e>
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7ff ff52 	bl	8004850 <_malloc_r>
 80049ac:	4606      	mov	r6, r0
 80049ae:	b360      	cbz	r0, 8004a0a <__ssputs_r+0xa2>
 80049b0:	464a      	mov	r2, r9
 80049b2:	6921      	ldr	r1, [r4, #16]
 80049b4:	f7ff fed4 	bl	8004760 <memcpy>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	6126      	str	r6, [r4, #16]
 80049c6:	444e      	add	r6, r9
 80049c8:	6026      	str	r6, [r4, #0]
 80049ca:	463e      	mov	r6, r7
 80049cc:	6165      	str	r5, [r4, #20]
 80049ce:	eba5 0509 	sub.w	r5, r5, r9
 80049d2:	60a5      	str	r5, [r4, #8]
 80049d4:	42be      	cmp	r6, r7
 80049d6:	d900      	bls.n	80049da <__ssputs_r+0x72>
 80049d8:	463e      	mov	r6, r7
 80049da:	4632      	mov	r2, r6
 80049dc:	4641      	mov	r1, r8
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	f000 faac 	bl	8004f3c <memmove>
 80049e4:	2000      	movs	r0, #0
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	1b9b      	subs	r3, r3, r6
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	4433      	add	r3, r6
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f6:	462a      	mov	r2, r5
 80049f8:	f000 fad8 	bl	8004fac <_realloc_r>
 80049fc:	4606      	mov	r6, r0
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d1e0      	bne.n	80049c4 <__ssputs_r+0x5c>
 8004a02:	4650      	mov	r0, sl
 8004a04:	6921      	ldr	r1, [r4, #16]
 8004a06:	f7ff feb9 	bl	800477c <_free_r>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	f8ca 3000 	str.w	r3, [sl]
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f04f 30ff 	mov.w	r0, #4294967295
 8004a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	e7e9      	b.n	80049f2 <__ssputs_r+0x8a>
	...

08004a20 <_svfiprintf_r>:
 8004a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a24:	4698      	mov	r8, r3
 8004a26:	898b      	ldrh	r3, [r1, #12]
 8004a28:	4607      	mov	r7, r0
 8004a2a:	061b      	lsls	r3, r3, #24
 8004a2c:	460d      	mov	r5, r1
 8004a2e:	4614      	mov	r4, r2
 8004a30:	b09d      	sub	sp, #116	@ 0x74
 8004a32:	d510      	bpl.n	8004a56 <_svfiprintf_r+0x36>
 8004a34:	690b      	ldr	r3, [r1, #16]
 8004a36:	b973      	cbnz	r3, 8004a56 <_svfiprintf_r+0x36>
 8004a38:	2140      	movs	r1, #64	@ 0x40
 8004a3a:	f7ff ff09 	bl	8004850 <_malloc_r>
 8004a3e:	6028      	str	r0, [r5, #0]
 8004a40:	6128      	str	r0, [r5, #16]
 8004a42:	b930      	cbnz	r0, 8004a52 <_svfiprintf_r+0x32>
 8004a44:	230c      	movs	r3, #12
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	b01d      	add	sp, #116	@ 0x74
 8004a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a52:	2340      	movs	r3, #64	@ 0x40
 8004a54:	616b      	str	r3, [r5, #20]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a60:	2330      	movs	r3, #48	@ 0x30
 8004a62:	f04f 0901 	mov.w	r9, #1
 8004a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004c04 <_svfiprintf_r+0x1e4>
 8004a6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a72:	4623      	mov	r3, r4
 8004a74:	469a      	mov	sl, r3
 8004a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a7a:	b10a      	cbz	r2, 8004a80 <_svfiprintf_r+0x60>
 8004a7c:	2a25      	cmp	r2, #37	@ 0x25
 8004a7e:	d1f9      	bne.n	8004a74 <_svfiprintf_r+0x54>
 8004a80:	ebba 0b04 	subs.w	fp, sl, r4
 8004a84:	d00b      	beq.n	8004a9e <_svfiprintf_r+0x7e>
 8004a86:	465b      	mov	r3, fp
 8004a88:	4622      	mov	r2, r4
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	f7ff ff6b 	bl	8004968 <__ssputs_r>
 8004a92:	3001      	adds	r0, #1
 8004a94:	f000 80a7 	beq.w	8004be6 <_svfiprintf_r+0x1c6>
 8004a98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a9a:	445a      	add	r2, fp
 8004a9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 809f 	beq.w	8004be6 <_svfiprintf_r+0x1c6>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004aae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ab2:	f10a 0a01 	add.w	sl, sl, #1
 8004ab6:	9304      	str	r3, [sp, #16]
 8004ab8:	9307      	str	r3, [sp, #28]
 8004aba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004abe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ac0:	4654      	mov	r4, sl
 8004ac2:	2205      	movs	r2, #5
 8004ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac8:	484e      	ldr	r0, [pc, #312]	@ (8004c04 <_svfiprintf_r+0x1e4>)
 8004aca:	f000 fa61 	bl	8004f90 <memchr>
 8004ace:	9a04      	ldr	r2, [sp, #16]
 8004ad0:	b9d8      	cbnz	r0, 8004b0a <_svfiprintf_r+0xea>
 8004ad2:	06d0      	lsls	r0, r2, #27
 8004ad4:	bf44      	itt	mi
 8004ad6:	2320      	movmi	r3, #32
 8004ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004adc:	0711      	lsls	r1, r2, #28
 8004ade:	bf44      	itt	mi
 8004ae0:	232b      	movmi	r3, #43	@ 0x2b
 8004ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aec:	d015      	beq.n	8004b1a <_svfiprintf_r+0xfa>
 8004aee:	4654      	mov	r4, sl
 8004af0:	2000      	movs	r0, #0
 8004af2:	f04f 0c0a 	mov.w	ip, #10
 8004af6:	9a07      	ldr	r2, [sp, #28]
 8004af8:	4621      	mov	r1, r4
 8004afa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004afe:	3b30      	subs	r3, #48	@ 0x30
 8004b00:	2b09      	cmp	r3, #9
 8004b02:	d94b      	bls.n	8004b9c <_svfiprintf_r+0x17c>
 8004b04:	b1b0      	cbz	r0, 8004b34 <_svfiprintf_r+0x114>
 8004b06:	9207      	str	r2, [sp, #28]
 8004b08:	e014      	b.n	8004b34 <_svfiprintf_r+0x114>
 8004b0a:	eba0 0308 	sub.w	r3, r0, r8
 8004b0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b12:	4313      	orrs	r3, r2
 8004b14:	46a2      	mov	sl, r4
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	e7d2      	b.n	8004ac0 <_svfiprintf_r+0xa0>
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	1d19      	adds	r1, r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	9103      	str	r1, [sp, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfbb      	ittet	lt
 8004b26:	425b      	neglt	r3, r3
 8004b28:	f042 0202 	orrlt.w	r2, r2, #2
 8004b2c:	9307      	strge	r3, [sp, #28]
 8004b2e:	9307      	strlt	r3, [sp, #28]
 8004b30:	bfb8      	it	lt
 8004b32:	9204      	strlt	r2, [sp, #16]
 8004b34:	7823      	ldrb	r3, [r4, #0]
 8004b36:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b38:	d10a      	bne.n	8004b50 <_svfiprintf_r+0x130>
 8004b3a:	7863      	ldrb	r3, [r4, #1]
 8004b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b3e:	d132      	bne.n	8004ba6 <_svfiprintf_r+0x186>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	3402      	adds	r4, #2
 8004b44:	1d1a      	adds	r2, r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	9203      	str	r2, [sp, #12]
 8004b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b4e:	9305      	str	r3, [sp, #20]
 8004b50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004c08 <_svfiprintf_r+0x1e8>
 8004b54:	2203      	movs	r2, #3
 8004b56:	4650      	mov	r0, sl
 8004b58:	7821      	ldrb	r1, [r4, #0]
 8004b5a:	f000 fa19 	bl	8004f90 <memchr>
 8004b5e:	b138      	cbz	r0, 8004b70 <_svfiprintf_r+0x150>
 8004b60:	2240      	movs	r2, #64	@ 0x40
 8004b62:	9b04      	ldr	r3, [sp, #16]
 8004b64:	eba0 000a 	sub.w	r0, r0, sl
 8004b68:	4082      	lsls	r2, r0
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	3401      	adds	r4, #1
 8004b6e:	9304      	str	r3, [sp, #16]
 8004b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b74:	2206      	movs	r2, #6
 8004b76:	4825      	ldr	r0, [pc, #148]	@ (8004c0c <_svfiprintf_r+0x1ec>)
 8004b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b7c:	f000 fa08 	bl	8004f90 <memchr>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d036      	beq.n	8004bf2 <_svfiprintf_r+0x1d2>
 8004b84:	4b22      	ldr	r3, [pc, #136]	@ (8004c10 <_svfiprintf_r+0x1f0>)
 8004b86:	bb1b      	cbnz	r3, 8004bd0 <_svfiprintf_r+0x1b0>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	3307      	adds	r3, #7
 8004b8c:	f023 0307 	bic.w	r3, r3, #7
 8004b90:	3308      	adds	r3, #8
 8004b92:	9303      	str	r3, [sp, #12]
 8004b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b96:	4433      	add	r3, r6
 8004b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b9a:	e76a      	b.n	8004a72 <_svfiprintf_r+0x52>
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ba4:	e7a8      	b.n	8004af8 <_svfiprintf_r+0xd8>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f04f 0c0a 	mov.w	ip, #10
 8004bac:	4619      	mov	r1, r3
 8004bae:	3401      	adds	r4, #1
 8004bb0:	9305      	str	r3, [sp, #20]
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bb8:	3a30      	subs	r2, #48	@ 0x30
 8004bba:	2a09      	cmp	r2, #9
 8004bbc:	d903      	bls.n	8004bc6 <_svfiprintf_r+0x1a6>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0c6      	beq.n	8004b50 <_svfiprintf_r+0x130>
 8004bc2:	9105      	str	r1, [sp, #20]
 8004bc4:	e7c4      	b.n	8004b50 <_svfiprintf_r+0x130>
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	2301      	movs	r3, #1
 8004bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bce:	e7f0      	b.n	8004bb2 <_svfiprintf_r+0x192>
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <_svfiprintf_r+0x1f4>)
 8004bda:	a904      	add	r1, sp, #16
 8004bdc:	f3af 8000 	nop.w
 8004be0:	1c42      	adds	r2, r0, #1
 8004be2:	4606      	mov	r6, r0
 8004be4:	d1d6      	bne.n	8004b94 <_svfiprintf_r+0x174>
 8004be6:	89ab      	ldrh	r3, [r5, #12]
 8004be8:	065b      	lsls	r3, r3, #25
 8004bea:	f53f af2d 	bmi.w	8004a48 <_svfiprintf_r+0x28>
 8004bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bf0:	e72c      	b.n	8004a4c <_svfiprintf_r+0x2c>
 8004bf2:	ab03      	add	r3, sp, #12
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	462a      	mov	r2, r5
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <_svfiprintf_r+0x1f4>)
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	f000 f87d 	bl	8004cfc <_printf_i>
 8004c02:	e7ed      	b.n	8004be0 <_svfiprintf_r+0x1c0>
 8004c04:	080050de 	.word	0x080050de
 8004c08:	080050e4 	.word	0x080050e4
 8004c0c:	080050e8 	.word	0x080050e8
 8004c10:	00000000 	.word	0x00000000
 8004c14:	08004969 	.word	0x08004969

08004c18 <_printf_common>:
 8004c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	4616      	mov	r6, r2
 8004c1e:	4698      	mov	r8, r3
 8004c20:	688a      	ldr	r2, [r1, #8]
 8004c22:	690b      	ldr	r3, [r1, #16]
 8004c24:	4607      	mov	r7, r0
 8004c26:	4293      	cmp	r3, r2
 8004c28:	bfb8      	it	lt
 8004c2a:	4613      	movlt	r3, r2
 8004c2c:	6033      	str	r3, [r6, #0]
 8004c2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c32:	460c      	mov	r4, r1
 8004c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c38:	b10a      	cbz	r2, 8004c3e <_printf_common+0x26>
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	0699      	lsls	r1, r3, #26
 8004c42:	bf42      	ittt	mi
 8004c44:	6833      	ldrmi	r3, [r6, #0]
 8004c46:	3302      	addmi	r3, #2
 8004c48:	6033      	strmi	r3, [r6, #0]
 8004c4a:	6825      	ldr	r5, [r4, #0]
 8004c4c:	f015 0506 	ands.w	r5, r5, #6
 8004c50:	d106      	bne.n	8004c60 <_printf_common+0x48>
 8004c52:	f104 0a19 	add.w	sl, r4, #25
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	6832      	ldr	r2, [r6, #0]
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	dc2b      	bgt.n	8004cb8 <_printf_common+0xa0>
 8004c60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	3b00      	subs	r3, #0
 8004c68:	bf18      	it	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	0692      	lsls	r2, r2, #26
 8004c6e:	d430      	bmi.n	8004cd2 <_printf_common+0xba>
 8004c70:	4641      	mov	r1, r8
 8004c72:	4638      	mov	r0, r7
 8004c74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c78:	47c8      	blx	r9
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d023      	beq.n	8004cc6 <_printf_common+0xae>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	6922      	ldr	r2, [r4, #16]
 8004c82:	f003 0306 	and.w	r3, r3, #6
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	bf14      	ite	ne
 8004c8a:	2500      	movne	r5, #0
 8004c8c:	6833      	ldreq	r3, [r6, #0]
 8004c8e:	f04f 0600 	mov.w	r6, #0
 8004c92:	bf08      	it	eq
 8004c94:	68e5      	ldreq	r5, [r4, #12]
 8004c96:	f104 041a 	add.w	r4, r4, #26
 8004c9a:	bf08      	it	eq
 8004c9c:	1aed      	subeq	r5, r5, r3
 8004c9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ca2:	bf08      	it	eq
 8004ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bfc4      	itt	gt
 8004cac:	1a9b      	subgt	r3, r3, r2
 8004cae:	18ed      	addgt	r5, r5, r3
 8004cb0:	42b5      	cmp	r5, r6
 8004cb2:	d11a      	bne.n	8004cea <_printf_common+0xd2>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e008      	b.n	8004cca <_printf_common+0xb2>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4652      	mov	r2, sl
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	47c8      	blx	r9
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d103      	bne.n	8004cce <_printf_common+0xb6>
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cce:	3501      	adds	r5, #1
 8004cd0:	e7c1      	b.n	8004c56 <_printf_common+0x3e>
 8004cd2:	2030      	movs	r0, #48	@ 0x30
 8004cd4:	18e1      	adds	r1, r4, r3
 8004cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ce0:	4422      	add	r2, r4
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ce8:	e7c2      	b.n	8004c70 <_printf_common+0x58>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4622      	mov	r2, r4
 8004cee:	4641      	mov	r1, r8
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	47c8      	blx	r9
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d0e6      	beq.n	8004cc6 <_printf_common+0xae>
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	e7d9      	b.n	8004cb0 <_printf_common+0x98>

08004cfc <_printf_i>:
 8004cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	7e0f      	ldrb	r7, [r1, #24]
 8004d02:	4691      	mov	r9, r2
 8004d04:	2f78      	cmp	r7, #120	@ 0x78
 8004d06:	4680      	mov	r8, r0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	469a      	mov	sl, r3
 8004d0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d12:	d807      	bhi.n	8004d24 <_printf_i+0x28>
 8004d14:	2f62      	cmp	r7, #98	@ 0x62
 8004d16:	d80a      	bhi.n	8004d2e <_printf_i+0x32>
 8004d18:	2f00      	cmp	r7, #0
 8004d1a:	f000 80d3 	beq.w	8004ec4 <_printf_i+0x1c8>
 8004d1e:	2f58      	cmp	r7, #88	@ 0x58
 8004d20:	f000 80ba 	beq.w	8004e98 <_printf_i+0x19c>
 8004d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d2c:	e03a      	b.n	8004da4 <_printf_i+0xa8>
 8004d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d32:	2b15      	cmp	r3, #21
 8004d34:	d8f6      	bhi.n	8004d24 <_printf_i+0x28>
 8004d36:	a101      	add	r1, pc, #4	@ (adr r1, 8004d3c <_printf_i+0x40>)
 8004d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004d25 	.word	0x08004d25
 8004d48:	08004d25 	.word	0x08004d25
 8004d4c:	08004d25 	.word	0x08004d25
 8004d50:	08004d25 	.word	0x08004d25
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004d25 	.word	0x08004d25
 8004d5c:	08004d25 	.word	0x08004d25
 8004d60:	08004d25 	.word	0x08004d25
 8004d64:	08004d25 	.word	0x08004d25
 8004d68:	08004eab 	.word	0x08004eab
 8004d6c:	08004dd3 	.word	0x08004dd3
 8004d70:	08004e65 	.word	0x08004e65
 8004d74:	08004d25 	.word	0x08004d25
 8004d78:	08004d25 	.word	0x08004d25
 8004d7c:	08004ecd 	.word	0x08004ecd
 8004d80:	08004d25 	.word	0x08004d25
 8004d84:	08004dd3 	.word	0x08004dd3
 8004d88:	08004d25 	.word	0x08004d25
 8004d8c:	08004d25 	.word	0x08004d25
 8004d90:	08004e6d 	.word	0x08004e6d
 8004d94:	6833      	ldr	r3, [r6, #0]
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6032      	str	r2, [r6, #0]
 8004d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004da4:	2301      	movs	r3, #1
 8004da6:	e09e      	b.n	8004ee6 <_printf_i+0x1ea>
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	6031      	str	r1, [r6, #0]
 8004db0:	0606      	lsls	r6, r0, #24
 8004db2:	d501      	bpl.n	8004db8 <_printf_i+0xbc>
 8004db4:	681d      	ldr	r5, [r3, #0]
 8004db6:	e003      	b.n	8004dc0 <_printf_i+0xc4>
 8004db8:	0645      	lsls	r5, r0, #25
 8004dba:	d5fb      	bpl.n	8004db4 <_printf_i+0xb8>
 8004dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	da03      	bge.n	8004dcc <_printf_i+0xd0>
 8004dc4:	232d      	movs	r3, #45	@ 0x2d
 8004dc6:	426d      	negs	r5, r5
 8004dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dcc:	230a      	movs	r3, #10
 8004dce:	4859      	ldr	r0, [pc, #356]	@ (8004f34 <_printf_i+0x238>)
 8004dd0:	e011      	b.n	8004df6 <_printf_i+0xfa>
 8004dd2:	6821      	ldr	r1, [r4, #0]
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	0608      	lsls	r0, r1, #24
 8004dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ddc:	d402      	bmi.n	8004de4 <_printf_i+0xe8>
 8004dde:	0649      	lsls	r1, r1, #25
 8004de0:	bf48      	it	mi
 8004de2:	b2ad      	uxthmi	r5, r5
 8004de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004de6:	6033      	str	r3, [r6, #0]
 8004de8:	bf14      	ite	ne
 8004dea:	230a      	movne	r3, #10
 8004dec:	2308      	moveq	r3, #8
 8004dee:	4851      	ldr	r0, [pc, #324]	@ (8004f34 <_printf_i+0x238>)
 8004df0:	2100      	movs	r1, #0
 8004df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004df6:	6866      	ldr	r6, [r4, #4]
 8004df8:	2e00      	cmp	r6, #0
 8004dfa:	bfa8      	it	ge
 8004dfc:	6821      	ldrge	r1, [r4, #0]
 8004dfe:	60a6      	str	r6, [r4, #8]
 8004e00:	bfa4      	itt	ge
 8004e02:	f021 0104 	bicge.w	r1, r1, #4
 8004e06:	6021      	strge	r1, [r4, #0]
 8004e08:	b90d      	cbnz	r5, 8004e0e <_printf_i+0x112>
 8004e0a:	2e00      	cmp	r6, #0
 8004e0c:	d04b      	beq.n	8004ea6 <_printf_i+0x1aa>
 8004e0e:	4616      	mov	r6, r2
 8004e10:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e14:	fb03 5711 	mls	r7, r3, r1, r5
 8004e18:	5dc7      	ldrb	r7, [r0, r7]
 8004e1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e1e:	462f      	mov	r7, r5
 8004e20:	42bb      	cmp	r3, r7
 8004e22:	460d      	mov	r5, r1
 8004e24:	d9f4      	bls.n	8004e10 <_printf_i+0x114>
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d10b      	bne.n	8004e42 <_printf_i+0x146>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	07df      	lsls	r7, r3, #31
 8004e2e:	d508      	bpl.n	8004e42 <_printf_i+0x146>
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	6861      	ldr	r1, [r4, #4]
 8004e34:	4299      	cmp	r1, r3
 8004e36:	bfde      	ittt	le
 8004e38:	2330      	movle	r3, #48	@ 0x30
 8004e3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e42:	1b92      	subs	r2, r2, r6
 8004e44:	6122      	str	r2, [r4, #16]
 8004e46:	464b      	mov	r3, r9
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f8cd a000 	str.w	sl, [sp]
 8004e50:	aa03      	add	r2, sp, #12
 8004e52:	f7ff fee1 	bl	8004c18 <_printf_common>
 8004e56:	3001      	adds	r0, #1
 8004e58:	d14a      	bne.n	8004ef0 <_printf_i+0x1f4>
 8004e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5e:	b004      	add	sp, #16
 8004e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f043 0320 	orr.w	r3, r3, #32
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	2778      	movs	r7, #120	@ 0x78
 8004e6e:	4832      	ldr	r0, [pc, #200]	@ (8004f38 <_printf_i+0x23c>)
 8004e70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	6831      	ldr	r1, [r6, #0]
 8004e78:	061f      	lsls	r7, r3, #24
 8004e7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e7e:	d402      	bmi.n	8004e86 <_printf_i+0x18a>
 8004e80:	065f      	lsls	r7, r3, #25
 8004e82:	bf48      	it	mi
 8004e84:	b2ad      	uxthmi	r5, r5
 8004e86:	6031      	str	r1, [r6, #0]
 8004e88:	07d9      	lsls	r1, r3, #31
 8004e8a:	bf44      	itt	mi
 8004e8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004e90:	6023      	strmi	r3, [r4, #0]
 8004e92:	b11d      	cbz	r5, 8004e9c <_printf_i+0x1a0>
 8004e94:	2310      	movs	r3, #16
 8004e96:	e7ab      	b.n	8004df0 <_printf_i+0xf4>
 8004e98:	4826      	ldr	r0, [pc, #152]	@ (8004f34 <_printf_i+0x238>)
 8004e9a:	e7e9      	b.n	8004e70 <_printf_i+0x174>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	f023 0320 	bic.w	r3, r3, #32
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	e7f6      	b.n	8004e94 <_printf_i+0x198>
 8004ea6:	4616      	mov	r6, r2
 8004ea8:	e7bd      	b.n	8004e26 <_printf_i+0x12a>
 8004eaa:	6833      	ldr	r3, [r6, #0]
 8004eac:	6825      	ldr	r5, [r4, #0]
 8004eae:	1d18      	adds	r0, r3, #4
 8004eb0:	6961      	ldr	r1, [r4, #20]
 8004eb2:	6030      	str	r0, [r6, #0]
 8004eb4:	062e      	lsls	r6, r5, #24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	d501      	bpl.n	8004ebe <_printf_i+0x1c2>
 8004eba:	6019      	str	r1, [r3, #0]
 8004ebc:	e002      	b.n	8004ec4 <_printf_i+0x1c8>
 8004ebe:	0668      	lsls	r0, r5, #25
 8004ec0:	d5fb      	bpl.n	8004eba <_printf_i+0x1be>
 8004ec2:	8019      	strh	r1, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4616      	mov	r6, r2
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	e7bc      	b.n	8004e46 <_printf_i+0x14a>
 8004ecc:	6833      	ldr	r3, [r6, #0]
 8004ece:	2100      	movs	r1, #0
 8004ed0:	1d1a      	adds	r2, r3, #4
 8004ed2:	6032      	str	r2, [r6, #0]
 8004ed4:	681e      	ldr	r6, [r3, #0]
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f000 f859 	bl	8004f90 <memchr>
 8004ede:	b108      	cbz	r0, 8004ee4 <_printf_i+0x1e8>
 8004ee0:	1b80      	subs	r0, r0, r6
 8004ee2:	6060      	str	r0, [r4, #4]
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	6123      	str	r3, [r4, #16]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eee:	e7aa      	b.n	8004e46 <_printf_i+0x14a>
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	47d0      	blx	sl
 8004efa:	3001      	adds	r0, #1
 8004efc:	d0ad      	beq.n	8004e5a <_printf_i+0x15e>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	079b      	lsls	r3, r3, #30
 8004f02:	d413      	bmi.n	8004f2c <_printf_i+0x230>
 8004f04:	68e0      	ldr	r0, [r4, #12]
 8004f06:	9b03      	ldr	r3, [sp, #12]
 8004f08:	4298      	cmp	r0, r3
 8004f0a:	bfb8      	it	lt
 8004f0c:	4618      	movlt	r0, r3
 8004f0e:	e7a6      	b.n	8004e5e <_printf_i+0x162>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4632      	mov	r2, r6
 8004f14:	4649      	mov	r1, r9
 8004f16:	4640      	mov	r0, r8
 8004f18:	47d0      	blx	sl
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d09d      	beq.n	8004e5a <_printf_i+0x15e>
 8004f1e:	3501      	adds	r5, #1
 8004f20:	68e3      	ldr	r3, [r4, #12]
 8004f22:	9903      	ldr	r1, [sp, #12]
 8004f24:	1a5b      	subs	r3, r3, r1
 8004f26:	42ab      	cmp	r3, r5
 8004f28:	dcf2      	bgt.n	8004f10 <_printf_i+0x214>
 8004f2a:	e7eb      	b.n	8004f04 <_printf_i+0x208>
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	f104 0619 	add.w	r6, r4, #25
 8004f32:	e7f5      	b.n	8004f20 <_printf_i+0x224>
 8004f34:	080050ef 	.word	0x080050ef
 8004f38:	08005100 	.word	0x08005100

08004f3c <memmove>:
 8004f3c:	4288      	cmp	r0, r1
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	eb01 0402 	add.w	r4, r1, r2
 8004f44:	d902      	bls.n	8004f4c <memmove+0x10>
 8004f46:	4284      	cmp	r4, r0
 8004f48:	4623      	mov	r3, r4
 8004f4a:	d807      	bhi.n	8004f5c <memmove+0x20>
 8004f4c:	1e43      	subs	r3, r0, #1
 8004f4e:	42a1      	cmp	r1, r4
 8004f50:	d008      	beq.n	8004f64 <memmove+0x28>
 8004f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f5a:	e7f8      	b.n	8004f4e <memmove+0x12>
 8004f5c:	4601      	mov	r1, r0
 8004f5e:	4402      	add	r2, r0
 8004f60:	428a      	cmp	r2, r1
 8004f62:	d100      	bne.n	8004f66 <memmove+0x2a>
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f6e:	e7f7      	b.n	8004f60 <memmove+0x24>

08004f70 <_sbrk_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	2300      	movs	r3, #0
 8004f74:	4d05      	ldr	r5, [pc, #20]	@ (8004f8c <_sbrk_r+0x1c>)
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fc fd62 	bl	8001a44 <_sbrk>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_sbrk_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_sbrk_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	20000368 	.word	0x20000368

08004f90 <memchr>:
 8004f90:	4603      	mov	r3, r0
 8004f92:	b510      	push	{r4, lr}
 8004f94:	b2c9      	uxtb	r1, r1
 8004f96:	4402      	add	r2, r0
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	d101      	bne.n	8004fa2 <memchr+0x12>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e003      	b.n	8004faa <memchr+0x1a>
 8004fa2:	7804      	ldrb	r4, [r0, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	428c      	cmp	r4, r1
 8004fa8:	d1f6      	bne.n	8004f98 <memchr+0x8>
 8004faa:	bd10      	pop	{r4, pc}

08004fac <_realloc_r>:
 8004fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	4615      	mov	r5, r2
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	b921      	cbnz	r1, 8004fc2 <_realloc_r+0x16>
 8004fb8:	4611      	mov	r1, r2
 8004fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbe:	f7ff bc47 	b.w	8004850 <_malloc_r>
 8004fc2:	b92a      	cbnz	r2, 8004fd0 <_realloc_r+0x24>
 8004fc4:	f7ff fbda 	bl	800477c <_free_r>
 8004fc8:	2400      	movs	r4, #0
 8004fca:	4620      	mov	r0, r4
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd0:	f000 f81a 	bl	8005008 <_malloc_usable_size_r>
 8004fd4:	4285      	cmp	r5, r0
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	d802      	bhi.n	8004fe0 <_realloc_r+0x34>
 8004fda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004fde:	d8f4      	bhi.n	8004fca <_realloc_r+0x1e>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f7ff fc34 	bl	8004850 <_malloc_r>
 8004fe8:	4607      	mov	r7, r0
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d0ec      	beq.n	8004fc8 <_realloc_r+0x1c>
 8004fee:	42b5      	cmp	r5, r6
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	bf28      	it	cs
 8004ff6:	4632      	movcs	r2, r6
 8004ff8:	f7ff fbb2 	bl	8004760 <memcpy>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4640      	mov	r0, r8
 8005000:	f7ff fbbc 	bl	800477c <_free_r>
 8005004:	463c      	mov	r4, r7
 8005006:	e7e0      	b.n	8004fca <_realloc_r+0x1e>

08005008 <_malloc_usable_size_r>:
 8005008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800500c:	1f18      	subs	r0, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	bfbc      	itt	lt
 8005012:	580b      	ldrlt	r3, [r1, r0]
 8005014:	18c0      	addlt	r0, r0, r3
 8005016:	4770      	bx	lr

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
