
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004588  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800474c  0800474c  00006044  2**0
                  CONTENTS
  4 .ARM          00000000  0800474c  0800474c  00006044  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800474c  0800474c  00006044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  08004754  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000044  08004798  00006044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004798  0000613c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5c6  00000000  00000000  0000606d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c42  00000000  00000000  00012633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00014278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000965  00000000  00000000  00014e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017737  00000000  00000000  000157ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfb6  00000000  00000000  0002cf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087669  00000000  00000000  0003aeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003368  00000000  00000000  000c2588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c58f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000044 	.word	0x20000044
 800012c:	00000000 	.word	0x00000000
 8000130:	08004680 	.word	0x08004680

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000048 	.word	0x20000048
 800014c:	08004680 	.word	0x08004680

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	80fb      	strh	r3, [r7, #6]
 8000938:	4613      	mov	r3, r2
 800093a:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	085b      	lsrs	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	2101      	movs	r1, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f8d2 	bl	8001af4 <VL53L1_WrByte>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	4313      	orrs	r3, r2
 8000958:	73fb      	strb	r3, [r7, #15]
	return status;
 800095a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 8000976:	2300      	movs	r3, #0
 8000978:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800097a:	232d      	movs	r3, #45	@ 0x2d
 800097c:	73bb      	strb	r3, [r7, #14]
 800097e:	e011      	b.n	80009a4 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	b299      	uxth	r1, r3
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	3b2d      	subs	r3, #45	@ 0x2d
 8000988:	4a2c      	ldr	r2, [pc, #176]	@ (8000a3c <VL53L1X_SensorInit+0xd4>)
 800098a:	5cd2      	ldrb	r2, [r2, r3]
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f8b0 	bl	8001af4 <VL53L1_WrByte>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	4313      	orrs	r3, r2
 800099c:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800099e:	7bbb      	ldrb	r3, [r7, #14]
 80009a0:	3301      	adds	r3, #1
 80009a2:	73bb      	strb	r3, [r7, #14]
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	2b87      	cmp	r3, #135	@ 0x87
 80009a8:	d9ea      	bls.n	8000980 <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f889 	bl	8000ac4 <VL53L1X_StartRanging>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80009c0:	e00b      	b.n	80009da <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80009c2:	f107 020d 	add.w	r2, r7, #13
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f8aa 	bl	8000b24 <VL53L1X_CheckForDataReady>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 80009da:	7b7b      	ldrb	r3, [r7, #13]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f0      	beq.n	80009c2 <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f82c 	bl	8000a40 <VL53L1X_ClearInterrupt>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f87d 	bl	8000af4 <VL53L1X_StopRanging>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	2209      	movs	r2, #9
 8000a08:	2108      	movs	r1, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f872 	bl	8001af4 <VL53L1_WrByte>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	210b      	movs	r1, #11
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f867 	bl	8001af4 <VL53L1_WrByte>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	080046ac 	.word	0x080046ac

08000a40 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	2201      	movs	r2, #1
 8000a52:	2186      	movs	r1, #134	@ 0x86
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 f84d 	bl	8001af4 <VL53L1_WrByte>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	73fb      	strb	r3, [r7, #15]
	return status;
 8000a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8000a80:	f107 020e 	add.w	r2, r7, #14
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2130      	movs	r1, #48	@ 0x30
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 ffc1 	bl	8001a10 <VL53L1_RdByte>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	701a      	strb	r2, [r3, #0]
	return status;
 8000ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	2240      	movs	r2, #64	@ 0x40
 8000ad6:	2187      	movs	r1, #135	@ 0x87
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 f80b 	bl	8001af4 <VL53L1_WrByte>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	2200      	movs	r2, #0
 8000b06:	2187      	movs	r1, #135	@ 0x87
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fff3 	bl	8001af4 <VL53L1_WrByte>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	73fb      	strb	r3, [r7, #15]
	return status;
 8000b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000b34:	f107 020d 	add.w	r2, r7, #13
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff97 	bl	8000a70 <VL53L1X_GetInterruptPolarity>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8000b4c:	f107 020e 	add.w	r2, r7, #14
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	2131      	movs	r1, #49	@ 0x31
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 ff5b 	bl	8001a10 <VL53L1_RdByte>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10c      	bne.n	8000b86 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	7b7a      	ldrb	r2, [r7, #13]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d103      	bne.n	8000b80 <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e002      	b.n	8000b86 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	460a      	mov	r2, r1
 8000b9c:	80fb      	strh	r3, [r7, #6]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8000ba6:	f107 020c 	add.w	r2, r7, #12
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fa2a 	bl	8001008 <VL53L1X_GetDistanceMode>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 8000bbe:	89bb      	ldrh	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <VL53L1X_SetTimingBudgetInMs+0x36>
		return 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e0f6      	b.n	8000db6 <VL53L1X_SetTimingBudgetInMs+0x224>
	else if (DM == 1) {	/* Short DistanceMode */
 8000bc8:	89bb      	ldrh	r3, [r7, #12]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	f040 8082 	bne.w	8000cd4 <VL53L1X_SetTimingBudgetInMs+0x142>
		switch (TimingBudgetInMs) {
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bd6:	d06b      	beq.n	8000cb0 <VL53L1X_SetTimingBudgetInMs+0x11e>
 8000bd8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bdc:	dc77      	bgt.n	8000cce <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000bde:	2bc8      	cmp	r3, #200	@ 0xc8
 8000be0:	d057      	beq.n	8000c92 <VL53L1X_SetTimingBudgetInMs+0x100>
 8000be2:	2bc8      	cmp	r3, #200	@ 0xc8
 8000be4:	dc73      	bgt.n	8000cce <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000be6:	2b64      	cmp	r3, #100	@ 0x64
 8000be8:	d044      	beq.n	8000c74 <VL53L1X_SetTimingBudgetInMs+0xe2>
 8000bea:	2b64      	cmp	r3, #100	@ 0x64
 8000bec:	dc6f      	bgt.n	8000cce <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000bee:	2b32      	cmp	r3, #50	@ 0x32
 8000bf0:	d031      	beq.n	8000c56 <VL53L1X_SetTimingBudgetInMs+0xc4>
 8000bf2:	2b32      	cmp	r3, #50	@ 0x32
 8000bf4:	dc6b      	bgt.n	8000cce <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000bf6:	2b21      	cmp	r3, #33	@ 0x21
 8000bf8:	d020      	beq.n	8000c3c <VL53L1X_SetTimingBudgetInMs+0xaa>
 8000bfa:	2b21      	cmp	r3, #33	@ 0x21
 8000bfc:	dc67      	bgt.n	8000cce <VL53L1X_SetTimingBudgetInMs+0x13c>
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d002      	beq.n	8000c08 <VL53L1X_SetTimingBudgetInMs+0x76>
 8000c02:	2b14      	cmp	r3, #20
 8000c04:	d00d      	beq.n	8000c22 <VL53L1X_SetTimingBudgetInMs+0x90>
 8000c06:	e062      	b.n	8000cce <VL53L1X_SetTimingBudgetInMs+0x13c>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	221d      	movs	r2, #29
 8000c0c:	215e      	movs	r1, #94	@ 0x5e
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 ff92 	bl	8001b38 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	2227      	movs	r2, #39	@ 0x27
 8000c18:	2161      	movs	r1, #97	@ 0x61
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 ff8c 	bl	8001b38 <VL53L1_WrWord>
					0x0027);
			break;
 8000c20:	e0c7      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	2251      	movs	r2, #81	@ 0x51
 8000c26:	215e      	movs	r1, #94	@ 0x5e
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 ff85 	bl	8001b38 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	226e      	movs	r2, #110	@ 0x6e
 8000c32:	2161      	movs	r1, #97	@ 0x61
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 ff7f 	bl	8001b38 <VL53L1_WrWord>
					0x006E);
			break;
 8000c3a:	e0ba      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	22d6      	movs	r2, #214	@ 0xd6
 8000c40:	215e      	movs	r1, #94	@ 0x5e
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 ff78 	bl	8001b38 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	226e      	movs	r2, #110	@ 0x6e
 8000c4c:	2161      	movs	r1, #97	@ 0x61
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 ff72 	bl	8001b38 <VL53L1_WrWord>
					0x006E);
			break;
 8000c54:	e0ad      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8000c5c:	215e      	movs	r1, #94	@ 0x5e
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 ff6a 	bl	8001b38 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000c6a:	2161      	movs	r1, #97	@ 0x61
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 ff63 	bl	8001b38 <VL53L1_WrWord>
					0x01E8);
			break;
 8000c72:	e09e      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8000c7a:	215e      	movs	r1, #94	@ 0x5e
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 ff5b 	bl	8001b38 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8000c88:	2161      	movs	r1, #97	@ 0x61
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 ff54 	bl	8001b38 <VL53L1_WrWord>
					0x0388);
			break;
 8000c90:	e08f      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8000c98:	215e      	movs	r1, #94	@ 0x5e
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 ff4c 	bl	8001b38 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	f240 4296 	movw	r2, #1174	@ 0x496
 8000ca6:	2161      	movs	r1, #97	@ 0x61
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 ff45 	bl	8001b38 <VL53L1_WrWord>
					0x0496);
			break;
 8000cae:	e080      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	f240 5291 	movw	r2, #1425	@ 0x591
 8000cb6:	215e      	movs	r1, #94	@ 0x5e
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 ff3d 	bl	8001b38 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 8000cc4:	2161      	movs	r1, #97	@ 0x61
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ff36 	bl	8001b38 <VL53L1_WrWord>
					0x05C1);
			break;
 8000ccc:	e071      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
			break;
 8000cd2:	e06e      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		}
	} else {
		switch (TimingBudgetInMs) {
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000cda:	d058      	beq.n	8000d8e <VL53L1X_SetTimingBudgetInMs+0x1fc>
 8000cdc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ce0:	dc64      	bgt.n	8000dac <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000ce2:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ce4:	d044      	beq.n	8000d70 <VL53L1X_SetTimingBudgetInMs+0x1de>
 8000ce6:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ce8:	dc60      	bgt.n	8000dac <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000cea:	2b64      	cmp	r3, #100	@ 0x64
 8000cec:	d031      	beq.n	8000d52 <VL53L1X_SetTimingBudgetInMs+0x1c0>
 8000cee:	2b64      	cmp	r3, #100	@ 0x64
 8000cf0:	dc5c      	bgt.n	8000dac <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000cf2:	2b32      	cmp	r3, #50	@ 0x32
 8000cf4:	d020      	beq.n	8000d38 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 8000cf6:	2b32      	cmp	r3, #50	@ 0x32
 8000cf8:	dc58      	bgt.n	8000dac <VL53L1X_SetTimingBudgetInMs+0x21a>
 8000cfa:	2b14      	cmp	r3, #20
 8000cfc:	d002      	beq.n	8000d04 <VL53L1X_SetTimingBudgetInMs+0x172>
 8000cfe:	2b21      	cmp	r3, #33	@ 0x21
 8000d00:	d00d      	beq.n	8000d1e <VL53L1X_SetTimingBudgetInMs+0x18c>
 8000d02:	e053      	b.n	8000dac <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	221e      	movs	r2, #30
 8000d08:	215e      	movs	r1, #94	@ 0x5e
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 ff14 	bl	8001b38 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	2222      	movs	r2, #34	@ 0x22
 8000d14:	2161      	movs	r1, #97	@ 0x61
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 ff0e 	bl	8001b38 <VL53L1_WrWord>
					0x0022);
			break;
 8000d1c:	e049      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	2260      	movs	r2, #96	@ 0x60
 8000d22:	215e      	movs	r1, #94	@ 0x5e
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 ff07 	bl	8001b38 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	226e      	movs	r2, #110	@ 0x6e
 8000d2e:	2161      	movs	r1, #97	@ 0x61
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 ff01 	bl	8001b38 <VL53L1_WrWord>
					0x006E);
			break;
 8000d36:	e03c      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	22ad      	movs	r2, #173	@ 0xad
 8000d3c:	215e      	movs	r1, #94	@ 0x5e
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fefa 	bl	8001b38 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	22c6      	movs	r2, #198	@ 0xc6
 8000d48:	2161      	movs	r1, #97	@ 0x61
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fef4 	bl	8001b38 <VL53L1_WrWord>
					0x00C6);
			break;
 8000d50:	e02f      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8000d58:	215e      	movs	r1, #94	@ 0x5e
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 feec 	bl	8001b38 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8000d66:	2161      	movs	r1, #97	@ 0x61
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fee5 	bl	8001b38 <VL53L1_WrWord>
					0x01EA);
			break;
 8000d6e:	e020      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000d76:	215e      	movs	r1, #94	@ 0x5e
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fedd 	bl	8001b38 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8000d84:	2161      	movs	r1, #97	@ 0x61
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fed6 	bl	8001b38 <VL53L1_WrWord>
					0x02F8);
			break;
 8000d8c:	e011      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	f240 428f 	movw	r2, #1167	@ 0x48f
 8000d94:	215e      	movs	r1, #94	@ 0x5e
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fece 	bl	8001b38 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 8000da2:	2161      	movs	r1, #97	@ 0x61
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fec7 	bl	8001b38 <VL53L1_WrWord>
					0x04A4);
			break;
 8000daa:	e002      	b.n	8000db2 <VL53L1X_SetTimingBudgetInMs+0x220>
		default:
			status = 1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
			break;
 8000db0:	bf00      	nop
		}
	}
	return status;
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	6039      	str	r1, [r7, #0]
 8000dc8:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8000dce:	f107 020c 	add.w	r2, r7, #12
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	215e      	movs	r1, #94	@ 0x5e
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fe3c 	bl	8001a54 <VL53L1_RdWord>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 8000de6:	89bb      	ldrh	r3, [r7, #12]
 8000de8:	f240 5291 	movw	r2, #1425	@ 0x591
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d05b      	beq.n	8000ea8 <VL53L1X_GetTimingBudgetInMs+0xea>
 8000df0:	f240 5291 	movw	r2, #1425	@ 0x591
 8000df4:	4293      	cmp	r3, r2
 8000df6:	dc5c      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000df8:	f240 428f 	movw	r2, #1167	@ 0x48f
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d053      	beq.n	8000ea8 <VL53L1X_GetTimingBudgetInMs+0xea>
 8000e00:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 8000e04:	da55      	bge.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e06:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d048      	beq.n	8000ea0 <VL53L1X_GetTimingBudgetInMs+0xe2>
 8000e0e:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8000e12:	4293      	cmp	r3, r2
 8000e14:	dc4d      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e16:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d03c      	beq.n	8000e98 <VL53L1X_GetTimingBudgetInMs+0xda>
 8000e1e:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8000e22:	4293      	cmp	r3, r2
 8000e24:	dc45      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e26:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d038      	beq.n	8000ea0 <VL53L1X_GetTimingBudgetInMs+0xe2>
 8000e2e:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000e32:	4293      	cmp	r3, r2
 8000e34:	dc3d      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e36:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8000e3a:	d02d      	beq.n	8000e98 <VL53L1X_GetTimingBudgetInMs+0xda>
 8000e3c:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8000e40:	dc37      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e42:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8000e46:	d023      	beq.n	8000e90 <VL53L1X_GetTimingBudgetInMs+0xd2>
 8000e48:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8000e4c:	dc31      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e4e:	2bd6      	cmp	r3, #214	@ 0xd6
 8000e50:	d01a      	beq.n	8000e88 <VL53L1X_GetTimingBudgetInMs+0xca>
 8000e52:	2bd6      	cmp	r3, #214	@ 0xd6
 8000e54:	dc2d      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e56:	2bad      	cmp	r3, #173	@ 0xad
 8000e58:	d01a      	beq.n	8000e90 <VL53L1X_GetTimingBudgetInMs+0xd2>
 8000e5a:	2bad      	cmp	r3, #173	@ 0xad
 8000e5c:	dc29      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e5e:	2b60      	cmp	r3, #96	@ 0x60
 8000e60:	d012      	beq.n	8000e88 <VL53L1X_GetTimingBudgetInMs+0xca>
 8000e62:	2b60      	cmp	r3, #96	@ 0x60
 8000e64:	dc25      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e66:	2b51      	cmp	r3, #81	@ 0x51
 8000e68:	d00a      	beq.n	8000e80 <VL53L1X_GetTimingBudgetInMs+0xc2>
 8000e6a:	2b51      	cmp	r3, #81	@ 0x51
 8000e6c:	dc21      	bgt.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
 8000e6e:	2b1d      	cmp	r3, #29
 8000e70:	d002      	beq.n	8000e78 <VL53L1X_GetTimingBudgetInMs+0xba>
 8000e72:	2b1e      	cmp	r3, #30
 8000e74:	d004      	beq.n	8000e80 <VL53L1X_GetTimingBudgetInMs+0xc2>
 8000e76:	e01c      	b.n	8000eb2 <VL53L1X_GetTimingBudgetInMs+0xf4>
		case 0x001D :
			*pTimingBudget = 15;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	801a      	strh	r2, [r3, #0]
			break;
 8000e7e:	e01d      	b.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2214      	movs	r2, #20
 8000e84:	801a      	strh	r2, [r3, #0]
			break;
 8000e86:	e019      	b.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2221      	movs	r2, #33	@ 0x21
 8000e8c:	801a      	strh	r2, [r3, #0]
			break;
 8000e8e:	e015      	b.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2232      	movs	r2, #50	@ 0x32
 8000e94:	801a      	strh	r2, [r3, #0]
			break;
 8000e96:	e011      	b.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2264      	movs	r2, #100	@ 0x64
 8000e9c:	801a      	strh	r2, [r3, #0]
			break;
 8000e9e:	e00d      	b.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	22c8      	movs	r2, #200	@ 0xc8
 8000ea4:	801a      	strh	r2, [r3, #0]
			break;
 8000ea6:	e009      	b.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xfe>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000eae:	801a      	strh	r2, [r3, #0]
			break;
 8000eb0:	e004      	b.n	8000ebc <VL53L1X_GetTimingBudgetInMs+0xfe>
		default:
			status = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	80fb      	strh	r3, [r7, #6]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff6a 	bl	8000dbe <VL53L1X_GetTimingBudgetInMs>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <VL53L1X_SetDistanceMode+0x38>
		return 1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e07f      	b.n	8001000 <VL53L1X_SetDistanceMode+0x138>
	switch (DM) {
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d002      	beq.n	8000f0c <VL53L1X_SetDistanceMode+0x44>
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d033      	beq.n	8000f72 <VL53L1X_SetDistanceMode+0xaa>
 8000f0a:	e065      	b.n	8000fd8 <VL53L1X_SetDistanceMode+0x110>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2214      	movs	r2, #20
 8000f10:	214b      	movs	r1, #75	@ 0x4b
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fdee 	bl	8001af4 <VL53L1_WrByte>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	2207      	movs	r2, #7
 8000f20:	2160      	movs	r1, #96	@ 0x60
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fde6 	bl	8001af4 <VL53L1_WrByte>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	2205      	movs	r2, #5
 8000f30:	2163      	movs	r1, #99	@ 0x63
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fdde 	bl	8001af4 <VL53L1_WrByte>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	2238      	movs	r2, #56	@ 0x38
 8000f40:	2169      	movs	r1, #105	@ 0x69
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fdd6 	bl	8001af4 <VL53L1_WrByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	f240 7205 	movw	r2, #1797	@ 0x705
 8000f52:	2178      	movs	r1, #120	@ 0x78
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fdef 	bl	8001b38 <VL53L1_WrWord>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	f240 6206 	movw	r2, #1542	@ 0x606
 8000f64:	217a      	movs	r1, #122	@ 0x7a
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fde6 	bl	8001b38 <VL53L1_WrWord>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000f70:	e035      	b.n	8000fde <VL53L1X_SetDistanceMode+0x116>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	220a      	movs	r2, #10
 8000f76:	214b      	movs	r1, #75	@ 0x4b
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fdbb 	bl	8001af4 <VL53L1_WrByte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	220f      	movs	r2, #15
 8000f86:	2160      	movs	r1, #96	@ 0x60
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fdb3 	bl	8001af4 <VL53L1_WrByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	220d      	movs	r2, #13
 8000f96:	2163      	movs	r1, #99	@ 0x63
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fdab 	bl	8001af4 <VL53L1_WrByte>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	22b8      	movs	r2, #184	@ 0xb8
 8000fa6:	2169      	movs	r1, #105	@ 0x69
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fda3 	bl	8001af4 <VL53L1_WrByte>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f640 720d 	movw	r2, #3853	@ 0xf0d
 8000fb8:	2178      	movs	r1, #120	@ 0x78
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fdbc 	bl	8001b38 <VL53L1_WrWord>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	f640 620e 	movw	r2, #3598	@ 0xe0e
 8000fca:	217a      	movs	r1, #122	@ 0x7a
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fdb3 	bl	8001b38 <VL53L1_WrWord>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000fd6:	e002      	b.n	8000fde <VL53L1X_SetDistanceMode+0x116>
	default:
		status = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
		break;
 8000fdc:	bf00      	nop
	}

	if (status == 0)
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10a      	bne.n	8000ffc <VL53L1X_SetDistanceMode+0x134>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8000fe6:	89ba      	ldrh	r2, [r7, #12]
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fdd0 	bl	8000b92 <VL53L1X_SetTimingBudgetInMs>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001018:	f107 020e 	add.w	r2, r7, #14
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	214b      	movs	r1, #75	@ 0x4b
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fcf5 	bl	8001a10 <VL53L1_RdByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4313      	orrs	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b14      	cmp	r3, #20
 8001038:	d102      	bne.n	8001040 <VL53L1X_GetDistanceMode+0x38>
		*DM=1;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d102      	bne.n	800104c <VL53L1X_GetDistanceMode+0x44>
		*DM=2;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2202      	movs	r2, #2
 800104a:	801a      	strh	r2, [r3, #0]
	return status;
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001068:	f107 020c 	add.w	r2, r7, #12
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	21de      	movs	r1, #222	@ 0xde
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fcef 	bl	8001a54 <VL53L1_RdWord>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4313      	orrs	r3, r2
 800107e:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001080:	89bb      	ldrh	r3, [r7, #12]
 8001082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001086:	b29b      	uxth	r3, r3
 8001088:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	461a      	mov	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f99d 	bl	80003d4 <__aeabi_ui2d>
 800109a:	a30b      	add	r3, pc, #44	@ (adr r3, 80010c8 <VL53L1X_SetInterMeasurementInMs+0x70>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa12 	bl	80004c8 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fc1e 	bl	80008ec <__aeabi_d2uiz>
 80010b0:	4602      	mov	r2, r0
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	216c      	movs	r1, #108	@ 0x6c
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fd6a 	bl	8001b90 <VL53L1_WrDWord>
	return status;
 80010bc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	33333333 	.word	0x33333333
 80010cc:	3ff13333 	.word	0x3ff13333

080010d0 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80010e4:	f107 020e 	add.w	r2, r7, #14
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	21e5      	movs	r1, #229	@ 0xe5
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fc8f 	bl	8001a10 <VL53L1_RdByte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 80010fc:	7bba      	ldrb	r2, [r7, #14]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	701a      	strb	r2, [r3, #0]
	return status;
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	6039      	str	r1, [r7, #0]
 8001118:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2196      	movs	r1, #150	@ 0x96
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fc94 	bl	8001a54 <VL53L1_RdWord>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4313      	orrs	r3, r2
 8001134:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001136:	89ba      	ldrh	r2, [r7, #12]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	801a      	strh	r2, [r3, #0]
	return status;
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	*rangeStatus = 255;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	22ff      	movs	r2, #255	@ 0xff
 800115c:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 800115e:	f107 020e 	add.w	r2, r7, #14
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	2189      	movs	r1, #137	@ 0x89
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fc52 	bl	8001a10 <VL53L1_RdByte>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	4313      	orrs	r3, r2
 8001174:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt & 0x1F;
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73bb      	strb	r3, [r7, #14]
	if (RgSt < 24)
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	2b17      	cmp	r3, #23
 8001184:	d805      	bhi.n	8001192 <VL53L1X_GetRangeStatus+0x4a>
		*rangeStatus = status_rtn[RgSt];
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	461a      	mov	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <VL53L1X_GetRangeStatus+0x58>)
 800118c:	5c9a      	ldrb	r2, [r3, r2]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	701a      	strb	r2, [r3, #0]
	return status;
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08004708 	.word	0x08004708

080011a4 <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	80fb      	strh	r3, [r7, #6]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80bb      	strh	r3, [r7, #4]
	VL53L1X_ERROR status = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
	int16_t Temp;

	Temp = (OffsetValue*4);
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	81bb      	strh	r3, [r7, #12]
	status |= VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 80011c0:	89ba      	ldrh	r2, [r7, #12]
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	211e      	movs	r1, #30
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fcb6 	bl	8001b38 <VL53L1_WrWord>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	73fb      	strb	r3, [r7, #15]
			(uint16_t)Temp);
	status |= VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	2200      	movs	r2, #0
 80011da:	2120      	movs	r1, #32
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fcab 	bl	8001b38 <VL53L1_WrWord>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	2200      	movs	r2, #0
 80011f0:	2122      	movs	r1, #34	@ 0x22
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fca0 	bl	8001b38 <VL53L1_WrWord>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	4313      	orrs	r3, r2
 8001200:	73fb      	strb	r3, [r7, #15]
	return status;
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <VL53L1X_SetXtalk>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetXtalk(uint16_t dev, uint16_t XtalkValue)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	4613      	mov	r3, r2
 800121e:	80bb      	strh	r3, [r7, #4]
/* XTalkValue in count per second to avoid float type */
	VL53L1X_ERROR status = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrWord(dev,
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	2200      	movs	r2, #0
 8001228:	2118      	movs	r1, #24
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fc84 	bl	8001b38 <VL53L1_WrWord>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	4313      	orrs	r3, r2
 8001238:	73fb      	strb	r3, [r7, #15]
			ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS,
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS,
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	2200      	movs	r2, #0
 800123e:	211a      	movs	r1, #26
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fc79 	bl	8001b38 <VL53L1_WrWord>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4313      	orrs	r3, r2
 800124e:	73fb      	strb	r3, [r7, #15]
			0x0000);
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
			(XtalkValue<<9)/1000); /* * << 9 (7.9 format) and /1000 to convert cps to kpcs */
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <VL53L1X_SetXtalk+0x74>)
 8001256:	fb82 1203 	smull	r1, r2, r2, r3
 800125a:	1192      	asrs	r2, r2, #6
 800125c:	17db      	asrs	r3, r3, #31
 800125e:	1ad3      	subs	r3, r2, r3
	status |= VL53L1_WrWord(dev, ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS,
 8001260:	b29a      	uxth	r2, r3
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2116      	movs	r1, #22
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fc66 	bl	8001b38 <VL53L1_WrWord>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	4313      	orrs	r3, r2
 8001274:	73fb      	strb	r3, [r7, #15]
	return status;
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	10624dd3 	.word	0x10624dd3

08001288 <VL53L1X_SetDistanceThreshold>:
}

VL53L1X_ERROR VL53L1X_SetDistanceThreshold(uint16_t dev, uint16_t ThreshLow,
			      uint16_t ThreshHigh, uint8_t Window,
			      uint8_t IntOnNoTarget)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	4603      	mov	r3, r0
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]
 80012a2:	4613      	mov	r3, r2
 80012a4:	707b      	strb	r3, [r7, #1]
	VL53L1X_ERROR status = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO, &Temp);
 80012ae:	f107 020e 	add.w	r2, r7, #14
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2146      	movs	r1, #70	@ 0x46
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fbaa 	bl	8001a10 <VL53L1_RdByte>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & (~0x6F);
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	f023 036f 	bic.w	r3, r3, #111	@ 0x6f
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73bb      	strb	r3, [r7, #14]
	Temp = Temp|Window;
 80012d0:	7bba      	ldrb	r2, [r7, #14]
 80012d2:	787b      	ldrb	r3, [r7, #1]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	73bb      	strb	r3, [r7, #14]
	if (IntOnNoTarget == 0) {
 80012da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <VL53L1X_SetDistanceThreshold+0x6c>
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,Temp);
 80012e2:	7bba      	ldrb	r2, [r7, #14]
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2146      	movs	r1, #70	@ 0x46
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fc03 	bl	8001af4 <VL53L1_WrByte>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e00a      	b.n	800130a <VL53L1X_SetDistanceThreshold+0x82>
	} else {
		status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CONFIG_GPIO,(Temp | 0x40));
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	2146      	movs	r1, #70	@ 0x46
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fbf7 	bl	8001af4 <VL53L1_WrByte>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
	}
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_HIGH, ThreshHigh);
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2172      	movs	r1, #114	@ 0x72
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fc11 	bl	8001b38 <VL53L1_WrWord>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	4313      	orrs	r3, r2
 800131e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrWord(dev, SYSTEM__THRESH_LOW, ThreshLow);
 8001320:	88ba      	ldrh	r2, [r7, #4]
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	2174      	movs	r1, #116	@ 0x74
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fc06 	bl	8001b38 <VL53L1_WrWord>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4313      	orrs	r3, r2
 8001334:	73fb      	strb	r3, [r7, #15]
	return status;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bd90      	pop	{r4, r7, pc}
	...

08001344 <Start_CAN>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Start_CAN(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	if(HAL_CAN_Start(&hcan) == HAL_ERROR)
 8001348:	4807      	ldr	r0, [pc, #28]	@ (8001368 <Start_CAN+0x24>)
 800134a:	f000 ff28 	bl	800219e <HAL_CAN_Start>
 800134e:	4603      	mov	r3, r0
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <Start_CAN+0x20>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"\n\rFail to start CAN", 25, 100);
 8001354:	2364      	movs	r3, #100	@ 0x64
 8001356:	2219      	movs	r2, #25
 8001358:	4904      	ldr	r1, [pc, #16]	@ (800136c <Start_CAN+0x28>)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <Start_CAN+0x2c>)
 800135c:	f002 ff90 	bl	8004280 <HAL_UART_Transmit>
		Error_Handler();
 8001360:	f000 fa16 	bl	8001790 <Error_Handler>
	}
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000060 	.word	0x20000060
 800136c:	08004698 	.word	0x08004698
 8001370:	200000dc 	.word	0x200000dc

08001374 <Start_sensor>:

void Start_sensor(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(XShut0.Port, XShut0.Pin, 0);
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <Start_sensor+0x60>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a15      	ldr	r2, [pc, #84]	@ (80013d4 <Start_sensor+0x60>)
 800137e:	6852      	ldr	r2, [r2, #4]
 8001380:	b291      	uxth	r1, r2
 8001382:	2200      	movs	r2, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fa9c 	bl	80028c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(XShut1.Port, XShut1.Pin, 0);
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <Start_sensor+0x64>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <Start_sensor+0x64>)
 8001390:	6852      	ldr	r2, [r2, #4]
 8001392:	b291      	uxth	r1, r2
 8001394:	2200      	movs	r2, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fa93 	bl	80028c2 <HAL_GPIO_WritePin>
	while(VL53L1__Init(VL53L1_1_ADDR, XShut1) != 0){}
 800139c:	bf00      	nop
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <Start_sensor+0x64>)
 80013a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013a4:	2056      	movs	r0, #86	@ 0x56
 80013a6:	f000 fc4b 	bl	8001c40 <VL53L1__Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f6      	bne.n	800139e <Start_sensor+0x2a>
	while(VL53L1__Init(VL53L1_0_ADDR, XShut0) != 0){}
 80013b0:	bf00      	nop
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <Start_sensor+0x60>)
 80013b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013b8:	2054      	movs	r0, #84	@ 0x54
 80013ba:	f000 fc41 	bl	8001c40 <VL53L1__Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f6      	bne.n	80013b2 <Start_sensor+0x3e>
	VL53L1X_StartRanging(VL53L1_0_ADDR);
 80013c4:	2054      	movs	r0, #84	@ 0x54
 80013c6:	f7ff fb7d 	bl	8000ac4 <VL53L1X_StartRanging>
	VL53L1X_StartRanging(VL53L1_1_ADDR);
 80013ca:	2056      	movs	r0, #86	@ 0x56
 80013cc:	f7ff fb7a 	bl	8000ac4 <VL53L1X_StartRanging>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000008 	.word	0x20000008

080013dc <Read_sensor>:

void Read_sensor(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	VL53L1__GetDistance(VL53L1_0_ADDR, GPIO1_0, &Distance_0);
 80013e0:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <Read_sensor+0x20>)
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <Read_sensor+0x24>)
 80013e4:	ca06      	ldmia	r2, {r1, r2}
 80013e6:	2054      	movs	r0, #84	@ 0x54
 80013e8:	f000 fcc0 	bl	8001d6c <VL53L1__GetDistance>
	VL53L1__GetDistance(VL53L1_1_ADDR, GPIO1_1, &Distance_1);
 80013ec:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <Read_sensor+0x28>)
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <Read_sensor+0x2c>)
 80013f0:	ca06      	ldmia	r2, {r1, r2}
 80013f2:	2056      	movs	r0, #86	@ 0x56
 80013f4:	f000 fcba 	bl	8001d6c <VL53L1__GetDistance>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000010 	.word	0x20000010
 8001400:	20000124 	.word	0x20000124
 8001404:	20000018 	.word	0x20000018
 8001408:	20000126 	.word	0x20000126

0800140c <Send_CAN>:

void Send_CAN(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <Send_CAN+0x20>)
 8001412:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <Send_CAN+0x24>)
 8001414:	4907      	ldr	r1, [pc, #28]	@ (8001434 <Send_CAN+0x28>)
 8001416:	4808      	ldr	r0, [pc, #32]	@ (8001438 <Send_CAN+0x2c>)
 8001418:	f000 ff05 	bl	8002226 <HAL_CAN_AddTxMessage>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <Send_CAN+0x1a>
	{
	   Error_Handler ();
 8001422:	f000 f9b5 	bl	8001790 <Error_Handler>
	}
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000130 	.word	0x20000130
 8001430:	20000128 	.word	0x20000128
 8001434:	20000020 	.word	0x20000020
 8001438:	20000060 	.word	0x20000060

0800143c <Avoid_Object>:

void Avoid_Object(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	Read_sensor();
 8001440:	f7ff ffcc 	bl	80013dc <Read_sensor>
	if(Distance_0 < 250 || Distance_1 < 250)
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <Avoid_Object+0x60>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2bf9      	cmp	r3, #249	@ 0xf9
 800144a:	d903      	bls.n	8001454 <Avoid_Object+0x18>
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <Avoid_Object+0x64>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	2bf9      	cmp	r3, #249	@ 0xf9
 8001452:	d818      	bhi.n	8001486 <Avoid_Object+0x4a>
	{
		TxData[1] = 20;
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <Avoid_Object+0x68>)
 8001456:	2214      	movs	r2, #20
 8001458:	705a      	strb	r2, [r3, #1]
		if(Distance_0 < Distance_1)
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <Avoid_Object+0x60>)
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <Avoid_Object+0x64>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d205      	bcs.n	8001472 <Avoid_Object+0x36>
		{
			TxData[0] = 25;
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <Avoid_Object+0x68>)
 8001468:	2219      	movs	r2, #25
 800146a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800146c:	2064      	movs	r0, #100	@ 0x64
 800146e:	f000 fd77 	bl	8001f60 <HAL_Delay>
		}
		if(Distance_0 > Distance_1)
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <Avoid_Object+0x60>)
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <Avoid_Object+0x64>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d909      	bls.n	8001492 <Avoid_Object+0x56>
		{
			TxData[0] = 5;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <Avoid_Object+0x68>)
 8001480:	2205      	movs	r2, #5
 8001482:	701a      	strb	r2, [r3, #0]
		if(Distance_0 > Distance_1)
 8001484:	e005      	b.n	8001492 <Avoid_Object+0x56>
		}
	}
	else
	{
		TxData[0] = 15;
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <Avoid_Object+0x68>)
 8001488:	220f      	movs	r2, #15
 800148a:	701a      	strb	r2, [r3, #0]
		TxData[1] = 40;
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <Avoid_Object+0x68>)
 800148e:	2228      	movs	r2, #40	@ 0x28
 8001490:	705a      	strb	r2, [r3, #1]
	}
	Send_CAN();
 8001492:	f7ff ffbb 	bl	800140c <Send_CAN>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000124 	.word	0x20000124
 80014a0:	20000126 	.word	0x20000126
 80014a4:	20000128 	.word	0x20000128

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f000 fcf6 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f813 	bl	80014da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 f8e4 	bl	8001680 <MX_GPIO_Init>
  MX_CAN_Init();
 80014b8:	f000 f854 	bl	8001564 <MX_CAN_Init>
  MX_I2C1_Init();
 80014bc:	f000 f888 	bl	80015d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014c0:	f000 f8b4 	bl	800162c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Start_sensor();
 80014c4:	f7ff ff56 	bl	8001374 <Start_sensor>
  Start_CAN();
 80014c8:	f7ff ff3c 	bl	8001344 <Start_CAN>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Avoid_Object();
 80014cc:	f7ff ffb6 	bl	800143c <Avoid_Object>
	  HAL_Delay(10);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f000 fd45 	bl	8001f60 <HAL_Delay>
	  Avoid_Object();
 80014d6:	bf00      	nop
 80014d8:	e7f8      	b.n	80014cc <main+0x24>

080014da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b090      	sub	sp, #64	@ 0x40
 80014de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	2228      	movs	r2, #40	@ 0x28
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 f89d 	bl	8004628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001504:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150a:	2301      	movs	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001516:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001518:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fa4c 	bl	80039c0 <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800152e:	f000 f92f 	bl	8001790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2302      	movs	r3, #2
 8001538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2102      	movs	r1, #2
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fcb9 	bl	8003ec4 <HAL_RCC_ClockConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001558:	f000 f91a 	bl	8001790 <Error_Handler>
  }
}
 800155c:	bf00      	nop
 800155e:	3740      	adds	r7, #64	@ 0x40
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <MX_CAN_Init+0x64>)
 800156a:	4a18      	ldr	r2, [pc, #96]	@ (80015cc <MX_CAN_Init+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800156e:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <MX_CAN_Init+0x64>)
 8001570:	2209      	movs	r2, #9
 8001572:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MX_CAN_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <MX_CAN_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_CAN_Init+0x64>)
 8001582:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8001586:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_CAN_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_CAN_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_CAN_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_CAN_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_CAN_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_CAN_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_CAN_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_CAN_Init+0x64>)
 80015b4:	f000 fcf8 	bl	8001fa8 <HAL_CAN_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80015be:	f000 f8e7 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000060 	.word	0x20000060
 80015cc:	40006400 	.word	0x40006400

080015d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015d6:	4a13      	ldr	r2, [pc, #76]	@ (8001624 <MX_I2C1_Init+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <MX_I2C1_Init+0x58>)
 80015de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	@ (8001620 <MX_I2C1_Init+0x50>)
 800160e:	f001 f971 	bl	80028f4 <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001618:	f000 f8ba 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000088 	.word	0x20000088
 8001624:	40005400 	.word	0x40005400
 8001628:	000186a0 	.word	0x000186a0

0800162c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001632:	4a12      	ldr	r2, [pc, #72]	@ (800167c <MX_USART1_UART_Init+0x50>)
 8001634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_USART1_UART_Init+0x4c>)
 8001664:	f002 fdbc 	bl	80041e0 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800166e:	f000 f88f 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000dc 	.word	0x200000dc
 800167c:	40013800 	.word	0x40013800

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <MX_GPIO_Init+0x104>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a3a      	ldr	r2, [pc, #232]	@ (8001784 <MX_GPIO_Init+0x104>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <MX_GPIO_Init+0x104>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut0_GPIO_Port, XShut0_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016fa:	4823      	ldr	r0, [pc, #140]	@ (8001788 <MX_GPIO_Init+0x108>)
 80016fc:	f001 f8e1 	bl	80028c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001706:	4821      	ldr	r0, [pc, #132]	@ (800178c <MX_GPIO_Init+0x10c>)
 8001708:	f001 f8db 	bl	80028c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO1_0_Pin */
  GPIO_InitStruct.Pin = GPIO1_0_Pin;
 800170c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_0_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4619      	mov	r1, r3
 8001720:	4819      	ldr	r0, [pc, #100]	@ (8001788 <MX_GPIO_Init+0x108>)
 8001722:	f000 ff33 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : XShut0_Pin */
  GPIO_InitStruct.Pin = XShut0_Pin;
 8001726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2302      	movs	r3, #2
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XShut0_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4812      	ldr	r0, [pc, #72]	@ (8001788 <MX_GPIO_Init+0x108>)
 8001740:	f000 ff24 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : XShut1_Pin */
  GPIO_InitStruct.Pin = XShut1_Pin;
 8001744:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2302      	movs	r3, #2
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XShut1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	@ (800178c <MX_GPIO_Init+0x10c>)
 800175e:	f000 ff15 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_1_Pin */
  GPIO_InitStruct.Pin = GPIO1_1_Pin;
 8001762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_1_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_GPIO_Init+0x10c>)
 8001778:	f000 ff08 	bl	800258c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40011000 	.word	0x40011000
 800178c:	40010c00 	.word	0x40010c00

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <Error_Handler+0x8>

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <HAL_MspInit+0x5c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <HAL_MspInit+0x5c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_MspInit+0x60>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_MspInit+0x60>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000

08001800 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1c      	ldr	r2, [pc, #112]	@ (800188c <HAL_CAN_MspInit+0x8c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d131      	bne.n	8001884 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_CAN_MspInit+0x90>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <HAL_CAN_MspInit+0x90>)
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800182a:	61d3      	str	r3, [r2, #28]
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_CAN_MspInit+0x90>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_CAN_MspInit+0x90>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a14      	ldr	r2, [pc, #80]	@ (8001890 <HAL_CAN_MspInit+0x90>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_CAN_MspInit+0x90>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001850:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4619      	mov	r1, r3
 8001864:	480b      	ldr	r0, [pc, #44]	@ (8001894 <HAL_CAN_MspInit+0x94>)
 8001866:	f000 fe91 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800186a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <HAL_CAN_MspInit+0x94>)
 8001880:	f000 fe84 	bl	800258c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40006400 	.word	0x40006400
 8001890:	40021000 	.word	0x40021000
 8001894:	40010800 	.word	0x40010800

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <HAL_I2C_MspInit+0x70>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d123      	bne.n	8001900 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_I2C_MspInit+0x74>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a13      	ldr	r2, [pc, #76]	@ (800190c <HAL_I2C_MspInit+0x74>)
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_I2C_MspInit+0x74>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d0:	23c0      	movs	r3, #192	@ 0xc0
 80018d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d4:	2312      	movs	r3, #18
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4619      	mov	r1, r3
 80018e2:	480b      	ldr	r0, [pc, #44]	@ (8001910 <HAL_I2C_MspInit+0x78>)
 80018e4:	f000 fe52 	bl	800258c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_I2C_MspInit+0x74>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_I2C_MspInit+0x74>)
 80018ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018f2:	61d3      	str	r3, [r2, #28]
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_I2C_MspInit+0x74>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40005400 	.word	0x40005400
 800190c:	40021000 	.word	0x40021000
 8001910:	40010c00 	.word	0x40010c00

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_UART_MspInit+0x8c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d131      	bne.n	8001998 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001934:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <HAL_UART_MspInit+0x90>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a1a      	ldr	r2, [pc, #104]	@ (80019a4 <HAL_UART_MspInit+0x90>)
 800193a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_UART_MspInit+0x90>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_UART_MspInit+0x90>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <HAL_UART_MspInit+0x90>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_UART_MspInit+0x90>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001968:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	4619      	mov	r1, r3
 8001978:	480b      	ldr	r0, [pc, #44]	@ (80019a8 <HAL_UART_MspInit+0x94>)
 800197a:	f000 fe07 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800197e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <HAL_UART_MspInit+0x94>)
 8001994:	f000 fdfa 	bl	800258c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010800 	.word	0x40010800

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 fa94 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <VL53L1_RdByte>:
//#include <math.h>

extern I2C_HandleTypeDef VL53L1__PORT;


int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	4603      	mov	r3, r0
 8001a18:	603a      	str	r2, [r7, #0]
 8001a1a:	80fb      	strh	r3, [r7, #6]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT))
 8001a20:	88ba      	ldrh	r2, [r7, #4]
 8001a22:	88f9      	ldrh	r1, [r7, #6]
 8001a24:	2314      	movs	r3, #20
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2310      	movs	r3, #16
 8001a32:	4807      	ldr	r0, [pc, #28]	@ (8001a50 <VL53L1_RdByte+0x40>)
 8001a34:	f001 f99c 	bl	8002d70 <HAL_I2C_Mem_Read>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <VL53L1_RdByte+0x34>
		return VL53L1__IO_ERROR;
 8001a3e:	f06f 030c 	mvn.w	r3, #12
 8001a42:	e000      	b.n	8001a46 <VL53L1_RdByte+0x36>
	else
		return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000088 	.word	0x20000088

08001a54 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	603a      	str	r2, [r7, #0]
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	460b      	mov	r3, r1
 8001a62:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)data, 2, I2C_COMM_TIMEOUT))
 8001a64:	88ba      	ldrh	r2, [r7, #4]
 8001a66:	88f9      	ldrh	r1, [r7, #6]
 8001a68:	2314      	movs	r3, #20
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2310      	movs	r3, #16
 8001a76:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <VL53L1_RdWord+0x54>)
 8001a78:	f001 f97a 	bl	8002d70 <HAL_I2C_Mem_Read>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <VL53L1_RdWord+0x34>
		return VL53L1__IO_ERROR;
 8001a82:	f06f 030c 	mvn.w	r3, #12
 8001a86:	e00b      	b.n	8001aa0 <VL53L1_RdWord+0x4c>
	else {
		*data=__REVSH(*data);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	ba5b      	rev16	r3, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	801a      	strh	r2, [r3, #0]
		return 0;
 8001a9e:	2300      	movs	r3, #0
	}
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000088 	.word	0x20000088

08001aac <VL53L1_ReadMulti>:
		*data=__REV(*data);
		return 0;
	}
}

int8_t VL53L1_ReadMulti(uint16_t dev, uint16_t index, uint8_t *pdata, uint32_t count){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	81fb      	strh	r3, [r7, #14]
 8001aba:	460b      	mov	r3, r1
 8001abc:	81bb      	strh	r3, [r7, #12]
	if (HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, pdata, count, I2C_COMM_TIMEOUT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	89ba      	ldrh	r2, [r7, #12]
 8001ac4:	89f9      	ldrh	r1, [r7, #14]
 8001ac6:	2014      	movs	r0, #20
 8001ac8:	9002      	str	r0, [sp, #8]
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <VL53L1_ReadMulti+0x44>)
 8001ad4:	f001 f94c 	bl	8002d70 <HAL_I2C_Mem_Read>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <VL53L1_ReadMulti+0x38>
		return VL53L1__IO_ERROR;
 8001ade:	f06f 030c 	mvn.w	r3, #12
 8001ae2:	e000      	b.n	8001ae6 <VL53L1_ReadMulti+0x3a>
	else
		return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000088 	.word	0x20000088

08001af4 <VL53L1_WrByte>:

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
 8001afe:	460b      	mov	r3, r1
 8001b00:	80bb      	strh	r3, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 8001b06:	88ba      	ldrh	r2, [r7, #4]
 8001b08:	88f9      	ldrh	r1, [r7, #6]
 8001b0a:	2314      	movs	r3, #20
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1cfb      	adds	r3, r7, #3
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2310      	movs	r3, #16
 8001b18:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <VL53L1_WrByte+0x40>)
 8001b1a:	f001 f82f 	bl	8002b7c <HAL_I2C_Mem_Write>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 8001b24:	f06f 030c 	mvn.w	r3, #12
 8001b28:	e000      	b.n	8001b2c <VL53L1_WrByte+0x38>
	else
		return 0;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000088 	.word	0x20000088

08001b38 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
 8001b42:	460b      	mov	r3, r1
 8001b44:	80bb      	strh	r3, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	807b      	strh	r3, [r7, #2]
	data=__REVSH(data);
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	81fb      	strh	r3, [r7, #14]
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	ba5b      	rev16	r3, r3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	807b      	strh	r3, [r7, #2]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 2, I2C_COMM_TIMEOUT))
 8001b5c:	88ba      	ldrh	r2, [r7, #4]
 8001b5e:	88f9      	ldrh	r1, [r7, #6]
 8001b60:	2314      	movs	r3, #20
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2302      	movs	r3, #2
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	1cbb      	adds	r3, r7, #2
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	4807      	ldr	r0, [pc, #28]	@ (8001b8c <VL53L1_WrWord+0x54>)
 8001b70:	f001 f804 	bl	8002b7c <HAL_I2C_Mem_Write>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <VL53L1_WrWord+0x48>
		return VL53L1__IO_ERROR;
 8001b7a:	f06f 030c 	mvn.w	r3, #12
 8001b7e:	e000      	b.n	8001b82 <VL53L1_WrWord+0x4a>
	else
		return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000088 	.word	0x20000088

08001b90 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	4603      	mov	r3, r0
 8001b98:	603a      	str	r2, [r7, #0]
 8001b9a:	80fb      	strh	r3, [r7, #6]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	80bb      	strh	r3, [r7, #4]
	data=__REV(data);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
  return __builtin_bswap32(value);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ba1b      	rev	r3, r3
 8001ba8:	603b      	str	r3, [r7, #0]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&data, 4, I2C_COMM_TIMEOUT))
 8001baa:	88ba      	ldrh	r2, [r7, #4]
 8001bac:	88f9      	ldrh	r1, [r7, #6]
 8001bae:	2314      	movs	r3, #20
 8001bb0:	9302      	str	r3, [sp, #8]
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2310      	movs	r3, #16
 8001bbc:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <VL53L1_WrDWord+0x48>)
 8001bbe:	f000 ffdd 	bl	8002b7c <HAL_I2C_Mem_Write>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <VL53L1_WrDWord+0x3e>
		return VL53L1__IO_ERROR;
 8001bc8:	f06f 030c 	mvn.w	r3, #12
 8001bcc:	e000      	b.n	8001bd0 <VL53L1_WrDWord+0x40>
	else
		return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000088 	.word	0x20000088

08001bdc <VL53L1__Xshut>:
 * @brief 		set the VL53L1 Xshutdown pin
 * 				waiting for a complete boot sequence
 * @param 	1	VL53L1 enabled, wait for boot
 * 			0	VL53L1 disabled
 ****************************************************/
uint8_t VL53L1__Xshut(GPIO_HandlerStruct XShut, uint8_t level){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001bea:	4613      	mov	r3, r2
 8001bec:	71fb      	strb	r3, [r7, #7]
	uint8_t sensorStatus =0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75bb      	strb	r3, [r7, #22]
	uint8_t status =0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(XShut.Port, XShut.Pin, level);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	b291      	uxth	r1, r2
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fe5f 	bl	80028c2 <HAL_GPIO_WritePin>
	if (level) {
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d015      	beq.n	8001c36 <VL53L1__Xshut+0x5a>
		while (!(sensorStatus & 0x01)) {
 8001c0a:	e00f      	b.n	8001c2c <VL53L1__Xshut+0x50>
			HAL_Delay(2);
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f000 f9a7 	bl	8001f60 <HAL_Delay>
			status |= VL53L1X_BootState(VL53L1__ADDR, &sensorStatus);
 8001c12:	f107 0316 	add.w	r3, r7, #22
 8001c16:	4619      	mov	r1, r3
 8001c18:	2052      	movs	r0, #82	@ 0x52
 8001c1a:	f7ff fa59 	bl	80010d0 <VL53L1X_BootState>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	75fb      	strb	r3, [r7, #23]
		while (!(sensorStatus & 0x01)) {
 8001c2c:	7dbb      	ldrb	r3, [r7, #22]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ea      	beq.n	8001c0c <VL53L1__Xshut+0x30>
		}
	}
	return (status);
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <VL53L1__Init>:
 * 				test VL53L1 presence, initialize the sensor, and
 * 				set it the default Distance Mode, Timing Budget
 * 				and Intermeasurement time
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(uint8_t VL53L1_NEW_ADDR, GPIO_HandlerStruct XShut){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	e883 0006 	stmia.w	r3, {r1, r2}
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
	uint8_t refRegs[4] = {0,0,0,0};
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
	uint8_t status =0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	75fb      	strb	r3, [r7, #23]

	// Enable VL53L1 sensor waiting for a complete boot sequence
#ifdef	VL53L1__USING_XSHUT
	status |= VL53L1__Xshut(XShut, 1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c60:	f7ff ffbc 	bl	8001bdc <VL53L1__Xshut>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	75fb      	strb	r3, [r7, #23]
	if (status)
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <VL53L1__Init+0x38>
		return (status);
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	e075      	b.n	8001d64 <VL53L1__Init+0x124>
#endif
	HAL_Delay(4);
 8001c78:	2004      	movs	r0, #4
 8001c7a:	f000 f971 	bl	8001f60 <HAL_Delay>

	//check if VL53L1X is alive and kicking. Remove MASKREV if VL53L1
	VL53L1_ReadMulti(VL53L1__ADDR, VL53L1__MODELID_INDEX, refRegs, 4);
 8001c7e:	f107 0210 	add.w	r2, r7, #16
 8001c82:	2304      	movs	r3, #4
 8001c84:	f240 110f 	movw	r1, #271	@ 0x10f
 8001c88:	2052      	movs	r0, #82	@ 0x52
 8001c8a:	f7ff ff0f 	bl	8001aac <VL53L1_ReadMulti>
	if ((refRegs[0]!=VL53L1__MODELID_VALUE) || (refRegs[1]!=VL53L1__MODULETYPE_VALUE) || (refRegs[2]!=VL53L1__MASKREV_VALUE))
 8001c8e:	7c3b      	ldrb	r3, [r7, #16]
 8001c90:	2bea      	cmp	r3, #234	@ 0xea
 8001c92:	d105      	bne.n	8001ca0 <VL53L1__Init+0x60>
 8001c94:	7c7b      	ldrb	r3, [r7, #17]
 8001c96:	2bcc      	cmp	r3, #204	@ 0xcc
 8001c98:	d102      	bne.n	8001ca0 <VL53L1__Init+0x60>
 8001c9a:	7cbb      	ldrb	r3, [r7, #18]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d001      	beq.n	8001ca4 <VL53L1__Init+0x64>
		return (1);
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e05f      	b.n	8001d64 <VL53L1__Init+0x124>


	// VL53L1X sensor is available
	/* initializing: default setting  */
	status |= VL53L1X_SensorInit(VL53L1__ADDR);
 8001ca4:	2052      	movs	r0, #82	@ 0x52
 8001ca6:	f7fe fe5f 	bl	8000968 <VL53L1X_SensorInit>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	75fb      	strb	r3, [r7, #23]
	/* initializing: device calibration settings*/
	status |= VL53L1X_SetOffset(VL53L1__ADDR, VL53L1__CALIB_OFFSET);
 8001cb8:	f06f 0118 	mvn.w	r1, #24
 8001cbc:	2052      	movs	r0, #82	@ 0x52
 8001cbe:	f7ff fa71 	bl	80011a4 <VL53L1X_SetOffset>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetXtalk(VL53L1__ADDR, VL53L1__CALIB_XTALK);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2052      	movs	r0, #82	@ 0x52
 8001cd4:	f7ff fa9c 	bl	8001210 <VL53L1X_SetXtalk>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	75fb      	strb	r3, [r7, #23]
	/* initializing: project settings */
	status |= VL53L1X_SetDistanceMode(VL53L1__ADDR, VL53L1__DISTANCE_MODE);
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	2052      	movs	r0, #82	@ 0x52
 8001cea:	f7ff f8ed 	bl	8000ec8 <VL53L1X_SetDistanceMode>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetTimingBudgetInMs(VL53L1__ADDR, VL53L1__TIMING_BUDGET);
 8001cfc:	2114      	movs	r1, #20
 8001cfe:	2052      	movs	r0, #82	@ 0x52
 8001d00:	f7fe ff47 	bl	8000b92 <VL53L1X_SetTimingBudgetInMs>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetInterMeasurementInMs(VL53L1__ADDR, VL53L1__INTERMEASUREMENT);
 8001d12:	2119      	movs	r1, #25
 8001d14:	2052      	movs	r0, #82	@ 0x52
 8001d16:	f7ff f99f 	bl	8001058 <VL53L1X_SetInterMeasurementInMs>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b25b      	sxtb	r3, r3
 8001d26:	75fb      	strb	r3, [r7, #23]
	status |= VL53L1X_SetDistanceThreshold(VL53L1__ADDR,VL53L1__LOWER_THRESHOLD, VL53L1__UPPER_THRESHOLD, VL53L1__WINDOW_MODE, 0);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001d36:	2052      	movs	r0, #82	@ 0x52
 8001d38:	f7ff faa6 	bl	8001288 <VL53L1X_SetDistanceThreshold>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	75fb      	strb	r3, [r7, #23]

	status |= VL53L1X_SetI2CAddress(VL53L1__ADDR, VL53L1_NEW_ADDR);
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	2052      	movs	r0, #82	@ 0x52
 8001d50:	f7fe fdec 	bl	800092c <VL53L1X_SetI2CAddress>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	75fb      	strb	r3, [r7, #23]
	return (status);
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
};
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <VL53L1__GetDistance>:
 * @param	level	minimum value that RangeStatus must have
 * 					to consider wreading accepted
 * @return			0 		if errors or not accepptable reading
 * 					value	the read Distance, if not 0
 *****************************************/
uint8_t VL53L1__GetDistance(uint8_t __ADDR, GPIO_HandlerStruct GPIO1, uint16_t *Distance){
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4604      	mov	r4, r0
 8001d74:	1d38      	adds	r0, r7, #4
 8001d76:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	73fb      	strb	r3, [r7, #15]
	uint8_t RangingStatus;
	uint8_t status =0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	77fb      	strb	r3, [r7, #31]
	uint32_t testingTime=HAL_GetTick();
 8001d84:	f000 f8e2 	bl	8001f4c <HAL_GetTick>
 8001d88:	61b8      	str	r0, [r7, #24]
	static uint16_t PrevDistance=0;

#ifdef	VL53L1__USING_GPIO
	// VL53L1X data available test if TOF_GPIO pin is available
	while ((!HAL_GPIO_ReadPin(GPIO1.Port, GPIO1.Pin)) && ((HAL_GetTick()-testingTime)<=VL53L1__INTERMEASUREMENT)) {};
 8001d8a:	bf00      	nop
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	b292      	uxth	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fd7d 	bl	8002894 <HAL_GPIO_ReadPin>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <VL53L1__GetDistance+0x42>
 8001da0:	f000 f8d4 	bl	8001f4c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b19      	cmp	r3, #25
 8001dac:	d9ee      	bls.n	8001d8c <VL53L1__GetDistance+0x20>
	if (HAL_GPIO_ReadPin(GPIO1.Port, GPIO1.Pin)) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	b292      	uxth	r2, r2
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fd6c 	bl	8002894 <HAL_GPIO_ReadPin>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d039      	beq.n	8001e36 <VL53L1__GetDistance+0xca>
	uint8_t dataReady=0;
	while ((dataReady == 0) && ((HAL_GetTick()-testingTime)<VL53L1__INTERMEASUREMENT) && (!status))
		status |= VL53L1X_CheckForDataReady(__ADDR, &dataReady);
	if (dataReady && (!status)) {
#endif
		status |= VL53L1X_GetRangeStatus(__ADDR, &RangingStatus);
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	f107 0217 	add.w	r2, r7, #23
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f9bb 	bl	8001148 <VL53L1X_GetRangeStatus>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	77fb      	strb	r3, [r7, #31]
		status |= VL53L1X_GetDistance(__ADDR, Distance);
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f991 	bl	800110e <VL53L1X_GetDistance>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	77fb      	strb	r3, [r7, #31]
		status |= VL53L1X_ClearInterrupt(__ADDR);
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fe1e 	bl	8000a40 <VL53L1X_ClearInterrupt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	77fb      	strb	r3, [r7, #31]
		if ((status==0) && (RangingStatus<=VL53L1__RANGE_STATUS_THRESH)) {
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <VL53L1__GetDistance+0xbc>
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d804      	bhi.n	8001e28 <VL53L1__GetDistance+0xbc>
			PrevDistance=*Distance;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <VL53L1__GetDistance+0xe0>)
 8001e24:	801a      	strh	r2, [r3, #0]
 8001e26:	e00c      	b.n	8001e42 <VL53L1__GetDistance+0xd6>
		} else {
			*Distance=PrevDistance;
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <VL53L1__GetDistance+0xe0>)
 8001e2a:	881a      	ldrh	r2, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	801a      	strh	r2, [r3, #0]
			status=1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	77fb      	strb	r3, [r7, #31]
 8001e34:	e005      	b.n	8001e42 <VL53L1__GetDistance+0xd6>
		}
	} else{
		*Distance=PrevDistance;
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <VL53L1__GetDistance+0xe0>)
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	801a      	strh	r2, [r3, #0]
		status=1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	77fb      	strb	r3, [r7, #31]
	}
	return status;
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3724      	adds	r7, #36	@ 0x24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	20000134 	.word	0x20000134

08001e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff fdd8 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480b      	ldr	r0, [pc, #44]	@ (8001e84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e56:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e58:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e6c:	4c09      	ldr	r4, [pc, #36]	@ (8001e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f002 fbdd 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e7e:	f7ff fb13 	bl	80014a8 <main>
  bx lr
 8001e82:	4770      	bx	lr
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001e8c:	08004754 	.word	0x08004754
  ldr r2, =_sbss
 8001e90:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001e94:	2000013c 	.word	0x2000013c

08001e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_2_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <HAL_Init+0x28>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	@ (8001ec4 <HAL_Init+0x28>)
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 fb39 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fc70 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fb43 	bl	8002572 <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 fb19 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000038 	.word	0x20000038
 8001f20:	20000040 	.word	0x20000040
 8001f24:	2000003c 	.word	0x2000003c

08001f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_IncTick+0x1c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a03      	ldr	r2, [pc, #12]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000040 	.word	0x20000040
 8001f48:	20000138 	.word	0x20000138

08001f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b02      	ldr	r3, [pc, #8]	@ (8001f5c <HAL_GetTick+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000138 	.word	0x20000138

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f86:	bf00      	nop
 8001f88:	f7ff ffe0 	bl	8001f4c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000040 	.word	0x20000040

08001fa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0ed      	b.n	8002196 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fc1a 	bl	8001800 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fdc:	f7ff ffb6 	bl	8001f4c <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fe2:	e012      	b.n	800200a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe4:	f7ff ffb2 	bl	8001f4c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b0a      	cmp	r3, #10
 8001ff0:	d90b      	bls.n	800200a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2205      	movs	r2, #5
 8002002:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0c5      	b.n	8002196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0e5      	beq.n	8001fe4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0202 	bic.w	r2, r2, #2
 8002026:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002028:	f7ff ff90 	bl	8001f4c <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800202e:	e012      	b.n	8002056 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002030:	f7ff ff8c 	bl	8001f4c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b0a      	cmp	r3, #10
 800203c:	d90b      	bls.n	8002056 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2205      	movs	r2, #5
 800204e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e09f      	b.n	8002196 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e5      	bne.n	8002030 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	7e1b      	ldrb	r3, [r3, #24]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d108      	bne.n	800207e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e007      	b.n	800208e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7e5b      	ldrb	r3, [r3, #25]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d108      	bne.n	80020a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e007      	b.n	80020b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7e9b      	ldrb	r3, [r3, #26]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d108      	bne.n	80020d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0220 	orr.w	r2, r2, #32
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e007      	b.n	80020e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0220 	bic.w	r2, r2, #32
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7edb      	ldrb	r3, [r3, #27]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d108      	bne.n	80020fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0210 	bic.w	r2, r2, #16
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e007      	b.n	800210c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0210 	orr.w	r2, r2, #16
 800210a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7f1b      	ldrb	r3, [r3, #28]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0208 	orr.w	r2, r2, #8
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0208 	bic.w	r2, r2, #8
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7f5b      	ldrb	r3, [r3, #29]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d108      	bne.n	8002150 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0204 	orr.w	r2, r2, #4
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e007      	b.n	8002160 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	ea42 0103 	orr.w	r1, r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d12e      	bne.n	8002210 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ca:	f7ff febf 	bl	8001f4c <HAL_GetTick>
 80021ce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021d0:	e012      	b.n	80021f8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d2:	f7ff febb 	bl	8001f4c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b0a      	cmp	r3, #10
 80021de:	d90b      	bls.n	80021f8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2205      	movs	r2, #5
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e012      	b.n	800221e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e5      	bne.n	80021d2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e006      	b.n	800221e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002226:	b480      	push	{r7}
 8002228:	b089      	sub	sp, #36	@ 0x24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002244:	7ffb      	ldrb	r3, [r7, #31]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d003      	beq.n	8002252 <HAL_CAN_AddTxMessage+0x2c>
 800224a:	7ffb      	ldrb	r3, [r7, #31]
 800224c:	2b02      	cmp	r3, #2
 800224e:	f040 80ad 	bne.w	80023ac <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8095 	beq.w	800239c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	0e1b      	lsrs	r3, r3, #24
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800227c:	2201      	movs	r2, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	409a      	lsls	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10d      	bne.n	80022aa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	6809      	ldr	r1, [r1, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3318      	adds	r3, #24
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	440b      	add	r3, r1
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e00f      	b.n	80022ca <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80022be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3318      	adds	r3, #24
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	440b      	add	r3, r1
 80022c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3318      	adds	r3, #24
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	440b      	add	r3, r1
 80022da:	3304      	adds	r3, #4
 80022dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	7d1b      	ldrb	r3, [r3, #20]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d111      	bne.n	800230a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3318      	adds	r3, #24
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	4413      	add	r3, r2
 80022f2:	3304      	adds	r3, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6811      	ldr	r1, [r2, #0]
 80022fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3318      	adds	r3, #24
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	440b      	add	r3, r1
 8002306:	3304      	adds	r3, #4
 8002308:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3307      	adds	r3, #7
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	061a      	lsls	r2, r3, #24
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3306      	adds	r3, #6
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3305      	adds	r3, #5
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	4313      	orrs	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	3204      	adds	r2, #4
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	4610      	mov	r0, r2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	6811      	ldr	r1, [r2, #0]
 8002332:	ea43 0200 	orr.w	r2, r3, r0
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	440b      	add	r3, r1
 800233c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002340:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3303      	adds	r3, #3
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	061a      	lsls	r2, r3, #24
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3302      	adds	r3, #2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3301      	adds	r3, #1
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4313      	orrs	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	4610      	mov	r0, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	6811      	ldr	r1, [r2, #0]
 8002368:	ea43 0200 	orr.w	r2, r3, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	440b      	add	r3, r1
 8002372:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002376:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3318      	adds	r3, #24
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6811      	ldr	r1, [r2, #0]
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3318      	adds	r3, #24
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	440b      	add	r3, r1
 8002396:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e00e      	b.n	80023ba <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e006      	b.n	80023ba <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	@ (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	@ (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	@ (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	@ 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff90 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff49 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff5e 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff90 	bl	800247c <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5f 	bl	8002428 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffb0 	bl	80024e0 <SysTick_Config>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b08b      	sub	sp, #44	@ 0x2c
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	e169      	b.n	8002874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025a0:	2201      	movs	r2, #1
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f040 8158 	bne.w	800286e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a9a      	ldr	r2, [pc, #616]	@ (800282c <HAL_GPIO_Init+0x2a0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d05e      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025c8:	4a98      	ldr	r2, [pc, #608]	@ (800282c <HAL_GPIO_Init+0x2a0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d875      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025ce:	4a98      	ldr	r2, [pc, #608]	@ (8002830 <HAL_GPIO_Init+0x2a4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d058      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025d4:	4a96      	ldr	r2, [pc, #600]	@ (8002830 <HAL_GPIO_Init+0x2a4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d86f      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025da:	4a96      	ldr	r2, [pc, #600]	@ (8002834 <HAL_GPIO_Init+0x2a8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d052      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025e0:	4a94      	ldr	r2, [pc, #592]	@ (8002834 <HAL_GPIO_Init+0x2a8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d869      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025e6:	4a94      	ldr	r2, [pc, #592]	@ (8002838 <HAL_GPIO_Init+0x2ac>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d04c      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025ec:	4a92      	ldr	r2, [pc, #584]	@ (8002838 <HAL_GPIO_Init+0x2ac>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d863      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025f2:	4a92      	ldr	r2, [pc, #584]	@ (800283c <HAL_GPIO_Init+0x2b0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d046      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
 80025f8:	4a90      	ldr	r2, [pc, #576]	@ (800283c <HAL_GPIO_Init+0x2b0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d85d      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d82a      	bhi.n	8002658 <HAL_GPIO_Init+0xcc>
 8002602:	2b12      	cmp	r3, #18
 8002604:	d859      	bhi.n	80026ba <HAL_GPIO_Init+0x12e>
 8002606:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <HAL_GPIO_Init+0x80>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	08002687 	.word	0x08002687
 8002610:	08002661 	.word	0x08002661
 8002614:	08002673 	.word	0x08002673
 8002618:	080026b5 	.word	0x080026b5
 800261c:	080026bb 	.word	0x080026bb
 8002620:	080026bb 	.word	0x080026bb
 8002624:	080026bb 	.word	0x080026bb
 8002628:	080026bb 	.word	0x080026bb
 800262c:	080026bb 	.word	0x080026bb
 8002630:	080026bb 	.word	0x080026bb
 8002634:	080026bb 	.word	0x080026bb
 8002638:	080026bb 	.word	0x080026bb
 800263c:	080026bb 	.word	0x080026bb
 8002640:	080026bb 	.word	0x080026bb
 8002644:	080026bb 	.word	0x080026bb
 8002648:	080026bb 	.word	0x080026bb
 800264c:	080026bb 	.word	0x080026bb
 8002650:	08002669 	.word	0x08002669
 8002654:	0800267d 	.word	0x0800267d
 8002658:	4a79      	ldr	r2, [pc, #484]	@ (8002840 <HAL_GPIO_Init+0x2b4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800265e:	e02c      	b.n	80026ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	623b      	str	r3, [r7, #32]
          break;
 8002666:	e029      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	3304      	adds	r3, #4
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e024      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	3308      	adds	r3, #8
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e01f      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	330c      	adds	r3, #12
 8002682:	623b      	str	r3, [r7, #32]
          break;
 8002684:	e01a      	b.n	80026bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800268e:	2304      	movs	r3, #4
 8002690:	623b      	str	r3, [r7, #32]
          break;
 8002692:	e013      	b.n	80026bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800269c:	2308      	movs	r3, #8
 800269e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	611a      	str	r2, [r3, #16]
          break;
 80026a6:	e009      	b.n	80026bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	615a      	str	r2, [r3, #20]
          break;
 80026b2:	e003      	b.n	80026bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
          break;
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x130>
          break;
 80026ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2bff      	cmp	r3, #255	@ 0xff
 80026c0:	d801      	bhi.n	80026c6 <HAL_GPIO_Init+0x13a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	e001      	b.n	80026ca <HAL_GPIO_Init+0x13e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2bff      	cmp	r3, #255	@ 0xff
 80026d0:	d802      	bhi.n	80026d8 <HAL_GPIO_Init+0x14c>
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	e002      	b.n	80026de <HAL_GPIO_Init+0x152>
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	3b08      	subs	r3, #8
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	210f      	movs	r1, #15
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	6a39      	ldr	r1, [r7, #32]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80b1 	beq.w	800286e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800270c:	4b4d      	ldr	r3, [pc, #308]	@ (8002844 <HAL_GPIO_Init+0x2b8>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a4c      	ldr	r2, [pc, #304]	@ (8002844 <HAL_GPIO_Init+0x2b8>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b4a      	ldr	r3, [pc, #296]	@ (8002844 <HAL_GPIO_Init+0x2b8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002724:	4a48      	ldr	r2, [pc, #288]	@ (8002848 <HAL_GPIO_Init+0x2bc>)
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a40      	ldr	r2, [pc, #256]	@ (800284c <HAL_GPIO_Init+0x2c0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_GPIO_Init+0x1ec>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3f      	ldr	r2, [pc, #252]	@ (8002850 <HAL_GPIO_Init+0x2c4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00d      	beq.n	8002774 <HAL_GPIO_Init+0x1e8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3e      	ldr	r2, [pc, #248]	@ (8002854 <HAL_GPIO_Init+0x2c8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <HAL_GPIO_Init+0x1e4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3d      	ldr	r2, [pc, #244]	@ (8002858 <HAL_GPIO_Init+0x2cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_GPIO_Init+0x1e0>
 8002768:	2303      	movs	r3, #3
 800276a:	e006      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 800276c:	2304      	movs	r3, #4
 800276e:	e004      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 8002770:	2302      	movs	r3, #2
 8002772:	e002      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_GPIO_Init+0x1ee>
 8002778:	2300      	movs	r3, #0
 800277a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277c:	f002 0203 	and.w	r2, r2, #3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4093      	lsls	r3, r2
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800278a:	492f      	ldr	r1, [pc, #188]	@ (8002848 <HAL_GPIO_Init+0x2bc>)
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027a4:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	492c      	ldr	r1, [pc, #176]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4928      	ldr	r1, [pc, #160]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027bc:	4013      	ands	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	4922      	ldr	r1, [pc, #136]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	491e      	ldr	r1, [pc, #120]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4918      	ldr	r1, [pc, #96]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002802:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	43db      	mvns	r3, r3
 800280a:	4914      	ldr	r1, [pc, #80]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 800280c:	4013      	ands	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d021      	beq.n	8002860 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	490e      	ldr	r1, [pc, #56]	@ (800285c <HAL_GPIO_Init+0x2d0>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
 8002828:	e021      	b.n	800286e <HAL_GPIO_Init+0x2e2>
 800282a:	bf00      	nop
 800282c:	10320000 	.word	0x10320000
 8002830:	10310000 	.word	0x10310000
 8002834:	10220000 	.word	0x10220000
 8002838:	10210000 	.word	0x10210000
 800283c:	10120000 	.word	0x10120000
 8002840:	10110000 	.word	0x10110000
 8002844:	40021000 	.word	0x40021000
 8002848:	40010000 	.word	0x40010000
 800284c:	40010800 	.word	0x40010800
 8002850:	40010c00 	.word	0x40010c00
 8002854:	40011000 	.word	0x40011000
 8002858:	40011400 	.word	0x40011400
 800285c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_GPIO_Init+0x304>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	43db      	mvns	r3, r3
 8002868:	4909      	ldr	r1, [pc, #36]	@ (8002890 <HAL_GPIO_Init+0x304>)
 800286a:	4013      	ands	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	3301      	adds	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	f47f ae8e 	bne.w	80025a0 <HAL_GPIO_Init+0x14>
  }
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	372c      	adds	r7, #44	@ 0x2c
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40010400 	.word	0x40010400

08002894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
 80028b0:	e001      	b.n	80028b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	807b      	strh	r3, [r7, #2]
 80028ce:	4613      	mov	r3, r2
 80028d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d2:	787b      	ldrb	r3, [r7, #1]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d8:	887a      	ldrh	r2, [r7, #2]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028de:	e003      	b.n	80028e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	041a      	lsls	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e12b      	b.n	8002b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe ffbc 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	@ 0x24
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002958:	f001 fbfc 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 800295c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4a81      	ldr	r2, [pc, #516]	@ (8002b68 <HAL_I2C_Init+0x274>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d807      	bhi.n	8002978 <HAL_I2C_Init+0x84>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a80      	ldr	r2, [pc, #512]	@ (8002b6c <HAL_I2C_Init+0x278>)
 800296c:	4293      	cmp	r3, r2
 800296e:	bf94      	ite	ls
 8002970:	2301      	movls	r3, #1
 8002972:	2300      	movhi	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e006      	b.n	8002986 <HAL_I2C_Init+0x92>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b70 <HAL_I2C_Init+0x27c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	bf94      	ite	ls
 8002980:	2301      	movls	r3, #1
 8002982:	2300      	movhi	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0e7      	b.n	8002b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a78      	ldr	r2, [pc, #480]	@ (8002b74 <HAL_I2C_Init+0x280>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9b      	lsrs	r3, r3, #18
 8002998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002b68 <HAL_I2C_Init+0x274>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d802      	bhi.n	80029c8 <HAL_I2C_Init+0xd4>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3301      	adds	r3, #1
 80029c6:	e009      	b.n	80029dc <HAL_I2C_Init+0xe8>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	4a69      	ldr	r2, [pc, #420]	@ (8002b78 <HAL_I2C_Init+0x284>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	3301      	adds	r3, #1
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	495c      	ldr	r1, [pc, #368]	@ (8002b68 <HAL_I2C_Init+0x274>)
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d819      	bhi.n	8002a30 <HAL_I2C_Init+0x13c>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e59      	subs	r1, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a10:	400b      	ands	r3, r1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_I2C_Init+0x138>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e59      	subs	r1, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a24:	3301      	adds	r3, #1
 8002a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2a:	e051      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e04f      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <HAL_I2C_Init+0x168>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	440b      	add	r3, r1
 8002a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e012      	b.n	8002a82 <HAL_I2C_Init+0x18e>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	0099      	lsls	r1, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Init+0x196>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e022      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10e      	bne.n	8002ab0 <HAL_I2C_Init+0x1bc>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1e58      	subs	r0, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	440b      	add	r3, r1
 8002aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aae:	e00f      	b.n	8002ad0 <HAL_I2C_Init+0x1dc>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e58      	subs	r0, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	0099      	lsls	r1, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	6809      	ldr	r1, [r1, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002afe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6911      	ldr	r1, [r2, #16]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68d2      	ldr	r2, [r2, #12]
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	000186a0 	.word	0x000186a0
 8002b6c:	001e847f 	.word	0x001e847f
 8002b70:	003d08ff 	.word	0x003d08ff
 8002b74:	431bde83 	.word	0x431bde83
 8002b78:	10624dd3 	.word	0x10624dd3

08002b7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	817b      	strh	r3, [r7, #10]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	813b      	strh	r3, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b96:	f7ff f9d9 	bl	8001f4c <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	f040 80d9 	bne.w	8002d5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2319      	movs	r3, #25
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	496d      	ldr	r1, [pc, #436]	@ (8002d68 <HAL_I2C_Mem_Write+0x1ec>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fccd 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0cc      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Mem_Write+0x56>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0c5      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d007      	beq.n	8002bf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2221      	movs	r2, #33	@ 0x21
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2240      	movs	r2, #64	@ 0x40
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a4d      	ldr	r2, [pc, #308]	@ (8002d6c <HAL_I2C_Mem_Write+0x1f0>)
 8002c38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c3a:	88f8      	ldrh	r0, [r7, #6]
 8002c3c:	893a      	ldrh	r2, [r7, #8]
 8002c3e:	8979      	ldrh	r1, [r7, #10]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fb04 	bl	8003258 <I2C_RequestMemoryWrite>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d052      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e081      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fd92 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d107      	bne.n	8002c82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06b      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11b      	bne.n	8002cfc <HAL_I2C_Mem_Write+0x180>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d017      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1aa      	bne.n	8002c5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fd85 	bl	8003818 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00d      	beq.n	8002d30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d107      	bne.n	8002d2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e016      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	00100002 	.word	0x00100002
 8002d6c:	ffff0000 	.word	0xffff0000

08002d70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	@ 0x30
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d8e:	f7ff f8dd 	bl	8001f4c <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	f040 8250 	bne.w	8003242 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2319      	movs	r3, #25
 8002da8:	2201      	movs	r2, #1
 8002daa:	4982      	ldr	r1, [pc, #520]	@ (8002fb4 <HAL_I2C_Mem_Read+0x244>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fbd1 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
 8002dba:	e243      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Mem_Read+0x5a>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e23c      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d007      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2222      	movs	r2, #34	@ 0x22
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2240      	movs	r2, #64	@ 0x40
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a62      	ldr	r2, [pc, #392]	@ (8002fb8 <HAL_I2C_Mem_Read+0x248>)
 8002e30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e32:	88f8      	ldrh	r0, [r7, #6]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4603      	mov	r3, r0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa9e 	bl	8003384 <I2C_RequestMemoryRead>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1f8      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d113      	bne.n	8002e82 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e1cc      	b.n	800321c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d11e      	bne.n	8002ec8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9a:	b672      	cpsid	i
}
 8002e9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ec4:	b662      	cpsie	i
}
 8002ec6:	e035      	b.n	8002f34 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11e      	bne.n	8002f0e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ede:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
}
 8002ee2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f0a:	b662      	cpsie	i
}
 8002f0c:	e012      	b.n	8002f34 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f1c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f34:	e172      	b.n	800321c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	f200 811f 	bhi.w	800317e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d123      	bne.n	8002f90 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fcab 	bl	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e173      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f8e:	e145      	b.n	800321c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d152      	bne.n	800303e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4906      	ldr	r1, [pc, #24]	@ (8002fbc <HAL_I2C_Mem_Read+0x24c>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fad6 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e148      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
 8002fb2:	bf00      	nop
 8002fb4:	00100002 	.word	0x00100002
 8002fb8:	ffff0000 	.word	0xffff0000
 8002fbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc0:	b672      	cpsid	i
}
 8002fc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003006:	b662      	cpsie	i
}
 8003008:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800303c:	e0ee      	b.n	800321c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003044:	2200      	movs	r2, #0
 8003046:	4981      	ldr	r1, [pc, #516]	@ (800324c <HAL_I2C_Mem_Read+0x4dc>)
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fa83 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0f5      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800309e:	4b6c      	ldr	r3, [pc, #432]	@ (8003250 <HAL_I2C_Mem_Read+0x4e0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	08db      	lsrs	r3, r3, #3
 80030a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003254 <HAL_I2C_Mem_Read+0x4e4>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0a1a      	lsrs	r2, r3, #8
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00da      	lsls	r2, r3, #3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d118      	bne.n	80030f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030e6:	b662      	cpsie	i
}
 80030e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0a6      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d1d9      	bne.n	80030b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003146:	b662      	cpsie	i
}
 8003148:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800317c:	e04e      	b.n	800321c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003180:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fb90 	bl	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e058      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d124      	bne.n	800321c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d107      	bne.n	80031ea <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	f47f ae88 	bne.w	8002f36 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3728      	adds	r7, #40	@ 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	00010004 	.word	0x00010004
 8003250:	20000038 	.word	0x20000038
 8003254:	14f8b589 	.word	0x14f8b589

08003258 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	4608      	mov	r0, r1
 8003262:	4611      	mov	r1, r2
 8003264:	461a      	mov	r2, r3
 8003266:	4603      	mov	r3, r0
 8003268:	817b      	strh	r3, [r7, #10]
 800326a:	460b      	mov	r3, r1
 800326c:	813b      	strh	r3, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003280:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2200      	movs	r2, #0
 800328a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f960 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a8:	d103      	bne.n	80032b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e05f      	b.n	8003376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	492d      	ldr	r1, [pc, #180]	@ (8003380 <I2C_RequestMemoryWrite+0x128>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f9bb 	bl	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e04c      	b.n	8003376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa46 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003318:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e02b      	b.n	8003376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003324:	893b      	ldrh	r3, [r7, #8]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	e021      	b.n	8003374 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b29b      	uxth	r3, r3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fa20 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	2b04      	cmp	r3, #4
 8003354:	d107      	bne.n	8003366 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003364:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e005      	b.n	8003376 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00010002 	.word	0x00010002

08003384 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	461a      	mov	r2, r3
 8003392:	4603      	mov	r3, r0
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	460b      	mov	r3, r1
 8003398:	813b      	strh	r3, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8c2 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e4:	d103      	bne.n	80033ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0aa      	b.n	8003548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033f2:	897b      	ldrh	r3, [r7, #10]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003400:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	6a3a      	ldr	r2, [r7, #32]
 8003406:	4952      	ldr	r1, [pc, #328]	@ (8003550 <I2C_RequestMemoryRead+0x1cc>)
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f91d 	bl	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e097      	b.n	8003548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003430:	6a39      	ldr	r1, [r7, #32]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f9a8 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	2b04      	cmp	r3, #4
 8003444:	d107      	bne.n	8003456 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003454:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e076      	b.n	8003548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003460:	893b      	ldrh	r3, [r7, #8]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]
 800346a:	e021      	b.n	80034b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800346c:	893b      	ldrh	r3, [r7, #8]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	b29b      	uxth	r3, r3
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347c:	6a39      	ldr	r1, [r7, #32]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f982 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e050      	b.n	8003548 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034a6:	893b      	ldrh	r3, [r7, #8]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b2:	6a39      	ldr	r1, [r7, #32]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f967 	bl	8003788 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d107      	bne.n	80034d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e035      	b.n	8003548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f82b 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003512:	d103      	bne.n	800351c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e013      	b.n	8003548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003520:	897b      	ldrh	r3, [r7, #10]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	4906      	ldr	r1, [pc, #24]	@ (8003550 <I2C_RequestMemoryRead+0x1cc>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f886 	bl	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	00010002 	.word	0x00010002

08003554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003564:	e048      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d044      	beq.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fe fced 	bl	8001f4c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d139      	bne.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d10d      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	43da      	mvns	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	e00c      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	43da      	mvns	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d116      	bne.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e023      	b.n	8003640 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10d      	bne.n	800361e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	e00c      	b.n	8003638 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	d093      	beq.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003656:	e071      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003666:	d123      	bne.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e067      	b.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b6:	d041      	beq.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fe fc48 	bl	8001f4c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d136      	bne.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10c      	bne.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bf14      	ite	ne
 80036ea:	2301      	movne	r3, #1
 80036ec:	2300      	moveq	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	e00b      	b.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e021      	b.n	8003780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10c      	bne.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	43da      	mvns	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4013      	ands	r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf14      	ite	ne
 8003758:	2301      	movne	r3, #1
 800375a:	2300      	moveq	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e00b      	b.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	f47f af6d 	bne.w	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003794:	e034      	b.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8e3 	bl	8003962 <I2C_IsAcknowledgeFailed>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e034      	b.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d028      	beq.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7fe fbcd 	bl	8001f4c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d11d      	bne.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b80      	cmp	r3, #128	@ 0x80
 80037d0:	d016      	beq.n	8003800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e007      	b.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	2b80      	cmp	r3, #128	@ 0x80
 800380c:	d1c3      	bne.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003824:	e034      	b.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f89b 	bl	8003962 <I2C_IsAcknowledgeFailed>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e034      	b.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d028      	beq.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe fb85 	bl	8001f4c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b04      	cmp	r3, #4
 8003860:	d016      	beq.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e007      	b.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b04      	cmp	r3, #4
 800389c:	d1c3      	bne.n	8003826 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b4:	e049      	b.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d119      	bne.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0210 	mvn.w	r2, #16
 80038cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e030      	b.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f8:	f7fe fb28 	bl	8001f4c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	d302      	bcc.n	800390e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11d      	bne.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003918:	2b40      	cmp	r3, #64	@ 0x40
 800391a:	d016      	beq.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e007      	b.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	d1ae      	bne.n	80038b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003978:	d11b      	bne.n	80039b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003982:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	f043 0204 	orr.w	r2, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e272      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8087 	beq.w	8003aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039e0:	4b92      	ldr	r3, [pc, #584]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d00c      	beq.n	8003a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039ec:	4b8f      	ldr	r3, [pc, #572]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d112      	bne.n	8003a1e <HAL_RCC_OscConfig+0x5e>
 80039f8:	4b8c      	ldr	r3, [pc, #560]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a04:	d10b      	bne.n	8003a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a06:	4b89      	ldr	r3, [pc, #548]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d06c      	beq.n	8003aec <HAL_RCC_OscConfig+0x12c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d168      	bne.n	8003aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e24c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x76>
 8003a28:	4b80      	ldr	r3, [pc, #512]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a7f      	ldr	r2, [pc, #508]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	e02e      	b.n	8003a94 <HAL_RCC_OscConfig+0xd4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x98>
 8003a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7a      	ldr	r2, [pc, #488]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b78      	ldr	r3, [pc, #480]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a77      	ldr	r2, [pc, #476]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e01d      	b.n	8003a94 <HAL_RCC_OscConfig+0xd4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0xbc>
 8003a62:	4b72      	ldr	r3, [pc, #456]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a71      	ldr	r2, [pc, #452]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6e      	ldr	r2, [pc, #440]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0xd4>
 8003a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6a      	ldr	r2, [pc, #424]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b68      	ldr	r3, [pc, #416]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a67      	ldr	r2, [pc, #412]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fa56 	bl	8001f4c <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fa52 	bl	8001f4c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	@ 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e200      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xe4>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fa42 	bl	8001f4c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fe fa3e 	bl	8001f4c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	@ 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1ec      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b53      	ldr	r3, [pc, #332]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x10c>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003afa:	4b4c      	ldr	r3, [pc, #304]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b06:	4b49      	ldr	r3, [pc, #292]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x18c>
 8003b12:	4b46      	ldr	r3, [pc, #280]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	4b43      	ldr	r3, [pc, #268]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x176>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1c0      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b3d      	ldr	r3, [pc, #244]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4939      	ldr	r1, [pc, #228]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e03a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b54:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fe f9f7 	bl	8001f4c <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b62:	f7fe f9f3 	bl	8001f4c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1a1      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	4b2d      	ldr	r3, [pc, #180]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b2a      	ldr	r3, [pc, #168]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4927      	ldr	r1, [pc, #156]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b26      	ldr	r3, [pc, #152]	@ (8003c30 <HAL_RCC_OscConfig+0x270>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe f9d6 	bl	8001f4c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe f9d2 	bl	8001f4c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e180      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d03a      	beq.n	8003c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d019      	beq.n	8003c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b17      	ldr	r3, [pc, #92]	@ (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bdc:	f7fe f9b6 	bl	8001f4c <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fe f9b2 	bl	8001f4c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e160      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c02:	2001      	movs	r0, #1
 8003c04:	f000 face 	bl	80041a4 <RCC_Delay>
 8003c08:	e01c      	b.n	8003c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c10:	f7fe f99c 	bl	8001f4c <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c16:	e00f      	b.n	8003c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fe f998 	bl	8001f4c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d908      	bls.n	8003c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e146      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	42420000 	.word	0x42420000
 8003c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b92      	ldr	r3, [pc, #584]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e9      	bne.n	8003c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a6 	beq.w	8003d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b8b      	ldr	r3, [pc, #556]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10d      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	4b88      	ldr	r3, [pc, #544]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4a87      	ldr	r2, [pc, #540]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	61d3      	str	r3, [r2, #28]
 8003c6e:	4b85      	ldr	r3, [pc, #532]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	4b82      	ldr	r3, [pc, #520]	@ (8003e88 <HAL_RCC_OscConfig+0x4c8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d118      	bne.n	8003cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e88 <HAL_RCC_OscConfig+0x4c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e88 <HAL_RCC_OscConfig+0x4c8>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7fe f959 	bl	8001f4c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9e:	f7fe f955 	bl	8001f4c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	@ 0x64
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e103      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	4b75      	ldr	r3, [pc, #468]	@ (8003e88 <HAL_RCC_OscConfig+0x4c8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x312>
 8003cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6213      	str	r3, [r2, #32]
 8003cd0:	e02d      	b.n	8003d2e <HAL_RCC_OscConfig+0x36e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x334>
 8003cda:	4b6a      	ldr	r3, [pc, #424]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4a69      	ldr	r2, [pc, #420]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	6213      	str	r3, [r2, #32]
 8003ce6:	4b67      	ldr	r3, [pc, #412]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4a66      	ldr	r2, [pc, #408]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	6213      	str	r3, [r2, #32]
 8003cf2:	e01c      	b.n	8003d2e <HAL_RCC_OscConfig+0x36e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d10c      	bne.n	8003d16 <HAL_RCC_OscConfig+0x356>
 8003cfc:	4b61      	ldr	r3, [pc, #388]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4a60      	ldr	r2, [pc, #384]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	6213      	str	r3, [r2, #32]
 8003d08:	4b5e      	ldr	r3, [pc, #376]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6213      	str	r3, [r2, #32]
 8003d14:	e00b      	b.n	8003d2e <HAL_RCC_OscConfig+0x36e>
 8003d16:	4b5b      	ldr	r3, [pc, #364]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6213      	str	r3, [r2, #32]
 8003d22:	4b58      	ldr	r3, [pc, #352]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a57      	ldr	r2, [pc, #348]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d015      	beq.n	8003d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fe f909 	bl	8001f4c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe f905 	bl	8001f4c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0b1      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	4b4b      	ldr	r3, [pc, #300]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ee      	beq.n	8003d3e <HAL_RCC_OscConfig+0x37e>
 8003d60:	e014      	b.n	8003d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d62:	f7fe f8f3 	bl	8001f4c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fe f8ef 	bl	8001f4c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e09b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d80:	4b40      	ldr	r3, [pc, #256]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ee      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4b3c      	ldr	r3, [pc, #240]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	4a3b      	ldr	r2, [pc, #236]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8087 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da8:	4b36      	ldr	r3, [pc, #216]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d061      	beq.n	8003e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d146      	bne.n	8003e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbc:	4b33      	ldr	r3, [pc, #204]	@ (8003e8c <HAL_RCC_OscConfig+0x4cc>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fe f8c3 	bl	8001f4c <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fe f8bf 	bl	8001f4c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e06d      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ddc:	4b29      	ldr	r3, [pc, #164]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f0      	bne.n	8003dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df0:	d108      	bne.n	8003e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003df2:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4921      	ldr	r1, [pc, #132]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e04:	4b1f      	ldr	r3, [pc, #124]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a19      	ldr	r1, [r3, #32]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	430b      	orrs	r3, r1
 8003e16:	491b      	ldr	r1, [pc, #108]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x4cc>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e22:	f7fe f893 	bl	8001f4c <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7fe f88f 	bl	8001f4c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e03d      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e3c:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x46a>
 8003e48:	e035      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe f87c 	bl	8001f4c <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fe f878 	bl	8001f4c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e026      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x498>
 8003e76:	e01e      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e019      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_OscConfig+0x500>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0d0      	b.n	800407a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d910      	bls.n	8003f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b67      	ldr	r3, [pc, #412]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	4965      	ldr	r1, [pc, #404]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b63      	ldr	r3, [pc, #396]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0b8      	b.n	800407a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d020      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f20:	4b59      	ldr	r3, [pc, #356]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a58      	ldr	r2, [pc, #352]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f38:	4b53      	ldr	r3, [pc, #332]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a52      	ldr	r2, [pc, #328]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b50      	ldr	r3, [pc, #320]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	494d      	ldr	r1, [pc, #308]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d040      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	4b47      	ldr	r3, [pc, #284]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d115      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e07f      	b.n	800407a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b41      	ldr	r3, [pc, #260]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e073      	b.n	800407a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	4b3d      	ldr	r3, [pc, #244]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06b      	b.n	800407a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4936      	ldr	r1, [pc, #216]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd ffca 	bl	8001f4c <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fd ffc6 	bl	8001f4c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e053      	b.n	800407a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d210      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 0207 	bic.w	r2, r3, #7
 8003ffa:	4922      	ldr	r1, [pc, #136]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b20      	ldr	r3, [pc, #128]	@ (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e032      	b.n	800407a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004020:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4916      	ldr	r1, [pc, #88]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800403e:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	490e      	ldr	r1, [pc, #56]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004052:	f000 f821 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8004056:	4602      	mov	r2, r0
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	490a      	ldr	r1, [pc, #40]	@ (800408c <HAL_RCC_ClockConfig+0x1c8>)
 8004064:	5ccb      	ldrb	r3, [r1, r3]
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <HAL_RCC_ClockConfig+0x1cc>)
 800406c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800406e:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_ClockConfig+0x1d0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd ff28 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40022000 	.word	0x40022000
 8004088:	40021000 	.word	0x40021000
 800408c:	08004720 	.word	0x08004720
 8004090:	20000038 	.word	0x20000038
 8004094:	2000003c 	.word	0x2000003c

08004098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040b2:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <HAL_RCC_GetSysClockFreq+0x94>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d002      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x30>
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x36>
 80040c6:	e027      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040c8:	4b19      	ldr	r3, [pc, #100]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ca:	613b      	str	r3, [r7, #16]
      break;
 80040cc:	e027      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0c9b      	lsrs	r3, r3, #18
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040d8:	5cd3      	ldrb	r3, [r2, r3]
 80040da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d010      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e6:	4b11      	ldr	r3, [pc, #68]	@ (800412c <HAL_RCC_GetSysClockFreq+0x94>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	0c5b      	lsrs	r3, r3, #17
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	4a11      	ldr	r2, [pc, #68]	@ (8004138 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x98>)
 80040fa:	fb03 f202 	mul.w	r2, r3, r2
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e004      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0c      	ldr	r2, [pc, #48]	@ (800413c <HAL_RCC_GetSysClockFreq+0xa4>)
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	613b      	str	r3, [r7, #16]
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x98>)
 800411a:	613b      	str	r3, [r7, #16]
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	693b      	ldr	r3, [r7, #16]
}
 8004120:	4618      	mov	r0, r3
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	007a1200 	.word	0x007a1200
 8004134:	08004738 	.word	0x08004738
 8004138:	08004748 	.word	0x08004748
 800413c:	003d0900 	.word	0x003d0900

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b02      	ldr	r3, [pc, #8]	@ (8004150 <HAL_RCC_GetHCLKFreq+0x10>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	20000038 	.word	0x20000038

08004154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004158:	f7ff fff2 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	@ (8004178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	08004730 	.word	0x08004730

0800417c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004180:	f7ff ffde 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	0adb      	lsrs	r3, r3, #11
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	@ (80041a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000
 80041a0:	08004730 	.word	0x08004730

080041a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041ac:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <RCC_Delay+0x34>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0a      	ldr	r2, [pc, #40]	@ (80041dc <RCC_Delay+0x38>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0a5b      	lsrs	r3, r3, #9
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041c0:	bf00      	nop
  }
  while (Delay --);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	60fa      	str	r2, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f9      	bne.n	80041c0 <RCC_Delay+0x1c>
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	20000038 	.word	0x20000038
 80041dc:	10624dd3 	.word	0x10624dd3

080041e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e042      	b.n	8004278 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fb84 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	@ 0x24
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f971 	bl	800450c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	@ 0x28
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b20      	cmp	r3, #32
 800429e:	d175      	bne.n	800438c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_UART_Transmit+0x2c>
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e06e      	b.n	800438e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2221      	movs	r2, #33	@ 0x21
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042be:	f7fd fe45 	bl	8001f4c <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d8:	d108      	bne.n	80042ec <HAL_UART_Transmit+0x6c>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e003      	b.n	80042f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f4:	e02e      	b.n	8004354 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	@ 0x80
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f848 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e03a      	b.n	800438e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	3302      	adds	r3, #2
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e007      	b.n	8004346 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3301      	adds	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1cb      	bne.n	80042f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2140      	movs	r1, #64	@ 0x40
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f814 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e006      	b.n	800438e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	e03b      	b.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d037      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7fd fdcc 	bl	8001f4c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	6a3a      	ldr	r2, [r7, #32]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e03a      	b.n	8004440 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d023      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b80      	cmp	r3, #128	@ 0x80
 80043dc:	d020      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d01d      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d116      	bne.n	8004420 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f81d 	bl	8004448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2208      	movs	r2, #8
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e00f      	b.n	8004440 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	429a      	cmp	r2, r3
 800443c:	d0b4      	beq.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b095      	sub	sp, #84	@ 0x54
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004470:	643a      	str	r2, [r7, #64]	@ 0x40
 8004472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004476:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3314      	adds	r3, #20
 800448a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	61fb      	str	r3, [r7, #28]
   return(result);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d119      	bne.n	80044f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f023 0310 	bic.w	r3, r3, #16
 80044d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e0:	61ba      	str	r2, [r7, #24]
 80044e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6979      	ldr	r1, [r7, #20]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	613b      	str	r3, [r7, #16]
   return(result);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004502:	bf00      	nop
 8004504:	3754      	adds	r7, #84	@ 0x54
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004546:	f023 030c 	bic.w	r3, r3, #12
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	430b      	orrs	r3, r1
 8004552:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2c      	ldr	r2, [pc, #176]	@ (8004620 <UART_SetConfig+0x114>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7ff fe02 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	e002      	b.n	8004582 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7ff fdea 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 8004580:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009a      	lsls	r2, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	4a22      	ldr	r2, [pc, #136]	@ (8004624 <UART_SetConfig+0x118>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	0119      	lsls	r1, r3, #4
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009a      	lsls	r2, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <UART_SetConfig+0x118>)
 80045ba:	fba3 0302 	umull	r0, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2064      	movs	r0, #100	@ 0x64
 80045c2:	fb00 f303 	mul.w	r3, r0, r3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	3332      	adds	r3, #50	@ 0x32
 80045cc:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <UART_SetConfig+0x118>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d8:	4419      	add	r1, r3
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009a      	lsls	r2, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <UART_SetConfig+0x118>)
 80045f2:	fba3 0302 	umull	r0, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2064      	movs	r0, #100	@ 0x64
 80045fa:	fb00 f303 	mul.w	r3, r0, r3
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	3332      	adds	r3, #50	@ 0x32
 8004604:	4a07      	ldr	r2, [pc, #28]	@ (8004624 <UART_SetConfig+0x118>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	440a      	add	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40013800 	.word	0x40013800
 8004624:	51eb851f 	.word	0x51eb851f

08004628 <memset>:
 8004628:	4603      	mov	r3, r0
 800462a:	4402      	add	r2, r0
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <memset+0xa>
 8004630:	4770      	bx	lr
 8004632:	f803 1b01 	strb.w	r1, [r3], #1
 8004636:	e7f9      	b.n	800462c <memset+0x4>

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	2600      	movs	r6, #0
 800463c:	4d0c      	ldr	r5, [pc, #48]	@ (8004670 <__libc_init_array+0x38>)
 800463e:	4c0d      	ldr	r4, [pc, #52]	@ (8004674 <__libc_init_array+0x3c>)
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	f000 f81a 	bl	8004680 <_init>
 800464c:	2600      	movs	r6, #0
 800464e:	4d0a      	ldr	r5, [pc, #40]	@ (8004678 <__libc_init_array+0x40>)
 8004650:	4c0a      	ldr	r4, [pc, #40]	@ (800467c <__libc_init_array+0x44>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f855 3b04 	ldr.w	r3, [r5], #4
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	0800474c 	.word	0x0800474c
 8004674:	0800474c 	.word	0x0800474c
 8004678:	0800474c 	.word	0x0800474c
 800467c:	08004750 	.word	0x08004750

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
