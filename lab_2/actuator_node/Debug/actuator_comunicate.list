
actuator_comunicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b3c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08006c50  08006c50  00007c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007000  08007000  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007000  08007000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007008  08007008  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007008  08007008  00008008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007010  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d8  080071e8  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080071e8  000094bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be33  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcd  00000000  00000000  00015034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00016c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a2  00000000  00000000  00017858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018559  00000000  00000000  000181fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5ad  00000000  00000000  00030753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c08b  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a8  00000000  00000000  000c9dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ce378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c34 	.word	0x08006c34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006c34 	.word	0x08006c34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_f2iz>:
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000eb4:	d30f      	bcc.n	8000ed6 <__aeabi_f2iz+0x2a>
 8000eb6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000eba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ebe:	d90d      	bls.n	8000edc <__aeabi_f2iz+0x30>
 8000ec0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ec4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ec8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ecc:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed0:	bf18      	it	ne
 8000ed2:	4240      	negne	r0, r0
 8000ed4:	4770      	bx	lr
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4770      	bx	lr
 8000edc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ee0:	d101      	bne.n	8000ee6 <__aeabi_f2iz+0x3a>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	d105      	bne.n	8000ef2 <__aeabi_f2iz+0x46>
 8000ee6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000eea:	bf08      	it	eq
 8000eec:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ef0:	4770      	bx	lr
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_f2uiz>:
 8000ef8:	0042      	lsls	r2, r0, #1
 8000efa:	d20e      	bcs.n	8000f1a <__aeabi_f2uiz+0x22>
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f00:	d30b      	bcc.n	8000f1a <__aeabi_f2uiz+0x22>
 8000f02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d409      	bmi.n	8000f20 <__aeabi_f2uiz+0x28>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2uiz+0x32>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d102      	bne.n	8000f30 <__aeabi_f2uiz+0x38>
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == htim3.Instance)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b4e      	ldr	r3, [pc, #312]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d17c      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x10e>
	 {
		float error = target_RPM[state_RPM] - __HAL_TIM_GET_COUNTER(&htim2) * 600 / PULSE_PER_ROUND;
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a4d      	ldr	r2, [pc, #308]	@ (8001088 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000f52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4b4c      	ldr	r3, [pc, #304]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	0a9b      	lsrs	r3, r3, #10
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff43 	bl	8000dfc <__aeabi_ui2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	617b      	str	r3, [r7, #20]
		float Pout = Kp * error;
 8000f7a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6978      	ldr	r0, [r7, #20]
 8000f82:	f7ff f8ed 	bl	8000160 <__aeabi_fmul>
 8000f86:	4603      	mov	r3, r0
 8000f88:	613b      	str	r3, [r7, #16]
		float Dout = Kd * (error - old_error) / TIME_SAMPLE;
 8000f8a:	4b42      	ldr	r3, [pc, #264]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff37 	bl	8000e04 <__aeabi_i2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff fe7c 	bl	8000c98 <__aeabi_fsub>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4610      	mov	r0, r2
 8000faa:	f7ff f8d9 	bl	8000160 <__aeabi_fmul>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff faed 	bl	8000590 <__aeabi_f2d>
 8000fb6:	a330      	add	r3, pc, #192	@ (adr r3, 8001078 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff fc6a 	bl	8000894 <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fe12 	bl	8000bf0 <__aeabi_d2f>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60fb      	str	r3, [r7, #12]
		sum_error+=error;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6979      	ldr	r1, [r7, #20]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fe60 	bl	8000c9c <__addsf3>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000fe2:	601a      	str	r2, [r3, #0]
		float Iout = Ki * sum_error * TIME_SAMPLE;
 8000fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80010a0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4610      	mov	r0, r2
 8000fee:	f7ff f8b7 	bl	8000160 <__aeabi_fmul>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff facb 	bl	8000590 <__aeabi_f2d>
 8000ffa:	a31f      	add	r3, pc, #124	@ (adr r3, 8001078 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fb1e 	bl	8000640 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdf0 	bl	8000bf0 <__aeabi_d2f>
 8001010:	4603      	mov	r3, r0
 8001012:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t)(Pout + Iout + Dout));
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6938      	ldr	r0, [r7, #16]
 8001018:	f7ff fe40 	bl	8000c9c <__addsf3>
 800101c:	4603      	mov	r3, r0
 800101e:	68f9      	ldr	r1, [r7, #12]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fe3b 	bl	8000c9c <__addsf3>
 8001026:	4603      	mov	r3, r0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff65 	bl	8000ef8 <__aeabi_f2uiz>
 800102e:	4603      	mov	r3, r0
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	641a      	str	r2, [r3, #64]	@ 0x40
		old_error = error;
 8001038:	6978      	ldr	r0, [r7, #20]
 800103a:	f7ff ff37 	bl	8000eac <__aeabi_f2iz>
 800103e:	4603      	mov	r3, r0
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001044:	801a      	strh	r2, [r3, #0]
	  }
	 if(htim->Instance == htim4.Instance)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d10b      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x132>
	 {
		 state_RPM+=1;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800105a:	6013      	str	r3, [r2, #0]
		 if(state_RPM == 5)
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b05      	cmp	r3, #5
 8001062:	d102      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x132>
		 {
		 	state_RPM = 0;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
		 }
	 }
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	9999999a 	.word	0x9999999a
 800107c:	3fb99999 	.word	0x3fb99999
 8001080:	20000284 	.word	0x20000284
 8001084:	20000000 	.word	0x20000000
 8001088:	08006c58 	.word	0x08006c58
 800108c:	2000023c 	.word	0x2000023c
 8001090:	95cbec1b 	.word	0x95cbec1b
 8001094:	20000364 	.word	0x20000364
 8001098:	3d4ccccd 	.word	0x3d4ccccd
 800109c:	20000360 	.word	0x20000360
 80010a0:	3dcccccd 	.word	0x3dcccccd
 80010a4:	200001f4 	.word	0x200001f4
 80010a8:	200002cc 	.word	0x200002cc

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fd2d 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f85b 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ba:	f000 fa65 	bl	8001588 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010be:	f000 f89d 	bl	80011fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80010c2:	f000 f947 	bl	8001354 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010c6:	f000 fa35 	bl	8001534 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80010ca:	f000 f997 	bl	80013fc <MX_TIM3_Init>
  MX_TIM4_Init();
 80010ce:	f000 f9e3 	bl	8001498 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  char text_data[20];
  uint16_t encoder_data;
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010d2:	213c      	movs	r1, #60	@ 0x3c
 80010d4:	481e      	ldr	r0, [pc, #120]	@ (8001150 <main+0xa4>)
 80010d6:	f001 fe99 	bl	8002e0c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80010da:	210c      	movs	r1, #12
 80010dc:	481d      	ldr	r0, [pc, #116]	@ (8001154 <main+0xa8>)
 80010de:	f001 fd51 	bl	8002b84 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80010e2:	481d      	ldr	r0, [pc, #116]	@ (8001158 <main+0xac>)
 80010e4:	f001 fca4 	bl	8002a30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80010e8:	481c      	ldr	r0, [pc, #112]	@ (800115c <main+0xb0>)
 80010ea:	f001 fca1 	bl	8002a30 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80010ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f2:	f000 fd6f 	bl	8001bd4 <HAL_Delay>
	  encoder_data = __HAL_TIM_GET_COUNTER(&htim2);
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <main+0xa4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	82fb      	strh	r3, [r7, #22]
	  if(encoder_data != 0)
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <main+0x5e>
	  {
		  encoder_data= 65535 - encoder_data;
 8001104:	8afb      	ldrh	r3, [r7, #22]
 8001106:	43db      	mvns	r3, r3
 8001108:	82fb      	strh	r3, [r7, #22]
	  }
	  current_RPM = encoder_data*60 / PULSE_PER_ROUND;
 800110a:	8afa      	ldrh	r2, [r7, #22]
 800110c:	4613      	mov	r3, r2
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <main+0xb4>)
 8001116:	fb82 1203 	smull	r1, r2, r2, r3
 800111a:	1212      	asrs	r2, r2, #8
 800111c:	17db      	asrs	r3, r3, #31
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <main+0xb8>)
 8001124:	801a      	strh	r2, [r3, #0]
	  sprintf(text_data, "RPM: %u", current_RPM);
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <main+0xb8>)
 8001128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112c:	461a      	mov	r2, r3
 800112e:	463b      	mov	r3, r7
 8001130:	490d      	ldr	r1, [pc, #52]	@ (8001168 <main+0xbc>)
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fc4a 	bl	80049cc <siprintf>
	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <main+0xa4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_UART_Transmit(&huart1, (uint8_t*)text_data, sizeof(text_data), 100);
 8001140:	4639      	mov	r1, r7
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	2214      	movs	r2, #20
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <main+0xc0>)
 8001148:	f002 fd4d 	bl	8003be6 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800114c:	e7cf      	b.n	80010ee <main+0x42>
 800114e:	bf00      	nop
 8001150:	2000023c 	.word	0x2000023c
 8001154:	200001f4 	.word	0x200001f4
 8001158:	20000284 	.word	0x20000284
 800115c:	200002cc 	.word	0x200002cc
 8001160:	2572fb07 	.word	0x2572fb07
 8001164:	2000035c 	.word	0x2000035c
 8001168:	08006c50 	.word	0x08006c50
 800116c:	20000314 	.word	0x20000314

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b090      	sub	sp, #64	@ 0x40
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	2228      	movs	r2, #40	@ 0x28
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fc87 	bl	8004a92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 ffd9 	bl	8002170 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011c4:	f000 fa2c 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fa46 	bl	8002674 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011ee:	f000 fa17 	bl	8001620 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3740      	adds	r7, #64	@ 0x40
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	@ 0x58
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2220      	movs	r2, #32
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fc2c 	bl	8004a92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123a:	4b44      	ldr	r3, [pc, #272]	@ (800134c <MX_TIM1_Init+0x150>)
 800123c:	4a44      	ldr	r2, [pc, #272]	@ (8001350 <MX_TIM1_Init+0x154>)
 800123e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001240:	4b42      	ldr	r3, [pc, #264]	@ (800134c <MX_TIM1_Init+0x150>)
 8001242:	2247      	movs	r2, #71	@ 0x47
 8001244:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b41      	ldr	r3, [pc, #260]	@ (800134c <MX_TIM1_Init+0x150>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800124c:	4b3f      	ldr	r3, [pc, #252]	@ (800134c <MX_TIM1_Init+0x150>)
 800124e:	2263      	movs	r2, #99	@ 0x63
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b3e      	ldr	r3, [pc, #248]	@ (800134c <MX_TIM1_Init+0x150>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001258:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <MX_TIM1_Init+0x150>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <MX_TIM1_Init+0x150>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001264:	4839      	ldr	r0, [pc, #228]	@ (800134c <MX_TIM1_Init+0x150>)
 8001266:	f001 fb93 	bl	8002990 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001270:	f000 f9d6 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001278:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800127e:	4619      	mov	r1, r3
 8001280:	4832      	ldr	r0, [pc, #200]	@ (800134c <MX_TIM1_Init+0x150>)
 8001282:	f002 f803 	bl	800328c <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800128c:	f000 f9c8 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001290:	482e      	ldr	r0, [pc, #184]	@ (800134c <MX_TIM1_Init+0x150>)
 8001292:	f001 fc1f 	bl	8002ad4 <HAL_TIM_PWM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800129c:	f000 f9c0 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012ac:	4619      	mov	r1, r3
 80012ae:	4827      	ldr	r0, [pc, #156]	@ (800134c <MX_TIM1_Init+0x150>)
 80012b0:	f002 fb88 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80012ba:	f000 f9b1 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012be:	2360      	movs	r3, #96	@ 0x60
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 80012c2:	2332      	movs	r3, #50	@ 0x32
 80012c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	481a      	ldr	r0, [pc, #104]	@ (800134c <MX_TIM1_Init+0x150>)
 80012e4:	f001 ff10 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80012ee:	f000 f997 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f6:	220c      	movs	r2, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	4814      	ldr	r0, [pc, #80]	@ (800134c <MX_TIM1_Init+0x150>)
 80012fc:	f001 ff04 	bl	8003108 <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001306:	f000 f98b 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001322:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM1_Init+0x150>)
 800132e:	f002 fba7 	bl	8003a80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001338:	f000 f972 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM1_Init+0x150>)
 800133e:	f000 fa39 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3758      	adds	r7, #88	@ 0x58
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001f4 	.word	0x200001f4
 8001350:	40012c00 	.word	0x40012c00

08001354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2224      	movs	r2, #36	@ 0x24
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fb95 	bl	8004a92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001398:	2303      	movs	r3, #3
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 80013c4:	f001 fc80 	bl	8002cc8 <HAL_TIM_Encoder_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013ce:	f000 f927 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_TIM2_Init+0xa4>)
 80013e0:	f002 faf0 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013ea:	f000 f919 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000023c 	.word	0x2000023c

080013fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	463b      	mov	r3, r7
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <MX_TIM3_Init+0x94>)
 800141a:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <MX_TIM3_Init+0x98>)
 800141c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <MX_TIM3_Init+0x94>)
 8001420:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001424:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_TIM3_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_TIM3_Init+0x94>)
 800142e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001432:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_TIM3_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_TIM3_Init+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001440:	4813      	ldr	r0, [pc, #76]	@ (8001490 <MX_TIM3_Init+0x94>)
 8001442:	f001 faa5 	bl	8002990 <HAL_TIM_Base_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800144c:	f000 f8e8 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	4619      	mov	r1, r3
 800145c:	480c      	ldr	r0, [pc, #48]	@ (8001490 <MX_TIM3_Init+0x94>)
 800145e:	f001 ff15 	bl	800328c <HAL_TIM_ConfigClockSource>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001468:	f000 f8da 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_TIM3_Init+0x94>)
 800147a:	f002 faa3 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001484:	f000 f8cc 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000284 	.word	0x20000284
 8001494:	40000400 	.word	0x40000400

08001498 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_TIM4_Init+0x94>)
 80014b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <MX_TIM4_Init+0x98>)
 80014b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_TIM4_Init+0x94>)
 80014bc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_TIM4_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_TIM4_Init+0x94>)
 80014ca:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <MX_TIM4_Init+0x94>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_TIM4_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014dc:	4813      	ldr	r0, [pc, #76]	@ (800152c <MX_TIM4_Init+0x94>)
 80014de:	f001 fa57 	bl	8002990 <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80014e8:	f000 f89a 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <MX_TIM4_Init+0x94>)
 80014fa:	f001 fec7 	bl	800328c <HAL_TIM_ConfigClockSource>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001504:	f000 f88c 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_TIM4_Init+0x94>)
 8001516:	f002 fa55 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001520:	f000 f87e 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200002cc 	.word	0x200002cc
 8001530:	40000800 	.word	0x40000800

08001534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <MX_USART1_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_USART1_UART_Init+0x4c>)
 800156c:	f002 faeb 	bl	8003b46 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001576:	f000 f853 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000314 	.word	0x20000314
 8001584:	40013800 	.word	0x40013800

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <MX_GPIO_Init+0x90>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a17      	ldr	r2, [pc, #92]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_GPIO_Init+0x90>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_EN_Pin|L_EN_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80015ea:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_GPIO_Init+0x94>)
 80015ec:	f000 fda8 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_EN_Pin L_EN_Pin */
  GPIO_InitStruct.Pin = R_EN_Pin|L_EN_Pin;
 80015f0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80015f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2302      	movs	r3, #2
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_GPIO_Init+0x94>)
 800160a:	f000 fc15 	bl	8001e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40010c00 	.word	0x40010c00

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <Error_Handler+0x8>

0800162c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_MspInit+0x5c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <HAL_MspInit+0x5c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_MspInit+0x5c>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a0e      	ldr	r2, [pc, #56]	@ (8001688 <HAL_MspInit+0x5c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <HAL_MspInit+0x5c>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_MspInit+0x60>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4a04      	ldr	r2, [pc, #16]	@ (800168c <HAL_MspInit+0x60>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000

08001690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a23      	ldr	r2, [pc, #140]	@ (800172c <HAL_TIM_Base_MspInit+0x9c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10c      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a2:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a22      	ldr	r2, [pc, #136]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 80016a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016ba:	e032      	b.n	8001722 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001734 <HAL_TIM_Base_MspInit+0xa4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d114      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a19      	ldr	r2, [pc, #100]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	201d      	movs	r0, #29
 80016e4:	f000 fb71 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016e8:	201d      	movs	r0, #29
 80016ea:	f000 fb8a 	bl	8001e02 <HAL_NVIC_EnableIRQ>
}
 80016ee:	e018      	b.n	8001722 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a10      	ldr	r2, [pc, #64]	@ (8001738 <HAL_TIM_Base_MspInit+0xa8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d113      	bne.n	8001722 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_TIM_Base_MspInit+0xa0>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201e      	movs	r0, #30
 8001718:	f000 fb57 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800171c:	201e      	movs	r0, #30
 800171e:	f000 fb70 	bl	8001e02 <HAL_NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40000400 	.word	0x40000400
 8001738:	40000800 	.word	0x40000800

0800173c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800175a:	d123      	bne.n	80017a4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x70>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x70>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	61d3      	str	r3, [r2, #28]
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x70>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x70>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x70>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x70>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 800178c:	2303      	movs	r3, #3
 800178e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4619      	mov	r1, r3
 800179e:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <HAL_TIM_Encoder_MspInit+0x74>)
 80017a0:	f000 fb4a 	bl	8001e38 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017a4:	bf00      	nop
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800

080017b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <HAL_TIM_MspPostInit+0x5c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d118      	bne.n	8001806 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_TIM_MspPostInit+0x60>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <HAL_TIM_MspPostInit+0x60>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_TIM_MspPostInit+0x60>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = L_PWM_Pin|R_PWM_Pin;
 80017ec:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <HAL_TIM_MspPostInit+0x64>)
 8001802:	f000 fb19 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012c00 	.word	0x40012c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40010800 	.word	0x40010800

0800181c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <HAL_UART_MspInit+0x8c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d131      	bne.n	80018a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_UART_MspInit+0x90>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_UART_MspInit+0x90>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_UART_MspInit+0x90>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <HAL_UART_MspInit+0x90>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <HAL_UART_MspInit+0x90>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_UART_MspInit+0x90>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800186c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <HAL_UART_MspInit+0x94>)
 8001882:	f000 fad9 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800188a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <HAL_UART_MspInit+0x94>)
 800189c:	f000 facc 	bl	8001e38 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010800 	.word	0x40010800

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <NMI_Handler+0x4>

080018bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <MemManage_Handler+0x4>

080018cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <UsageFault_Handler+0x4>

080018dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001904:	f000 f94a 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <TIM3_IRQHandler+0x10>)
 8001912:	f001 fb09 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000284 	.word	0x20000284

08001920 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <TIM4_IRQHandler+0x10>)
 8001926:	f001 faff 	bl	8002f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200002cc 	.word	0x200002cc

08001934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return 1;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_kill>:

int _kill(int pid, int sig)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800194c:	f003 f8f4 	bl	8004b38 <__errno>
 8001950:	4603      	mov	r3, r0
 8001952:	2216      	movs	r2, #22
 8001954:	601a      	str	r2, [r3, #0]
  return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_exit>:

void _exit (int status)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffe7 	bl	8001942 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <_exit+0x12>

08001978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e00a      	b.n	80019a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800198a:	f3af 8000 	nop.w
 800198e:	4601      	mov	r1, r0
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf0      	blt.n	800198a <_read+0x12>
  }

  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e009      	b.n	80019d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf1      	blt.n	80019c4 <_write+0x12>
  }
  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_close>:

int _close(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a10:	605a      	str	r2, [r3, #4]
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <_isatty>:

int _isatty(int file)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f003 f85c 	bl	8004b38 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20005000 	.word	0x20005000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	20000368 	.word	0x20000368
 8001ab4:	200004c0 	.word	0x200004c0

08001ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac4:	f7ff fff8 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac8:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aca:	490c      	ldr	r1, [pc, #48]	@ (8001afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001acc:	4a0c      	ldr	r2, [pc, #48]	@ (8001b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ae0:	4c09      	ldr	r4, [pc, #36]	@ (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aee:	f003 f829 	bl	8004b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001af2:	f7ff fadb 	bl	80010ac <main>
  bx lr
 8001af6:	4770      	bx	lr
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b00:	08007010 	.word	0x08007010
  ldr r2, =_sbss
 8001b04:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b08:	200004bc 	.word	0x200004bc

08001b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_2_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_Init+0x28>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_Init+0x28>)
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f947 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fd7e 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f95f 	bl	8001e1e <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f927 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	@ (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000004 	.word	0x20000004
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	20000008 	.word	0x20000008

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_IncTick+0x1c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_IncTick+0x20>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a03      	ldr	r2, [pc, #12]	@ (8001bbc <HAL_IncTick+0x20>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	2000036c 	.word	0x2000036c

08001bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	@ (8001bd0 <HAL_GetTick+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	2000036c 	.word	0x2000036c

08001bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d005      	beq.n	8001bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_Delay+0x44>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bfa:	bf00      	nop
 8001bfc:	f7ff ffe0 	bl	8001bc0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f7      	bhi.n	8001bfc <HAL_Delay+0x28>
  {
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4906      	ldr	r1, [pc, #24]	@ (8001cb4 <__NVIC_EnableIRQ+0x34>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	@ (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff90 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff2d 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff42 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff90 	bl	8001d0c <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5f 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff35 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b08b      	sub	sp, #44	@ 0x2c
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	e169      	b.n	8002120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	f040 8158 	bne.w	800211a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a9a      	ldr	r2, [pc, #616]	@ (80020d8 <HAL_GPIO_Init+0x2a0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d05e      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e74:	4a98      	ldr	r2, [pc, #608]	@ (80020d8 <HAL_GPIO_Init+0x2a0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d875      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a98      	ldr	r2, [pc, #608]	@ (80020dc <HAL_GPIO_Init+0x2a4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d058      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e80:	4a96      	ldr	r2, [pc, #600]	@ (80020dc <HAL_GPIO_Init+0x2a4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d86f      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e86:	4a96      	ldr	r2, [pc, #600]	@ (80020e0 <HAL_GPIO_Init+0x2a8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d052      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e8c:	4a94      	ldr	r2, [pc, #592]	@ (80020e0 <HAL_GPIO_Init+0x2a8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d869      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e92:	4a94      	ldr	r2, [pc, #592]	@ (80020e4 <HAL_GPIO_Init+0x2ac>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04c      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e98:	4a92      	ldr	r2, [pc, #584]	@ (80020e4 <HAL_GPIO_Init+0x2ac>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d863      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e9e:	4a92      	ldr	r2, [pc, #584]	@ (80020e8 <HAL_GPIO_Init+0x2b0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d046      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a90      	ldr	r2, [pc, #576]	@ (80020e8 <HAL_GPIO_Init+0x2b0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d85d      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d82a      	bhi.n	8001f04 <HAL_GPIO_Init+0xcc>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d859      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb8 <HAL_GPIO_Init+0x80>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001f33 	.word	0x08001f33
 8001ebc:	08001f0d 	.word	0x08001f0d
 8001ec0:	08001f1f 	.word	0x08001f1f
 8001ec4:	08001f61 	.word	0x08001f61
 8001ec8:	08001f67 	.word	0x08001f67
 8001ecc:	08001f67 	.word	0x08001f67
 8001ed0:	08001f67 	.word	0x08001f67
 8001ed4:	08001f67 	.word	0x08001f67
 8001ed8:	08001f67 	.word	0x08001f67
 8001edc:	08001f67 	.word	0x08001f67
 8001ee0:	08001f67 	.word	0x08001f67
 8001ee4:	08001f67 	.word	0x08001f67
 8001ee8:	08001f67 	.word	0x08001f67
 8001eec:	08001f67 	.word	0x08001f67
 8001ef0:	08001f67 	.word	0x08001f67
 8001ef4:	08001f67 	.word	0x08001f67
 8001ef8:	08001f67 	.word	0x08001f67
 8001efc:	08001f15 	.word	0x08001f15
 8001f00:	08001f29 	.word	0x08001f29
 8001f04:	4a79      	ldr	r2, [pc, #484]	@ (80020ec <HAL_GPIO_Init+0x2b4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0a:	e02c      	b.n	8001f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e029      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e024      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	3308      	adds	r3, #8
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e01f      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e01a      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e013      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	611a      	str	r2, [r3, #16]
          break;
 8001f52:	e009      	b.n	8001f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f54:	2308      	movs	r3, #8
 8001f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	615a      	str	r2, [r3, #20]
          break;
 8001f5e:	e003      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          break;
 8001f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2bff      	cmp	r3, #255	@ 0xff
 8001f6c:	d801      	bhi.n	8001f72 <HAL_GPIO_Init+0x13a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_Init+0x13e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	@ 0xff
 8001f7c:	d802      	bhi.n	8001f84 <HAL_GPIO_Init+0x14c>
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x152>
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	3b08      	subs	r3, #8
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	210f      	movs	r1, #15
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80b1 	beq.w	800211a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80020f0 <HAL_GPIO_Init+0x2b8>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80020f0 <HAL_GPIO_Init+0x2b8>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80020f0 <HAL_GPIO_Init+0x2b8>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd0:	4a48      	ldr	r2, [pc, #288]	@ (80020f4 <HAL_GPIO_Init+0x2bc>)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a40      	ldr	r2, [pc, #256]	@ (80020f8 <HAL_GPIO_Init+0x2c0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <HAL_GPIO_Init+0x1ec>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80020fc <HAL_GPIO_Init+0x2c4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00d      	beq.n	8002020 <HAL_GPIO_Init+0x1e8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3e      	ldr	r2, [pc, #248]	@ (8002100 <HAL_GPIO_Init+0x2c8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <HAL_GPIO_Init+0x1e4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3d      	ldr	r2, [pc, #244]	@ (8002104 <HAL_GPIO_Init+0x2cc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d101      	bne.n	8002018 <HAL_GPIO_Init+0x1e0>
 8002014:	2303      	movs	r3, #3
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 8002018:	2304      	movs	r3, #4
 800201a:	e004      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 800201c:	2302      	movs	r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_GPIO_Init+0x1ee>
 8002024:	2300      	movs	r3, #0
 8002026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002036:	492f      	ldr	r1, [pc, #188]	@ (80020f4 <HAL_GPIO_Init+0x2bc>)
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002050:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	492c      	ldr	r1, [pc, #176]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800205e:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	4928      	ldr	r1, [pc, #160]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002078:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4922      	ldr	r1, [pc, #136]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	491e      	ldr	r1, [pc, #120]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4918      	ldr	r1, [pc, #96]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ae:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4914      	ldr	r1, [pc, #80]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d021      	beq.n	800210c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	490e      	ldr	r1, [pc, #56]	@ (8002108 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
 80020d4:	e021      	b.n	800211a <HAL_GPIO_Init+0x2e2>
 80020d6:	bf00      	nop
 80020d8:	10320000 	.word	0x10320000
 80020dc:	10310000 	.word	0x10310000
 80020e0:	10220000 	.word	0x10220000
 80020e4:	10210000 	.word	0x10210000
 80020e8:	10120000 	.word	0x10120000
 80020ec:	10110000 	.word	0x10110000
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	40010c00 	.word	0x40010c00
 8002100:	40011000 	.word	0x40011000
 8002104:	40011400 	.word	0x40011400
 8002108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800210c:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_GPIO_Init+0x304>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	43db      	mvns	r3, r3
 8002114:	4909      	ldr	r1, [pc, #36]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002116:	4013      	ands	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	3301      	adds	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ae8e 	bne.w	8001e4c <HAL_GPIO_Init+0x14>
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	372c      	adds	r7, #44	@ 0x2c
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800215c:	e003      	b.n	8002166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	041a      	lsls	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e272      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8087 	beq.w	800229e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002190:	4b92      	ldr	r3, [pc, #584]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b04      	cmp	r3, #4
 800219a:	d00c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800219c:	4b8f      	ldr	r3, [pc, #572]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
 80021a8:	4b8c      	ldr	r3, [pc, #560]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d10b      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b6:	4b89      	ldr	r3, [pc, #548]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d06c      	beq.n	800229c <HAL_RCC_OscConfig+0x12c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d168      	bne.n	800229c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e24c      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x76>
 80021d8:	4b80      	ldr	r3, [pc, #512]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7f      	ldr	r2, [pc, #508]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e02e      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b7b      	ldr	r3, [pc, #492]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a7a      	ldr	r2, [pc, #488]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b78      	ldr	r3, [pc, #480]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a77      	ldr	r2, [pc, #476]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0xbc>
 8002212:	4b72      	ldr	r3, [pc, #456]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a71      	ldr	r2, [pc, #452]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6e      	ldr	r2, [pc, #440]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 800222c:	4b6b      	ldr	r3, [pc, #428]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a6a      	ldr	r2, [pc, #424]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b68      	ldr	r3, [pc, #416]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a67      	ldr	r2, [pc, #412]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fcb8 	bl	8001bc0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fcb4 	bl	8001bc0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	@ 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e200      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b5d      	ldr	r3, [pc, #372]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xe4>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fca4 	bl	8001bc0 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fca0 	bl	8001bc0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1ec      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b53      	ldr	r3, [pc, #332]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x10c>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022aa:	4b4c      	ldr	r3, [pc, #304]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022b6:	4b49      	ldr	r3, [pc, #292]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
 80022c2:	4b46      	ldr	r3, [pc, #280]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b43      	ldr	r3, [pc, #268]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1c0      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b3d      	ldr	r3, [pc, #244]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4939      	ldr	r1, [pc, #228]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff fc59 	bl	8001bc0 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7ff fc55 	bl	8001bc0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1a1      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4927      	ldr	r1, [pc, #156]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fc38 	bl	8001bc0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff fc34 	bl	8001bc0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e180      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d03a      	beq.n	80023f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d019      	beq.n	80023ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <HAL_RCC_OscConfig+0x274>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7ff fc18 	bl	8001bc0 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fc14 	bl	8001bc0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e160      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <HAL_RCC_OscConfig+0x26c>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f000 face 	bl	8002954 <RCC_Delay>
 80023b8:	e01c      	b.n	80023f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff fbfe 	bl	8001bc0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c6:	e00f      	b.n	80023e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7ff fbfa 	bl	8001bc0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d908      	bls.n	80023e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e146      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	42420000 	.word	0x42420000
 80023e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b92      	ldr	r3, [pc, #584]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e9      	bne.n	80023c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a6 	beq.w	800254e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b8b      	ldr	r3, [pc, #556]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b88      	ldr	r3, [pc, #544]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a87      	ldr	r2, [pc, #540]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b85      	ldr	r3, [pc, #532]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b82      	ldr	r3, [pc, #520]	@ (8002638 <HAL_RCC_OscConfig+0x4c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b7f      	ldr	r3, [pc, #508]	@ (8002638 <HAL_RCC_OscConfig+0x4c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7e      	ldr	r2, [pc, #504]	@ (8002638 <HAL_RCC_OscConfig+0x4c8>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7ff fbbb 	bl	8001bc0 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7ff fbb7 	bl	8001bc0 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	@ 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e103      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b75      	ldr	r3, [pc, #468]	@ (8002638 <HAL_RCC_OscConfig+0x4c8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x312>
 8002474:	4b6f      	ldr	r3, [pc, #444]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a6e      	ldr	r2, [pc, #440]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e02d      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x334>
 800248a:	4b6a      	ldr	r3, [pc, #424]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a69      	ldr	r2, [pc, #420]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b67      	ldr	r3, [pc, #412]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a66      	ldr	r2, [pc, #408]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	e01c      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x356>
 80024ac:	4b61      	ldr	r3, [pc, #388]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a60      	ldr	r2, [pc, #384]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b58      	ldr	r3, [pc, #352]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a57      	ldr	r2, [pc, #348]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7ff fb6b 	bl	8001bc0 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7ff fb67 	bl	8001bc0 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0b1      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	4b4b      	ldr	r3, [pc, #300]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ee      	beq.n	80024ee <HAL_RCC_OscConfig+0x37e>
 8002510:	e014      	b.n	800253c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fb55 	bl	8001bc0 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff fb51 	bl	8001bc0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e09b      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	4b40      	ldr	r3, [pc, #256]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b3c      	ldr	r3, [pc, #240]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a3b      	ldr	r2, [pc, #236]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800254c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8087 	beq.w	8002666 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d061      	beq.n	8002628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d146      	bne.n	80025fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b33      	ldr	r3, [pc, #204]	@ (800263c <HAL_RCC_OscConfig+0x4cc>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7ff fb25 	bl	8001bc0 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7ff fb21 	bl	8001bc0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e06d      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	4b29      	ldr	r3, [pc, #164]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4921      	ldr	r1, [pc, #132]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a19      	ldr	r1, [r3, #32]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	430b      	orrs	r3, r1
 80025c6:	491b      	ldr	r1, [pc, #108]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7ff faf5 	bl	8001bc0 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff faf1 	bl	8001bc0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e03d      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x46a>
 80025f8:	e035      	b.n	8002666 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fade 	bl	8001bc0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7ff fada 	bl	8001bc0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e026      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x498>
 8002626:	e01e      	b.n	8002666 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e019      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_OscConfig+0x500>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0d0      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d910      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b67      	ldr	r3, [pc, #412]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4965      	ldr	r1, [pc, #404]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a58      	ldr	r2, [pc, #352]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a52      	ldr	r2, [pc, #328]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d040      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d115      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b41      	ldr	r3, [pc, #260]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e073      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06b      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b39      	ldr	r3, [pc, #228]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4936      	ldr	r1, [pc, #216]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7ff fa2c 	bl	8001bc0 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7ff fa28 	bl	8001bc0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e053      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b27      	ldr	r3, [pc, #156]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d210      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4922      	ldr	r1, [pc, #136]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ee:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002802:	f000 f821 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490a      	ldr	r1, [pc, #40]	@ (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <HAL_RCC_ClockConfig+0x1cc>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCC_ClockConfig+0x1d0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff f98a 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40022000 	.word	0x40022000
 8002838:	40021000 	.word	0x40021000
 800283c:	08006c64 	.word	0x08006c64
 8002840:	20000004 	.word	0x20000004
 8002844:	20000008 	.word	0x20000008

08002848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002862:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x30>
 8002872:	2b08      	cmp	r3, #8
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x36>
 8002876:	e027      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800287a:	613b      	str	r3, [r7, #16]
      break;
 800287c:	e027      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4a17      	ldr	r2, [pc, #92]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d010      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002896:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0c5b      	lsrs	r3, r3, #17
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	4a11      	ldr	r2, [pc, #68]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028aa:	fb03 f202 	mul.w	r2, r3, r2
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e004      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	613b      	str	r3, [r7, #16]
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	613b      	str	r3, [r7, #16]
      break;
 80028cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ce:	693b      	ldr	r3, [r7, #16]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	08006c7c 	.word	0x08006c7c
 80028e8:	08006c8c 	.word	0x08006c8c
 80028ec:	003d0900 	.word	0x003d0900

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b02      	ldr	r3, [pc, #8]	@ (8002900 <HAL_RCC_GetHCLKFreq+0x10>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002908:	f7ff fff2 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	@ (8002928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	08006c74 	.word	0x08006c74

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002930:	f7ff ffde 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	@ (800294c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0adb      	lsrs	r3, r3, #11
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	@ (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	08006c74 	.word	0x08006c74

08002954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800295c:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <RCC_Delay+0x34>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <RCC_Delay+0x38>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002970:	bf00      	nop
  }
  while (Delay --);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <RCC_Delay+0x1c>
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000004 	.word	0x20000004
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e041      	b.n	8002a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fe6a 	bl	8001690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 fd48 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e03a      	b.n	8002abe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a18      	ldr	r2, [pc, #96]	@ (8002ac8 <HAL_TIM_Base_Start_IT+0x98>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00e      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x58>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a72:	d009      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x58>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <HAL_TIM_Base_Start_IT+0x9c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x58>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d111      	bne.n	8002aac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d010      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	e007      	b.n	8002abc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800

08002ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e041      	b.n	8002b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f839 	bl	8002b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 fca6 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_TIM_PWM_Start+0x24>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e022      	b.n	8002bee <HAL_TIM_PWM_Start+0x6a>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d109      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0x3e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e015      	b.n	8002bee <HAL_TIM_PWM_Start+0x6a>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d109      	bne.n	8002bdc <HAL_TIM_PWM_Start+0x58>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e008      	b.n	8002bee <HAL_TIM_PWM_Start+0x6a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e05e      	b.n	8002cb4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0x82>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c04:	e013      	b.n	8002c2e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x92>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c14:	e00b      	b.n	8002c2e <HAL_TIM_PWM_Start+0xaa>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_PWM_Start+0xa2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c24:	e003      	b.n	8002c2e <HAL_TIM_PWM_Start+0xaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fea0 	bl	800397c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	@ (8002cbc <HAL_TIM_PWM_Start+0x138>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d107      	bne.n	8002c56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <HAL_TIM_PWM_Start+0x138>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_TIM_PWM_Start+0xfa>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c68:	d009      	beq.n	8002c7e <HAL_TIM_PWM_Start+0xfa>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a14      	ldr	r2, [pc, #80]	@ (8002cc0 <HAL_TIM_PWM_Start+0x13c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d004      	beq.n	8002c7e <HAL_TIM_PWM_Start+0xfa>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <HAL_TIM_PWM_Start+0x140>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d111      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	d010      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca0:	e007      	b.n	8002cb2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800

08002cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e093      	b.n	8002e04 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fe fd23 	bl	800173c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d0c:	f023 0307 	bic.w	r3, r3, #7
 8002d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f000 fba1 	bl	8003464 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002d68:	f023 030c 	bic.w	r3, r3, #12
 8002d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4313      	orrs	r3, r2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	011a      	lsls	r2, r3, #4
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	031b      	lsls	r3, r3, #12
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	4313      	orrs	r3, r2
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e34:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d110      	bne.n	8002e5e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e42:	7b7b      	ldrb	r3, [r7, #13]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d001      	beq.n	8002e4c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e069      	b.n	8002f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e5c:	e031      	b.n	8002ec2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d110      	bne.n	8002e86 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d102      	bne.n	8002e70 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e6a:	7b3b      	ldrb	r3, [r7, #12]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e055      	b.n	8002f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e84:	e01d      	b.n	8002ec2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d108      	bne.n	8002e9e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e92:	7b7b      	ldrb	r3, [r7, #13]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d102      	bne.n	8002e9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e98:	7b3b      	ldrb	r3, [r7, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d001      	beq.n	8002ea2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e03e      	b.n	8002f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_TIM_Encoder_Start+0xc4>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d008      	beq.n	8002ee0 <HAL_TIM_Encoder_Start+0xd4>
 8002ece:	e00f      	b.n	8002ef0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fd4f 	bl	800397c <TIM_CCxChannelCmd>
      break;
 8002ede:	e016      	b.n	8002f0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fd47 	bl	800397c <TIM_CCxChannelCmd>
      break;
 8002eee:	e00e      	b.n	8002f0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fd3f 	bl	800397c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	2104      	movs	r1, #4
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fd38 	bl	800397c <TIM_CCxChannelCmd>
      break;
 8002f0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01b      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0202 	mvn.w	r2, #2
 8002f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa5a 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa4d 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fa5c 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0204 	mvn.w	r2, #4
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa34 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa27 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fa36 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0208 	mvn.w	r2, #8
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa0e 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa01 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fa10 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2208      	movs	r2, #8
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9e8 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9db 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f9ea 	bl	800343e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00c      	beq.n	8003094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0201 	mvn.w	r2, #1
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd ff52 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fd3e 	bl	8003b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f9ba 	bl	8003450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0220 	mvn.w	r2, #32
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fd11 	bl	8003b22 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003122:	2302      	movs	r3, #2
 8003124:	e0ae      	b.n	8003284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	f200 809f 	bhi.w	8003274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003136:	a201      	add	r2, pc, #4	@ (adr r2, 800313c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003171 	.word	0x08003171
 8003140:	08003275 	.word	0x08003275
 8003144:	08003275 	.word	0x08003275
 8003148:	08003275 	.word	0x08003275
 800314c:	080031b1 	.word	0x080031b1
 8003150:	08003275 	.word	0x08003275
 8003154:	08003275 	.word	0x08003275
 8003158:	08003275 	.word	0x08003275
 800315c:	080031f3 	.word	0x080031f3
 8003160:	08003275 	.word	0x08003275
 8003164:	08003275 	.word	0x08003275
 8003168:	08003275 	.word	0x08003275
 800316c:	08003233 	.word	0x08003233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f9e2 	bl	8003540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	619a      	str	r2, [r3, #24]
      break;
 80031ae:	e064      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa28 	bl	800360c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6999      	ldr	r1, [r3, #24]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	619a      	str	r2, [r3, #24]
      break;
 80031f0:	e043      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa71 	bl	80036e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0208 	orr.w	r2, r2, #8
 800320c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0204 	bic.w	r2, r2, #4
 800321c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
      break;
 8003230:	e023      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fabb 	bl	80037b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800324c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800325c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69d9      	ldr	r1, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	61da      	str	r2, [r3, #28]
      break;
 8003272:	e002      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_TIM_ConfigClockSource+0x1c>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e0b4      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x186>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e0:	d03e      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0xd4>
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e6:	f200 8087 	bhi.w	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 80032ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ee:	f000 8086 	beq.w	80033fe <HAL_TIM_ConfigClockSource+0x172>
 80032f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f6:	d87f      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b70      	cmp	r3, #112	@ 0x70
 80032fa:	d01a      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0xa6>
 80032fc:	2b70      	cmp	r3, #112	@ 0x70
 80032fe:	d87b      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b60      	cmp	r3, #96	@ 0x60
 8003302:	d050      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003304:	2b60      	cmp	r3, #96	@ 0x60
 8003306:	d877      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b50      	cmp	r3, #80	@ 0x50
 800330a:	d03c      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0xfa>
 800330c:	2b50      	cmp	r3, #80	@ 0x50
 800330e:	d873      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d058      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003314:	2b40      	cmp	r3, #64	@ 0x40
 8003316:	d86f      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003318:	2b30      	cmp	r3, #48	@ 0x30
 800331a:	d064      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	2b30      	cmp	r3, #48	@ 0x30
 800331e:	d86b      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003320:	2b20      	cmp	r3, #32
 8003322:	d060      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003324:	2b20      	cmp	r3, #32
 8003326:	d867      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d05c      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 800332c:	2b10      	cmp	r3, #16
 800332e:	d05a      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003330:	e062      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003342:	f000 fafc 	bl	800393e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	609a      	str	r2, [r3, #8]
      break;
 800335e:	e04f      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003370:	f000 fae5 	bl	800393e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003382:	609a      	str	r2, [r3, #8]
      break;
 8003384:	e03c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003392:	461a      	mov	r2, r3
 8003394:	f000 fa5c 	bl	8003850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2150      	movs	r1, #80	@ 0x50
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fab3 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 80033a4:	e02c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b2:	461a      	mov	r2, r3
 80033b4:	f000 fa7a 	bl	80038ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2160      	movs	r1, #96	@ 0x60
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 faa3 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 80033c4:	e01c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	461a      	mov	r2, r3
 80033d4:	f000 fa3c 	bl	8003850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2140      	movs	r1, #64	@ 0x40
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa93 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 80033e4:	e00c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f000 fa8a 	bl	800390a <TIM_ITRx_SetConfig>
      break;
 80033f6:	e003      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	e000      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
	...

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a2f      	ldr	r2, [pc, #188]	@ (8003534 <TIM_Base_SetConfig+0xd0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a2c      	ldr	r2, [pc, #176]	@ (8003538 <TIM_Base_SetConfig+0xd4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a2b      	ldr	r2, [pc, #172]	@ (800353c <TIM_Base_SetConfig+0xd8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a22      	ldr	r2, [pc, #136]	@ (8003534 <TIM_Base_SetConfig+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b4:	d007      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <TIM_Base_SetConfig+0xd4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1e      	ldr	r2, [pc, #120]	@ (800353c <TIM_Base_SetConfig+0xd8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d108      	bne.n	80034d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003534 <TIM_Base_SetConfig+0xd0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f023 0201 	bic.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]
  }
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800

08003540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0201 	bic.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 0302 	bic.w	r3, r3, #2
 8003588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a1c      	ldr	r2, [pc, #112]	@ (8003608 <TIM_OC1_SetConfig+0xc8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d10c      	bne.n	80035b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0308 	bic.w	r3, r3, #8
 80035a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a13      	ldr	r2, [pc, #76]	@ (8003608 <TIM_OC1_SetConfig+0xc8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	621a      	str	r2, [r3, #32]
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00

0800360c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 0210 	bic.w	r2, r3, #16
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0320 	bic.w	r3, r3, #32
 8003656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1d      	ldr	r2, [pc, #116]	@ (80036dc <TIM_OC2_SetConfig+0xd0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10d      	bne.n	8003688 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <TIM_OC2_SetConfig+0xd0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d113      	bne.n	80036b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00

080036e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1d      	ldr	r2, [pc, #116]	@ (80037b0 <TIM_OC3_SetConfig+0xd0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10d      	bne.n	800375a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a14      	ldr	r2, [pc, #80]	@ (80037b0 <TIM_OC3_SetConfig+0xd0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d113      	bne.n	800378a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00

080037b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	031b      	lsls	r3, r3, #12
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a0f      	ldr	r2, [pc, #60]	@ (800384c <TIM_OC4_SetConfig+0x98>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d109      	bne.n	8003828 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800381a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	621a      	str	r2, [r3, #32]
}
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	40012c00 	.word	0x40012c00

08003850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f023 0201 	bic.w	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800387a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f023 030a 	bic.w	r3, r3, #10
 800388c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f023 0210 	bic.w	r2, r3, #16
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	031b      	lsls	r3, r3, #12
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	621a      	str	r2, [r3, #32]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	f043 0307 	orr.w	r3, r3, #7
 800392c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800393e:	b480      	push	{r7}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	431a      	orrs	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	609a      	str	r2, [r3, #8]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2201      	movs	r2, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d8:	2302      	movs	r3, #2
 80039da:	e046      	b.n	8003a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a28:	d009      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a12      	ldr	r2, [pc, #72]	@ (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10c      	bne.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800

08003a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e03d      	b.n	8003b18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e042      	b.n	8003bde <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fd fe55 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2224      	movs	r2, #36	@ 0x24
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f972 	bl	8003e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b08a      	sub	sp, #40	@ 0x28
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d175      	bne.n	8003cf2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_UART_Transmit+0x2c>
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06e      	b.n	8003cf4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2221      	movs	r2, #33	@ 0x21
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c24:	f7fd ffcc 	bl	8001bc0 <HAL_GetTick>
 8003c28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	d108      	bne.n	8003c52 <HAL_UART_Transmit+0x6c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e003      	b.n	8003c5a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5a:	e02e      	b.n	8003cba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2200      	movs	r2, #0
 8003c64:	2180      	movs	r1, #128	@ 0x80
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f848 	bl	8003cfc <UART_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e03a      	b.n	8003cf4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3302      	adds	r3, #2
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e007      	b.n	8003cac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1cb      	bne.n	8003c5c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2140      	movs	r1, #64	@ 0x40
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f814 	bl	8003cfc <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e006      	b.n	8003cf4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e000      	b.n	8003cf4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
  }
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0c:	e03b      	b.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d037      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d16:	f7fd ff53 	bl	8001bc0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e03a      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d023      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b80      	cmp	r3, #128	@ 0x80
 8003d42:	d020      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b40      	cmp	r3, #64	@ 0x40
 8003d48:	d01d      	beq.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d116      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f81d 	bl	8003dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2208      	movs	r2, #8
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e00f      	b.n	8003da6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d0b4      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b095      	sub	sp, #84	@ 0x54
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dd6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d119      	bne.n	8003e5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e46:	61ba      	str	r2, [r7, #24]
 8003e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6979      	ldr	r1, [r7, #20]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	613b      	str	r3, [r7, #16]
   return(result);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e68:	bf00      	nop
 8003e6a:	3754      	adds	r7, #84	@ 0x54
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
	...

08003e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003eae:	f023 030c 	bic.w	r3, r3, #12
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f88 <UART_SetConfig+0x114>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d103      	bne.n	8003ee4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7fe fd26 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	e002      	b.n	8003eea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f7fe fd0e 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8003ee8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009a      	lsls	r2, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	4a22      	ldr	r2, [pc, #136]	@ (8003f8c <UART_SetConfig+0x118>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	0119      	lsls	r1, r3, #4
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f20:	4b1a      	ldr	r3, [pc, #104]	@ (8003f8c <UART_SetConfig+0x118>)
 8003f22:	fba3 0302 	umull	r0, r3, r3, r2
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	2064      	movs	r0, #100	@ 0x64
 8003f2a:	fb00 f303 	mul.w	r3, r0, r3
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	3332      	adds	r3, #50	@ 0x32
 8003f34:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <UART_SetConfig+0x118>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f40:	4419      	add	r1, r3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009a      	lsls	r2, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f58:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <UART_SetConfig+0x118>)
 8003f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2064      	movs	r0, #100	@ 0x64
 8003f62:	fb00 f303 	mul.w	r3, r0, r3
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	3332      	adds	r3, #50	@ 0x32
 8003f6c:	4a07      	ldr	r2, [pc, #28]	@ (8003f8c <UART_SetConfig+0x118>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	f003 020f 	and.w	r2, r3, #15
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40013800 	.word	0x40013800
 8003f8c:	51eb851f 	.word	0x51eb851f

08003f90 <__cvt>:
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f96:	461d      	mov	r5, r3
 8003f98:	bfbb      	ittet	lt
 8003f9a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003f9e:	461d      	movlt	r5, r3
 8003fa0:	2300      	movge	r3, #0
 8003fa2:	232d      	movlt	r3, #45	@ 0x2d
 8003fa4:	b088      	sub	sp, #32
 8003fa6:	4614      	mov	r4, r2
 8003fa8:	bfb8      	it	lt
 8003faa:	4614      	movlt	r4, r2
 8003fac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003fae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003fb0:	7013      	strb	r3, [r2, #0]
 8003fb2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003fb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003fb8:	f023 0820 	bic.w	r8, r3, #32
 8003fbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003fc0:	d005      	beq.n	8003fce <__cvt+0x3e>
 8003fc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003fc6:	d100      	bne.n	8003fca <__cvt+0x3a>
 8003fc8:	3601      	adds	r6, #1
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e000      	b.n	8003fd0 <__cvt+0x40>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	aa07      	add	r2, sp, #28
 8003fd2:	9204      	str	r2, [sp, #16]
 8003fd4:	aa06      	add	r2, sp, #24
 8003fd6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003fda:	e9cd 3600 	strd	r3, r6, [sp]
 8003fde:	4622      	mov	r2, r4
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	f000 fe6d 	bl	8004cc0 <_dtoa_r>
 8003fe6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003fea:	4607      	mov	r7, r0
 8003fec:	d119      	bne.n	8004022 <__cvt+0x92>
 8003fee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ff0:	07db      	lsls	r3, r3, #31
 8003ff2:	d50e      	bpl.n	8004012 <__cvt+0x82>
 8003ff4:	eb00 0906 	add.w	r9, r0, r6
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	4629      	mov	r1, r5
 8004000:	f7fc fd86 	bl	8000b10 <__aeabi_dcmpeq>
 8004004:	b108      	cbz	r0, 800400a <__cvt+0x7a>
 8004006:	f8cd 901c 	str.w	r9, [sp, #28]
 800400a:	2230      	movs	r2, #48	@ 0x30
 800400c:	9b07      	ldr	r3, [sp, #28]
 800400e:	454b      	cmp	r3, r9
 8004010:	d31e      	bcc.n	8004050 <__cvt+0xc0>
 8004012:	4638      	mov	r0, r7
 8004014:	9b07      	ldr	r3, [sp, #28]
 8004016:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004018:	1bdb      	subs	r3, r3, r7
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	b008      	add	sp, #32
 800401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004022:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004026:	eb00 0906 	add.w	r9, r0, r6
 800402a:	d1e5      	bne.n	8003ff8 <__cvt+0x68>
 800402c:	7803      	ldrb	r3, [r0, #0]
 800402e:	2b30      	cmp	r3, #48	@ 0x30
 8004030:	d10a      	bne.n	8004048 <__cvt+0xb8>
 8004032:	2200      	movs	r2, #0
 8004034:	2300      	movs	r3, #0
 8004036:	4620      	mov	r0, r4
 8004038:	4629      	mov	r1, r5
 800403a:	f7fc fd69 	bl	8000b10 <__aeabi_dcmpeq>
 800403e:	b918      	cbnz	r0, 8004048 <__cvt+0xb8>
 8004040:	f1c6 0601 	rsb	r6, r6, #1
 8004044:	f8ca 6000 	str.w	r6, [sl]
 8004048:	f8da 3000 	ldr.w	r3, [sl]
 800404c:	4499      	add	r9, r3
 800404e:	e7d3      	b.n	8003ff8 <__cvt+0x68>
 8004050:	1c59      	adds	r1, r3, #1
 8004052:	9107      	str	r1, [sp, #28]
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e7d9      	b.n	800400c <__cvt+0x7c>

08004058 <__exponent>:
 8004058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800405a:	2900      	cmp	r1, #0
 800405c:	bfb6      	itet	lt
 800405e:	232d      	movlt	r3, #45	@ 0x2d
 8004060:	232b      	movge	r3, #43	@ 0x2b
 8004062:	4249      	neglt	r1, r1
 8004064:	2909      	cmp	r1, #9
 8004066:	7002      	strb	r2, [r0, #0]
 8004068:	7043      	strb	r3, [r0, #1]
 800406a:	dd29      	ble.n	80040c0 <__exponent+0x68>
 800406c:	f10d 0307 	add.w	r3, sp, #7
 8004070:	461d      	mov	r5, r3
 8004072:	270a      	movs	r7, #10
 8004074:	fbb1 f6f7 	udiv	r6, r1, r7
 8004078:	461a      	mov	r2, r3
 800407a:	fb07 1416 	mls	r4, r7, r6, r1
 800407e:	3430      	adds	r4, #48	@ 0x30
 8004080:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004084:	460c      	mov	r4, r1
 8004086:	2c63      	cmp	r4, #99	@ 0x63
 8004088:	4631      	mov	r1, r6
 800408a:	f103 33ff 	add.w	r3, r3, #4294967295
 800408e:	dcf1      	bgt.n	8004074 <__exponent+0x1c>
 8004090:	3130      	adds	r1, #48	@ 0x30
 8004092:	1e94      	subs	r4, r2, #2
 8004094:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004098:	4623      	mov	r3, r4
 800409a:	1c41      	adds	r1, r0, #1
 800409c:	42ab      	cmp	r3, r5
 800409e:	d30a      	bcc.n	80040b6 <__exponent+0x5e>
 80040a0:	f10d 0309 	add.w	r3, sp, #9
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	42ac      	cmp	r4, r5
 80040a8:	bf88      	it	hi
 80040aa:	2300      	movhi	r3, #0
 80040ac:	3302      	adds	r3, #2
 80040ae:	4403      	add	r3, r0
 80040b0:	1a18      	subs	r0, r3, r0
 80040b2:	b003      	add	sp, #12
 80040b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80040ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80040be:	e7ed      	b.n	800409c <__exponent+0x44>
 80040c0:	2330      	movs	r3, #48	@ 0x30
 80040c2:	3130      	adds	r1, #48	@ 0x30
 80040c4:	7083      	strb	r3, [r0, #2]
 80040c6:	70c1      	strb	r1, [r0, #3]
 80040c8:	1d03      	adds	r3, r0, #4
 80040ca:	e7f1      	b.n	80040b0 <__exponent+0x58>

080040cc <_printf_float>:
 80040cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d0:	b091      	sub	sp, #68	@ 0x44
 80040d2:	460c      	mov	r4, r1
 80040d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80040d8:	4616      	mov	r6, r2
 80040da:	461f      	mov	r7, r3
 80040dc:	4605      	mov	r5, r0
 80040de:	f000 fce1 	bl	8004aa4 <_localeconv_r>
 80040e2:	6803      	ldr	r3, [r0, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	9308      	str	r3, [sp, #32]
 80040e8:	f7fc f832 	bl	8000150 <strlen>
 80040ec:	2300      	movs	r3, #0
 80040ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80040f0:	f8d8 3000 	ldr.w	r3, [r8]
 80040f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80040f6:	3307      	adds	r3, #7
 80040f8:	f023 0307 	bic.w	r3, r3, #7
 80040fc:	f103 0208 	add.w	r2, r3, #8
 8004100:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004104:	f8d4 b000 	ldr.w	fp, [r4]
 8004108:	f8c8 2000 	str.w	r2, [r8]
 800410c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004110:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004116:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004122:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004126:	4b9c      	ldr	r3, [pc, #624]	@ (8004398 <_printf_float+0x2cc>)
 8004128:	f7fc fd24 	bl	8000b74 <__aeabi_dcmpun>
 800412c:	bb70      	cbnz	r0, 800418c <_printf_float+0xc0>
 800412e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004132:	f04f 32ff 	mov.w	r2, #4294967295
 8004136:	4b98      	ldr	r3, [pc, #608]	@ (8004398 <_printf_float+0x2cc>)
 8004138:	f7fc fcfe 	bl	8000b38 <__aeabi_dcmple>
 800413c:	bb30      	cbnz	r0, 800418c <_printf_float+0xc0>
 800413e:	2200      	movs	r2, #0
 8004140:	2300      	movs	r3, #0
 8004142:	4640      	mov	r0, r8
 8004144:	4649      	mov	r1, r9
 8004146:	f7fc fced 	bl	8000b24 <__aeabi_dcmplt>
 800414a:	b110      	cbz	r0, 8004152 <_printf_float+0x86>
 800414c:	232d      	movs	r3, #45	@ 0x2d
 800414e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004152:	4a92      	ldr	r2, [pc, #584]	@ (800439c <_printf_float+0x2d0>)
 8004154:	4b92      	ldr	r3, [pc, #584]	@ (80043a0 <_printf_float+0x2d4>)
 8004156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800415a:	bf94      	ite	ls
 800415c:	4690      	movls	r8, r2
 800415e:	4698      	movhi	r8, r3
 8004160:	2303      	movs	r3, #3
 8004162:	f04f 0900 	mov.w	r9, #0
 8004166:	6123      	str	r3, [r4, #16]
 8004168:	f02b 0304 	bic.w	r3, fp, #4
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	4633      	mov	r3, r6
 8004170:	4621      	mov	r1, r4
 8004172:	4628      	mov	r0, r5
 8004174:	9700      	str	r7, [sp, #0]
 8004176:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004178:	f000 f9d4 	bl	8004524 <_printf_common>
 800417c:	3001      	adds	r0, #1
 800417e:	f040 8090 	bne.w	80042a2 <_printf_float+0x1d6>
 8004182:	f04f 30ff 	mov.w	r0, #4294967295
 8004186:	b011      	add	sp, #68	@ 0x44
 8004188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	4640      	mov	r0, r8
 8004192:	4649      	mov	r1, r9
 8004194:	f7fc fcee 	bl	8000b74 <__aeabi_dcmpun>
 8004198:	b148      	cbz	r0, 80041ae <_printf_float+0xe2>
 800419a:	464b      	mov	r3, r9
 800419c:	2b00      	cmp	r3, #0
 800419e:	bfb8      	it	lt
 80041a0:	232d      	movlt	r3, #45	@ 0x2d
 80041a2:	4a80      	ldr	r2, [pc, #512]	@ (80043a4 <_printf_float+0x2d8>)
 80041a4:	bfb8      	it	lt
 80041a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041aa:	4b7f      	ldr	r3, [pc, #508]	@ (80043a8 <_printf_float+0x2dc>)
 80041ac:	e7d3      	b.n	8004156 <_printf_float+0x8a>
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	d13f      	bne.n	8004238 <_printf_float+0x16c>
 80041b8:	2306      	movs	r3, #6
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	9206      	str	r2, [sp, #24]
 80041c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80041c8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80041cc:	aa0d      	add	r2, sp, #52	@ 0x34
 80041ce:	9203      	str	r2, [sp, #12]
 80041d0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80041d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	4642      	mov	r2, r8
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4628      	mov	r0, r5
 80041e0:	464b      	mov	r3, r9
 80041e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80041e4:	f7ff fed4 	bl	8003f90 <__cvt>
 80041e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80041ea:	4680      	mov	r8, r0
 80041ec:	2947      	cmp	r1, #71	@ 0x47
 80041ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80041f0:	d128      	bne.n	8004244 <_printf_float+0x178>
 80041f2:	1cc8      	adds	r0, r1, #3
 80041f4:	db02      	blt.n	80041fc <_printf_float+0x130>
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	4299      	cmp	r1, r3
 80041fa:	dd40      	ble.n	800427e <_printf_float+0x1b2>
 80041fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004200:	fa5f fa8a 	uxtb.w	sl, sl
 8004204:	4652      	mov	r2, sl
 8004206:	3901      	subs	r1, #1
 8004208:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800420c:	910d      	str	r1, [sp, #52]	@ 0x34
 800420e:	f7ff ff23 	bl	8004058 <__exponent>
 8004212:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004214:	4681      	mov	r9, r0
 8004216:	1813      	adds	r3, r2, r0
 8004218:	2a01      	cmp	r2, #1
 800421a:	6123      	str	r3, [r4, #16]
 800421c:	dc02      	bgt.n	8004224 <_printf_float+0x158>
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	07d2      	lsls	r2, r2, #31
 8004222:	d501      	bpl.n	8004228 <_printf_float+0x15c>
 8004224:	3301      	adds	r3, #1
 8004226:	6123      	str	r3, [r4, #16]
 8004228:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800422c:	2b00      	cmp	r3, #0
 800422e:	d09e      	beq.n	800416e <_printf_float+0xa2>
 8004230:	232d      	movs	r3, #45	@ 0x2d
 8004232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004236:	e79a      	b.n	800416e <_printf_float+0xa2>
 8004238:	2947      	cmp	r1, #71	@ 0x47
 800423a:	d1bf      	bne.n	80041bc <_printf_float+0xf0>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1bd      	bne.n	80041bc <_printf_float+0xf0>
 8004240:	2301      	movs	r3, #1
 8004242:	e7ba      	b.n	80041ba <_printf_float+0xee>
 8004244:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004248:	d9dc      	bls.n	8004204 <_printf_float+0x138>
 800424a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800424e:	d118      	bne.n	8004282 <_printf_float+0x1b6>
 8004250:	2900      	cmp	r1, #0
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	dd0b      	ble.n	800426e <_printf_float+0x1a2>
 8004256:	6121      	str	r1, [r4, #16]
 8004258:	b913      	cbnz	r3, 8004260 <_printf_float+0x194>
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	07d0      	lsls	r0, r2, #31
 800425e:	d502      	bpl.n	8004266 <_printf_float+0x19a>
 8004260:	3301      	adds	r3, #1
 8004262:	440b      	add	r3, r1
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	f04f 0900 	mov.w	r9, #0
 800426a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800426c:	e7dc      	b.n	8004228 <_printf_float+0x15c>
 800426e:	b913      	cbnz	r3, 8004276 <_printf_float+0x1aa>
 8004270:	6822      	ldr	r2, [r4, #0]
 8004272:	07d2      	lsls	r2, r2, #31
 8004274:	d501      	bpl.n	800427a <_printf_float+0x1ae>
 8004276:	3302      	adds	r3, #2
 8004278:	e7f4      	b.n	8004264 <_printf_float+0x198>
 800427a:	2301      	movs	r3, #1
 800427c:	e7f2      	b.n	8004264 <_printf_float+0x198>
 800427e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004284:	4299      	cmp	r1, r3
 8004286:	db05      	blt.n	8004294 <_printf_float+0x1c8>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	6121      	str	r1, [r4, #16]
 800428c:	07d8      	lsls	r0, r3, #31
 800428e:	d5ea      	bpl.n	8004266 <_printf_float+0x19a>
 8004290:	1c4b      	adds	r3, r1, #1
 8004292:	e7e7      	b.n	8004264 <_printf_float+0x198>
 8004294:	2900      	cmp	r1, #0
 8004296:	bfcc      	ite	gt
 8004298:	2201      	movgt	r2, #1
 800429a:	f1c1 0202 	rsble	r2, r1, #2
 800429e:	4413      	add	r3, r2
 80042a0:	e7e0      	b.n	8004264 <_printf_float+0x198>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	055a      	lsls	r2, r3, #21
 80042a6:	d407      	bmi.n	80042b8 <_printf_float+0x1ec>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	4642      	mov	r2, r8
 80042ac:	4631      	mov	r1, r6
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b8      	blx	r7
 80042b2:	3001      	adds	r0, #1
 80042b4:	d12b      	bne.n	800430e <_printf_float+0x242>
 80042b6:	e764      	b.n	8004182 <_printf_float+0xb6>
 80042b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042bc:	f240 80dc 	bls.w	8004478 <_printf_float+0x3ac>
 80042c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042c4:	2200      	movs	r2, #0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f7fc fc22 	bl	8000b10 <__aeabi_dcmpeq>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d033      	beq.n	8004338 <_printf_float+0x26c>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4631      	mov	r1, r6
 80042d4:	4628      	mov	r0, r5
 80042d6:	4a35      	ldr	r2, [pc, #212]	@ (80043ac <_printf_float+0x2e0>)
 80042d8:	47b8      	blx	r7
 80042da:	3001      	adds	r0, #1
 80042dc:	f43f af51 	beq.w	8004182 <_printf_float+0xb6>
 80042e0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80042e4:	4543      	cmp	r3, r8
 80042e6:	db02      	blt.n	80042ee <_printf_float+0x222>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	07d8      	lsls	r0, r3, #31
 80042ec:	d50f      	bpl.n	800430e <_printf_float+0x242>
 80042ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042f2:	4631      	mov	r1, r6
 80042f4:	4628      	mov	r0, r5
 80042f6:	47b8      	blx	r7
 80042f8:	3001      	adds	r0, #1
 80042fa:	f43f af42 	beq.w	8004182 <_printf_float+0xb6>
 80042fe:	f04f 0900 	mov.w	r9, #0
 8004302:	f108 38ff 	add.w	r8, r8, #4294967295
 8004306:	f104 0a1a 	add.w	sl, r4, #26
 800430a:	45c8      	cmp	r8, r9
 800430c:	dc09      	bgt.n	8004322 <_printf_float+0x256>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	079b      	lsls	r3, r3, #30
 8004312:	f100 8102 	bmi.w	800451a <_printf_float+0x44e>
 8004316:	68e0      	ldr	r0, [r4, #12]
 8004318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800431a:	4298      	cmp	r0, r3
 800431c:	bfb8      	it	lt
 800431e:	4618      	movlt	r0, r3
 8004320:	e731      	b.n	8004186 <_printf_float+0xba>
 8004322:	2301      	movs	r3, #1
 8004324:	4652      	mov	r2, sl
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	47b8      	blx	r7
 800432c:	3001      	adds	r0, #1
 800432e:	f43f af28 	beq.w	8004182 <_printf_float+0xb6>
 8004332:	f109 0901 	add.w	r9, r9, #1
 8004336:	e7e8      	b.n	800430a <_printf_float+0x23e>
 8004338:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800433a:	2b00      	cmp	r3, #0
 800433c:	dc38      	bgt.n	80043b0 <_printf_float+0x2e4>
 800433e:	2301      	movs	r3, #1
 8004340:	4631      	mov	r1, r6
 8004342:	4628      	mov	r0, r5
 8004344:	4a19      	ldr	r2, [pc, #100]	@ (80043ac <_printf_float+0x2e0>)
 8004346:	47b8      	blx	r7
 8004348:	3001      	adds	r0, #1
 800434a:	f43f af1a 	beq.w	8004182 <_printf_float+0xb6>
 800434e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004352:	ea59 0303 	orrs.w	r3, r9, r3
 8004356:	d102      	bne.n	800435e <_printf_float+0x292>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	07d9      	lsls	r1, r3, #31
 800435c:	d5d7      	bpl.n	800430e <_printf_float+0x242>
 800435e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	f43f af0a 	beq.w	8004182 <_printf_float+0xb6>
 800436e:	f04f 0a00 	mov.w	sl, #0
 8004372:	f104 0b1a 	add.w	fp, r4, #26
 8004376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004378:	425b      	negs	r3, r3
 800437a:	4553      	cmp	r3, sl
 800437c:	dc01      	bgt.n	8004382 <_printf_float+0x2b6>
 800437e:	464b      	mov	r3, r9
 8004380:	e793      	b.n	80042aa <_printf_float+0x1de>
 8004382:	2301      	movs	r3, #1
 8004384:	465a      	mov	r2, fp
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	f43f aef8 	beq.w	8004182 <_printf_float+0xb6>
 8004392:	f10a 0a01 	add.w	sl, sl, #1
 8004396:	e7ee      	b.n	8004376 <_printf_float+0x2aa>
 8004398:	7fefffff 	.word	0x7fefffff
 800439c:	08006c8e 	.word	0x08006c8e
 80043a0:	08006c92 	.word	0x08006c92
 80043a4:	08006c96 	.word	0x08006c96
 80043a8:	08006c9a 	.word	0x08006c9a
 80043ac:	08006c9e 	.word	0x08006c9e
 80043b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80043b6:	4553      	cmp	r3, sl
 80043b8:	bfa8      	it	ge
 80043ba:	4653      	movge	r3, sl
 80043bc:	2b00      	cmp	r3, #0
 80043be:	4699      	mov	r9, r3
 80043c0:	dc36      	bgt.n	8004430 <_printf_float+0x364>
 80043c2:	f04f 0b00 	mov.w	fp, #0
 80043c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043ca:	f104 021a 	add.w	r2, r4, #26
 80043ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80043d2:	eba3 0309 	sub.w	r3, r3, r9
 80043d6:	455b      	cmp	r3, fp
 80043d8:	dc31      	bgt.n	800443e <_printf_float+0x372>
 80043da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043dc:	459a      	cmp	sl, r3
 80043de:	dc3a      	bgt.n	8004456 <_printf_float+0x38a>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	07da      	lsls	r2, r3, #31
 80043e4:	d437      	bmi.n	8004456 <_printf_float+0x38a>
 80043e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043e8:	ebaa 0903 	sub.w	r9, sl, r3
 80043ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043ee:	ebaa 0303 	sub.w	r3, sl, r3
 80043f2:	4599      	cmp	r9, r3
 80043f4:	bfa8      	it	ge
 80043f6:	4699      	movge	r9, r3
 80043f8:	f1b9 0f00 	cmp.w	r9, #0
 80043fc:	dc33      	bgt.n	8004466 <_printf_float+0x39a>
 80043fe:	f04f 0800 	mov.w	r8, #0
 8004402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004406:	f104 0b1a 	add.w	fp, r4, #26
 800440a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800440c:	ebaa 0303 	sub.w	r3, sl, r3
 8004410:	eba3 0309 	sub.w	r3, r3, r9
 8004414:	4543      	cmp	r3, r8
 8004416:	f77f af7a 	ble.w	800430e <_printf_float+0x242>
 800441a:	2301      	movs	r3, #1
 800441c:	465a      	mov	r2, fp
 800441e:	4631      	mov	r1, r6
 8004420:	4628      	mov	r0, r5
 8004422:	47b8      	blx	r7
 8004424:	3001      	adds	r0, #1
 8004426:	f43f aeac 	beq.w	8004182 <_printf_float+0xb6>
 800442a:	f108 0801 	add.w	r8, r8, #1
 800442e:	e7ec      	b.n	800440a <_printf_float+0x33e>
 8004430:	4642      	mov	r2, r8
 8004432:	4631      	mov	r1, r6
 8004434:	4628      	mov	r0, r5
 8004436:	47b8      	blx	r7
 8004438:	3001      	adds	r0, #1
 800443a:	d1c2      	bne.n	80043c2 <_printf_float+0x2f6>
 800443c:	e6a1      	b.n	8004182 <_printf_float+0xb6>
 800443e:	2301      	movs	r3, #1
 8004440:	4631      	mov	r1, r6
 8004442:	4628      	mov	r0, r5
 8004444:	920a      	str	r2, [sp, #40]	@ 0x28
 8004446:	47b8      	blx	r7
 8004448:	3001      	adds	r0, #1
 800444a:	f43f ae9a 	beq.w	8004182 <_printf_float+0xb6>
 800444e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004450:	f10b 0b01 	add.w	fp, fp, #1
 8004454:	e7bb      	b.n	80043ce <_printf_float+0x302>
 8004456:	4631      	mov	r1, r6
 8004458:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	d1c0      	bne.n	80043e6 <_printf_float+0x31a>
 8004464:	e68d      	b.n	8004182 <_printf_float+0xb6>
 8004466:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004468:	464b      	mov	r3, r9
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	4442      	add	r2, r8
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	d1c3      	bne.n	80043fe <_printf_float+0x332>
 8004476:	e684      	b.n	8004182 <_printf_float+0xb6>
 8004478:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800447c:	f1ba 0f01 	cmp.w	sl, #1
 8004480:	dc01      	bgt.n	8004486 <_printf_float+0x3ba>
 8004482:	07db      	lsls	r3, r3, #31
 8004484:	d536      	bpl.n	80044f4 <_printf_float+0x428>
 8004486:	2301      	movs	r3, #1
 8004488:	4642      	mov	r2, r8
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	47b8      	blx	r7
 8004490:	3001      	adds	r0, #1
 8004492:	f43f ae76 	beq.w	8004182 <_printf_float+0xb6>
 8004496:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	f43f ae6e 	beq.w	8004182 <_printf_float+0xb6>
 80044a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044aa:	2200      	movs	r2, #0
 80044ac:	2300      	movs	r3, #0
 80044ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044b2:	f7fc fb2d 	bl	8000b10 <__aeabi_dcmpeq>
 80044b6:	b9c0      	cbnz	r0, 80044ea <_printf_float+0x41e>
 80044b8:	4653      	mov	r3, sl
 80044ba:	f108 0201 	add.w	r2, r8, #1
 80044be:	4631      	mov	r1, r6
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b8      	blx	r7
 80044c4:	3001      	adds	r0, #1
 80044c6:	d10c      	bne.n	80044e2 <_printf_float+0x416>
 80044c8:	e65b      	b.n	8004182 <_printf_float+0xb6>
 80044ca:	2301      	movs	r3, #1
 80044cc:	465a      	mov	r2, fp
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b8      	blx	r7
 80044d4:	3001      	adds	r0, #1
 80044d6:	f43f ae54 	beq.w	8004182 <_printf_float+0xb6>
 80044da:	f108 0801 	add.w	r8, r8, #1
 80044de:	45d0      	cmp	r8, sl
 80044e0:	dbf3      	blt.n	80044ca <_printf_float+0x3fe>
 80044e2:	464b      	mov	r3, r9
 80044e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80044e8:	e6e0      	b.n	80042ac <_printf_float+0x1e0>
 80044ea:	f04f 0800 	mov.w	r8, #0
 80044ee:	f104 0b1a 	add.w	fp, r4, #26
 80044f2:	e7f4      	b.n	80044de <_printf_float+0x412>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4642      	mov	r2, r8
 80044f8:	e7e1      	b.n	80044be <_printf_float+0x3f2>
 80044fa:	2301      	movs	r3, #1
 80044fc:	464a      	mov	r2, r9
 80044fe:	4631      	mov	r1, r6
 8004500:	4628      	mov	r0, r5
 8004502:	47b8      	blx	r7
 8004504:	3001      	adds	r0, #1
 8004506:	f43f ae3c 	beq.w	8004182 <_printf_float+0xb6>
 800450a:	f108 0801 	add.w	r8, r8, #1
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004512:	1a5b      	subs	r3, r3, r1
 8004514:	4543      	cmp	r3, r8
 8004516:	dcf0      	bgt.n	80044fa <_printf_float+0x42e>
 8004518:	e6fd      	b.n	8004316 <_printf_float+0x24a>
 800451a:	f04f 0800 	mov.w	r8, #0
 800451e:	f104 0919 	add.w	r9, r4, #25
 8004522:	e7f4      	b.n	800450e <_printf_float+0x442>

08004524 <_printf_common>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	4616      	mov	r6, r2
 800452a:	4698      	mov	r8, r3
 800452c:	688a      	ldr	r2, [r1, #8]
 800452e:	690b      	ldr	r3, [r1, #16]
 8004530:	4607      	mov	r7, r0
 8004532:	4293      	cmp	r3, r2
 8004534:	bfb8      	it	lt
 8004536:	4613      	movlt	r3, r2
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800453e:	460c      	mov	r4, r1
 8004540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004544:	b10a      	cbz	r2, 800454a <_printf_common+0x26>
 8004546:	3301      	adds	r3, #1
 8004548:	6033      	str	r3, [r6, #0]
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	0699      	lsls	r1, r3, #26
 800454e:	bf42      	ittt	mi
 8004550:	6833      	ldrmi	r3, [r6, #0]
 8004552:	3302      	addmi	r3, #2
 8004554:	6033      	strmi	r3, [r6, #0]
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	f015 0506 	ands.w	r5, r5, #6
 800455c:	d106      	bne.n	800456c <_printf_common+0x48>
 800455e:	f104 0a19 	add.w	sl, r4, #25
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	6832      	ldr	r2, [r6, #0]
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	42ab      	cmp	r3, r5
 800456a:	dc2b      	bgt.n	80045c4 <_printf_common+0xa0>
 800456c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	3b00      	subs	r3, #0
 8004574:	bf18      	it	ne
 8004576:	2301      	movne	r3, #1
 8004578:	0692      	lsls	r2, r2, #26
 800457a:	d430      	bmi.n	80045de <_printf_common+0xba>
 800457c:	4641      	mov	r1, r8
 800457e:	4638      	mov	r0, r7
 8004580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004584:	47c8      	blx	r9
 8004586:	3001      	adds	r0, #1
 8004588:	d023      	beq.n	80045d2 <_printf_common+0xae>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	f003 0306 	and.w	r3, r3, #6
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf14      	ite	ne
 8004596:	2500      	movne	r5, #0
 8004598:	6833      	ldreq	r3, [r6, #0]
 800459a:	f04f 0600 	mov.w	r6, #0
 800459e:	bf08      	it	eq
 80045a0:	68e5      	ldreq	r5, [r4, #12]
 80045a2:	f104 041a 	add.w	r4, r4, #26
 80045a6:	bf08      	it	eq
 80045a8:	1aed      	subeq	r5, r5, r3
 80045aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045ae:	bf08      	it	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bfc4      	itt	gt
 80045b8:	1a9b      	subgt	r3, r3, r2
 80045ba:	18ed      	addgt	r5, r5, r3
 80045bc:	42b5      	cmp	r5, r6
 80045be:	d11a      	bne.n	80045f6 <_printf_common+0xd2>
 80045c0:	2000      	movs	r0, #0
 80045c2:	e008      	b.n	80045d6 <_printf_common+0xb2>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4652      	mov	r2, sl
 80045c8:	4641      	mov	r1, r8
 80045ca:	4638      	mov	r0, r7
 80045cc:	47c8      	blx	r9
 80045ce:	3001      	adds	r0, #1
 80045d0:	d103      	bne.n	80045da <_printf_common+0xb6>
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045da:	3501      	adds	r5, #1
 80045dc:	e7c1      	b.n	8004562 <_printf_common+0x3e>
 80045de:	2030      	movs	r0, #48	@ 0x30
 80045e0:	18e1      	adds	r1, r4, r3
 80045e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045ec:	4422      	add	r2, r4
 80045ee:	3302      	adds	r3, #2
 80045f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045f4:	e7c2      	b.n	800457c <_printf_common+0x58>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4622      	mov	r2, r4
 80045fa:	4641      	mov	r1, r8
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c8      	blx	r9
 8004600:	3001      	adds	r0, #1
 8004602:	d0e6      	beq.n	80045d2 <_printf_common+0xae>
 8004604:	3601      	adds	r6, #1
 8004606:	e7d9      	b.n	80045bc <_printf_common+0x98>

08004608 <_printf_i>:
 8004608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	7e0f      	ldrb	r7, [r1, #24]
 800460e:	4691      	mov	r9, r2
 8004610:	2f78      	cmp	r7, #120	@ 0x78
 8004612:	4680      	mov	r8, r0
 8004614:	460c      	mov	r4, r1
 8004616:	469a      	mov	sl, r3
 8004618:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800461a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800461e:	d807      	bhi.n	8004630 <_printf_i+0x28>
 8004620:	2f62      	cmp	r7, #98	@ 0x62
 8004622:	d80a      	bhi.n	800463a <_printf_i+0x32>
 8004624:	2f00      	cmp	r7, #0
 8004626:	f000 80d3 	beq.w	80047d0 <_printf_i+0x1c8>
 800462a:	2f58      	cmp	r7, #88	@ 0x58
 800462c:	f000 80ba 	beq.w	80047a4 <_printf_i+0x19c>
 8004630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004638:	e03a      	b.n	80046b0 <_printf_i+0xa8>
 800463a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800463e:	2b15      	cmp	r3, #21
 8004640:	d8f6      	bhi.n	8004630 <_printf_i+0x28>
 8004642:	a101      	add	r1, pc, #4	@ (adr r1, 8004648 <_printf_i+0x40>)
 8004644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046b5 	.word	0x080046b5
 8004650:	08004631 	.word	0x08004631
 8004654:	08004631 	.word	0x08004631
 8004658:	08004631 	.word	0x08004631
 800465c:	08004631 	.word	0x08004631
 8004660:	080046b5 	.word	0x080046b5
 8004664:	08004631 	.word	0x08004631
 8004668:	08004631 	.word	0x08004631
 800466c:	08004631 	.word	0x08004631
 8004670:	08004631 	.word	0x08004631
 8004674:	080047b7 	.word	0x080047b7
 8004678:	080046df 	.word	0x080046df
 800467c:	08004771 	.word	0x08004771
 8004680:	08004631 	.word	0x08004631
 8004684:	08004631 	.word	0x08004631
 8004688:	080047d9 	.word	0x080047d9
 800468c:	08004631 	.word	0x08004631
 8004690:	080046df 	.word	0x080046df
 8004694:	08004631 	.word	0x08004631
 8004698:	08004631 	.word	0x08004631
 800469c:	08004779 	.word	0x08004779
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6032      	str	r2, [r6, #0]
 80046a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046b0:	2301      	movs	r3, #1
 80046b2:	e09e      	b.n	80047f2 <_printf_i+0x1ea>
 80046b4:	6833      	ldr	r3, [r6, #0]
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	1d19      	adds	r1, r3, #4
 80046ba:	6031      	str	r1, [r6, #0]
 80046bc:	0606      	lsls	r6, r0, #24
 80046be:	d501      	bpl.n	80046c4 <_printf_i+0xbc>
 80046c0:	681d      	ldr	r5, [r3, #0]
 80046c2:	e003      	b.n	80046cc <_printf_i+0xc4>
 80046c4:	0645      	lsls	r5, r0, #25
 80046c6:	d5fb      	bpl.n	80046c0 <_printf_i+0xb8>
 80046c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046cc:	2d00      	cmp	r5, #0
 80046ce:	da03      	bge.n	80046d8 <_printf_i+0xd0>
 80046d0:	232d      	movs	r3, #45	@ 0x2d
 80046d2:	426d      	negs	r5, r5
 80046d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046d8:	230a      	movs	r3, #10
 80046da:	4859      	ldr	r0, [pc, #356]	@ (8004840 <_printf_i+0x238>)
 80046dc:	e011      	b.n	8004702 <_printf_i+0xfa>
 80046de:	6821      	ldr	r1, [r4, #0]
 80046e0:	6833      	ldr	r3, [r6, #0]
 80046e2:	0608      	lsls	r0, r1, #24
 80046e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80046e8:	d402      	bmi.n	80046f0 <_printf_i+0xe8>
 80046ea:	0649      	lsls	r1, r1, #25
 80046ec:	bf48      	it	mi
 80046ee:	b2ad      	uxthmi	r5, r5
 80046f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	bf14      	ite	ne
 80046f6:	230a      	movne	r3, #10
 80046f8:	2308      	moveq	r3, #8
 80046fa:	4851      	ldr	r0, [pc, #324]	@ (8004840 <_printf_i+0x238>)
 80046fc:	2100      	movs	r1, #0
 80046fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004702:	6866      	ldr	r6, [r4, #4]
 8004704:	2e00      	cmp	r6, #0
 8004706:	bfa8      	it	ge
 8004708:	6821      	ldrge	r1, [r4, #0]
 800470a:	60a6      	str	r6, [r4, #8]
 800470c:	bfa4      	itt	ge
 800470e:	f021 0104 	bicge.w	r1, r1, #4
 8004712:	6021      	strge	r1, [r4, #0]
 8004714:	b90d      	cbnz	r5, 800471a <_printf_i+0x112>
 8004716:	2e00      	cmp	r6, #0
 8004718:	d04b      	beq.n	80047b2 <_printf_i+0x1aa>
 800471a:	4616      	mov	r6, r2
 800471c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004720:	fb03 5711 	mls	r7, r3, r1, r5
 8004724:	5dc7      	ldrb	r7, [r0, r7]
 8004726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800472a:	462f      	mov	r7, r5
 800472c:	42bb      	cmp	r3, r7
 800472e:	460d      	mov	r5, r1
 8004730:	d9f4      	bls.n	800471c <_printf_i+0x114>
 8004732:	2b08      	cmp	r3, #8
 8004734:	d10b      	bne.n	800474e <_printf_i+0x146>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	07df      	lsls	r7, r3, #31
 800473a:	d508      	bpl.n	800474e <_printf_i+0x146>
 800473c:	6923      	ldr	r3, [r4, #16]
 800473e:	6861      	ldr	r1, [r4, #4]
 8004740:	4299      	cmp	r1, r3
 8004742:	bfde      	ittt	le
 8004744:	2330      	movle	r3, #48	@ 0x30
 8004746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800474a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800474e:	1b92      	subs	r2, r2, r6
 8004750:	6122      	str	r2, [r4, #16]
 8004752:	464b      	mov	r3, r9
 8004754:	4621      	mov	r1, r4
 8004756:	4640      	mov	r0, r8
 8004758:	f8cd a000 	str.w	sl, [sp]
 800475c:	aa03      	add	r2, sp, #12
 800475e:	f7ff fee1 	bl	8004524 <_printf_common>
 8004762:	3001      	adds	r0, #1
 8004764:	d14a      	bne.n	80047fc <_printf_i+0x1f4>
 8004766:	f04f 30ff 	mov.w	r0, #4294967295
 800476a:	b004      	add	sp, #16
 800476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f043 0320 	orr.w	r3, r3, #32
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	2778      	movs	r7, #120	@ 0x78
 800477a:	4832      	ldr	r0, [pc, #200]	@ (8004844 <_printf_i+0x23c>)
 800477c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	6831      	ldr	r1, [r6, #0]
 8004784:	061f      	lsls	r7, r3, #24
 8004786:	f851 5b04 	ldr.w	r5, [r1], #4
 800478a:	d402      	bmi.n	8004792 <_printf_i+0x18a>
 800478c:	065f      	lsls	r7, r3, #25
 800478e:	bf48      	it	mi
 8004790:	b2ad      	uxthmi	r5, r5
 8004792:	6031      	str	r1, [r6, #0]
 8004794:	07d9      	lsls	r1, r3, #31
 8004796:	bf44      	itt	mi
 8004798:	f043 0320 	orrmi.w	r3, r3, #32
 800479c:	6023      	strmi	r3, [r4, #0]
 800479e:	b11d      	cbz	r5, 80047a8 <_printf_i+0x1a0>
 80047a0:	2310      	movs	r3, #16
 80047a2:	e7ab      	b.n	80046fc <_printf_i+0xf4>
 80047a4:	4826      	ldr	r0, [pc, #152]	@ (8004840 <_printf_i+0x238>)
 80047a6:	e7e9      	b.n	800477c <_printf_i+0x174>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	f023 0320 	bic.w	r3, r3, #32
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	e7f6      	b.n	80047a0 <_printf_i+0x198>
 80047b2:	4616      	mov	r6, r2
 80047b4:	e7bd      	b.n	8004732 <_printf_i+0x12a>
 80047b6:	6833      	ldr	r3, [r6, #0]
 80047b8:	6825      	ldr	r5, [r4, #0]
 80047ba:	1d18      	adds	r0, r3, #4
 80047bc:	6961      	ldr	r1, [r4, #20]
 80047be:	6030      	str	r0, [r6, #0]
 80047c0:	062e      	lsls	r6, r5, #24
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	d501      	bpl.n	80047ca <_printf_i+0x1c2>
 80047c6:	6019      	str	r1, [r3, #0]
 80047c8:	e002      	b.n	80047d0 <_printf_i+0x1c8>
 80047ca:	0668      	lsls	r0, r5, #25
 80047cc:	d5fb      	bpl.n	80047c6 <_printf_i+0x1be>
 80047ce:	8019      	strh	r1, [r3, #0]
 80047d0:	2300      	movs	r3, #0
 80047d2:	4616      	mov	r6, r2
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	e7bc      	b.n	8004752 <_printf_i+0x14a>
 80047d8:	6833      	ldr	r3, [r6, #0]
 80047da:	2100      	movs	r1, #0
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	6032      	str	r2, [r6, #0]
 80047e0:	681e      	ldr	r6, [r3, #0]
 80047e2:	6862      	ldr	r2, [r4, #4]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 f9d4 	bl	8004b92 <memchr>
 80047ea:	b108      	cbz	r0, 80047f0 <_printf_i+0x1e8>
 80047ec:	1b80      	subs	r0, r0, r6
 80047ee:	6060      	str	r0, [r4, #4]
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	6123      	str	r3, [r4, #16]
 80047f4:	2300      	movs	r3, #0
 80047f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047fa:	e7aa      	b.n	8004752 <_printf_i+0x14a>
 80047fc:	4632      	mov	r2, r6
 80047fe:	4649      	mov	r1, r9
 8004800:	4640      	mov	r0, r8
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	47d0      	blx	sl
 8004806:	3001      	adds	r0, #1
 8004808:	d0ad      	beq.n	8004766 <_printf_i+0x15e>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	079b      	lsls	r3, r3, #30
 800480e:	d413      	bmi.n	8004838 <_printf_i+0x230>
 8004810:	68e0      	ldr	r0, [r4, #12]
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	4298      	cmp	r0, r3
 8004816:	bfb8      	it	lt
 8004818:	4618      	movlt	r0, r3
 800481a:	e7a6      	b.n	800476a <_printf_i+0x162>
 800481c:	2301      	movs	r3, #1
 800481e:	4632      	mov	r2, r6
 8004820:	4649      	mov	r1, r9
 8004822:	4640      	mov	r0, r8
 8004824:	47d0      	blx	sl
 8004826:	3001      	adds	r0, #1
 8004828:	d09d      	beq.n	8004766 <_printf_i+0x15e>
 800482a:	3501      	adds	r5, #1
 800482c:	68e3      	ldr	r3, [r4, #12]
 800482e:	9903      	ldr	r1, [sp, #12]
 8004830:	1a5b      	subs	r3, r3, r1
 8004832:	42ab      	cmp	r3, r5
 8004834:	dcf2      	bgt.n	800481c <_printf_i+0x214>
 8004836:	e7eb      	b.n	8004810 <_printf_i+0x208>
 8004838:	2500      	movs	r5, #0
 800483a:	f104 0619 	add.w	r6, r4, #25
 800483e:	e7f5      	b.n	800482c <_printf_i+0x224>
 8004840:	08006ca0 	.word	0x08006ca0
 8004844:	08006cb1 	.word	0x08006cb1

08004848 <std>:
 8004848:	2300      	movs	r3, #0
 800484a:	b510      	push	{r4, lr}
 800484c:	4604      	mov	r4, r0
 800484e:	e9c0 3300 	strd	r3, r3, [r0]
 8004852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004856:	6083      	str	r3, [r0, #8]
 8004858:	8181      	strh	r1, [r0, #12]
 800485a:	6643      	str	r3, [r0, #100]	@ 0x64
 800485c:	81c2      	strh	r2, [r0, #14]
 800485e:	6183      	str	r3, [r0, #24]
 8004860:	4619      	mov	r1, r3
 8004862:	2208      	movs	r2, #8
 8004864:	305c      	adds	r0, #92	@ 0x5c
 8004866:	f000 f914 	bl	8004a92 <memset>
 800486a:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <std+0x58>)
 800486c:	6224      	str	r4, [r4, #32]
 800486e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004870:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <std+0x5c>)
 8004872:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004874:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <std+0x60>)
 8004876:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004878:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <std+0x64>)
 800487a:	6323      	str	r3, [r4, #48]	@ 0x30
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <std+0x68>)
 800487e:	429c      	cmp	r4, r3
 8004880:	d006      	beq.n	8004890 <std+0x48>
 8004882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004886:	4294      	cmp	r4, r2
 8004888:	d002      	beq.n	8004890 <std+0x48>
 800488a:	33d0      	adds	r3, #208	@ 0xd0
 800488c:	429c      	cmp	r4, r3
 800488e:	d105      	bne.n	800489c <std+0x54>
 8004890:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004898:	f000 b978 	b.w	8004b8c <__retarget_lock_init_recursive>
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop
 80048a0:	08004a0d 	.word	0x08004a0d
 80048a4:	08004a2f 	.word	0x08004a2f
 80048a8:	08004a67 	.word	0x08004a67
 80048ac:	08004a8b 	.word	0x08004a8b
 80048b0:	20000370 	.word	0x20000370

080048b4 <stdio_exit_handler>:
 80048b4:	4a02      	ldr	r2, [pc, #8]	@ (80048c0 <stdio_exit_handler+0xc>)
 80048b6:	4903      	ldr	r1, [pc, #12]	@ (80048c4 <stdio_exit_handler+0x10>)
 80048b8:	4803      	ldr	r0, [pc, #12]	@ (80048c8 <stdio_exit_handler+0x14>)
 80048ba:	f000 b869 	b.w	8004990 <_fwalk_sglue>
 80048be:	bf00      	nop
 80048c0:	20000010 	.word	0x20000010
 80048c4:	080064fd 	.word	0x080064fd
 80048c8:	20000020 	.word	0x20000020

080048cc <cleanup_stdio>:
 80048cc:	6841      	ldr	r1, [r0, #4]
 80048ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <cleanup_stdio+0x34>)
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4299      	cmp	r1, r3
 80048d4:	4604      	mov	r4, r0
 80048d6:	d001      	beq.n	80048dc <cleanup_stdio+0x10>
 80048d8:	f001 fe10 	bl	80064fc <_fflush_r>
 80048dc:	68a1      	ldr	r1, [r4, #8]
 80048de:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <cleanup_stdio+0x38>)
 80048e0:	4299      	cmp	r1, r3
 80048e2:	d002      	beq.n	80048ea <cleanup_stdio+0x1e>
 80048e4:	4620      	mov	r0, r4
 80048e6:	f001 fe09 	bl	80064fc <_fflush_r>
 80048ea:	68e1      	ldr	r1, [r4, #12]
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <cleanup_stdio+0x3c>)
 80048ee:	4299      	cmp	r1, r3
 80048f0:	d004      	beq.n	80048fc <cleanup_stdio+0x30>
 80048f2:	4620      	mov	r0, r4
 80048f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f8:	f001 be00 	b.w	80064fc <_fflush_r>
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	bf00      	nop
 8004900:	20000370 	.word	0x20000370
 8004904:	200003d8 	.word	0x200003d8
 8004908:	20000440 	.word	0x20000440

0800490c <global_stdio_init.part.0>:
 800490c:	b510      	push	{r4, lr}
 800490e:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <global_stdio_init.part.0+0x30>)
 8004910:	4c0b      	ldr	r4, [pc, #44]	@ (8004940 <global_stdio_init.part.0+0x34>)
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <global_stdio_init.part.0+0x38>)
 8004914:	4620      	mov	r0, r4
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	2104      	movs	r1, #4
 800491a:	2200      	movs	r2, #0
 800491c:	f7ff ff94 	bl	8004848 <std>
 8004920:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004924:	2201      	movs	r2, #1
 8004926:	2109      	movs	r1, #9
 8004928:	f7ff ff8e 	bl	8004848 <std>
 800492c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004930:	2202      	movs	r2, #2
 8004932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004936:	2112      	movs	r1, #18
 8004938:	f7ff bf86 	b.w	8004848 <std>
 800493c:	200004a8 	.word	0x200004a8
 8004940:	20000370 	.word	0x20000370
 8004944:	080048b5 	.word	0x080048b5

08004948 <__sfp_lock_acquire>:
 8004948:	4801      	ldr	r0, [pc, #4]	@ (8004950 <__sfp_lock_acquire+0x8>)
 800494a:	f000 b920 	b.w	8004b8e <__retarget_lock_acquire_recursive>
 800494e:	bf00      	nop
 8004950:	200004b1 	.word	0x200004b1

08004954 <__sfp_lock_release>:
 8004954:	4801      	ldr	r0, [pc, #4]	@ (800495c <__sfp_lock_release+0x8>)
 8004956:	f000 b91b 	b.w	8004b90 <__retarget_lock_release_recursive>
 800495a:	bf00      	nop
 800495c:	200004b1 	.word	0x200004b1

08004960 <__sinit>:
 8004960:	b510      	push	{r4, lr}
 8004962:	4604      	mov	r4, r0
 8004964:	f7ff fff0 	bl	8004948 <__sfp_lock_acquire>
 8004968:	6a23      	ldr	r3, [r4, #32]
 800496a:	b11b      	cbz	r3, 8004974 <__sinit+0x14>
 800496c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004970:	f7ff bff0 	b.w	8004954 <__sfp_lock_release>
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <__sinit+0x28>)
 8004976:	6223      	str	r3, [r4, #32]
 8004978:	4b04      	ldr	r3, [pc, #16]	@ (800498c <__sinit+0x2c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f5      	bne.n	800496c <__sinit+0xc>
 8004980:	f7ff ffc4 	bl	800490c <global_stdio_init.part.0>
 8004984:	e7f2      	b.n	800496c <__sinit+0xc>
 8004986:	bf00      	nop
 8004988:	080048cd 	.word	0x080048cd
 800498c:	200004a8 	.word	0x200004a8

08004990 <_fwalk_sglue>:
 8004990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004994:	4607      	mov	r7, r0
 8004996:	4688      	mov	r8, r1
 8004998:	4614      	mov	r4, r2
 800499a:	2600      	movs	r6, #0
 800499c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049a0:	f1b9 0901 	subs.w	r9, r9, #1
 80049a4:	d505      	bpl.n	80049b2 <_fwalk_sglue+0x22>
 80049a6:	6824      	ldr	r4, [r4, #0]
 80049a8:	2c00      	cmp	r4, #0
 80049aa:	d1f7      	bne.n	800499c <_fwalk_sglue+0xc>
 80049ac:	4630      	mov	r0, r6
 80049ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b2:	89ab      	ldrh	r3, [r5, #12]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d907      	bls.n	80049c8 <_fwalk_sglue+0x38>
 80049b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049bc:	3301      	adds	r3, #1
 80049be:	d003      	beq.n	80049c8 <_fwalk_sglue+0x38>
 80049c0:	4629      	mov	r1, r5
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c0      	blx	r8
 80049c6:	4306      	orrs	r6, r0
 80049c8:	3568      	adds	r5, #104	@ 0x68
 80049ca:	e7e9      	b.n	80049a0 <_fwalk_sglue+0x10>

080049cc <siprintf>:
 80049cc:	b40e      	push	{r1, r2, r3}
 80049ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049d2:	b500      	push	{lr}
 80049d4:	b09c      	sub	sp, #112	@ 0x70
 80049d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80049d8:	9002      	str	r0, [sp, #8]
 80049da:	9006      	str	r0, [sp, #24]
 80049dc:	9107      	str	r1, [sp, #28]
 80049de:	9104      	str	r1, [sp, #16]
 80049e0:	4808      	ldr	r0, [pc, #32]	@ (8004a04 <siprintf+0x38>)
 80049e2:	4909      	ldr	r1, [pc, #36]	@ (8004a08 <siprintf+0x3c>)
 80049e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e8:	9105      	str	r1, [sp, #20]
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	a902      	add	r1, sp, #8
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	f001 fc08 	bl	8006204 <_svfiprintf_r>
 80049f4:	2200      	movs	r2, #0
 80049f6:	9b02      	ldr	r3, [sp, #8]
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	b01c      	add	sp, #112	@ 0x70
 80049fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a00:	b003      	add	sp, #12
 8004a02:	4770      	bx	lr
 8004a04:	2000001c 	.word	0x2000001c
 8004a08:	ffff0208 	.word	0xffff0208

08004a0c <__sread>:
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	460c      	mov	r4, r1
 8004a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a14:	f000 f86c 	bl	8004af0 <_read_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	bfab      	itete	ge
 8004a1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a20:	181b      	addge	r3, r3, r0
 8004a22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a26:	bfac      	ite	ge
 8004a28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a2a:	81a3      	strhlt	r3, [r4, #12]
 8004a2c:	bd10      	pop	{r4, pc}

08004a2e <__swrite>:
 8004a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a32:	461f      	mov	r7, r3
 8004a34:	898b      	ldrh	r3, [r1, #12]
 8004a36:	4605      	mov	r5, r0
 8004a38:	05db      	lsls	r3, r3, #23
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	d505      	bpl.n	8004a4c <__swrite+0x1e>
 8004a40:	2302      	movs	r3, #2
 8004a42:	2200      	movs	r2, #0
 8004a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a48:	f000 f840 	bl	8004acc <_lseek_r>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	4632      	mov	r2, r6
 8004a50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	4628      	mov	r0, r5
 8004a58:	463b      	mov	r3, r7
 8004a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a62:	f000 b857 	b.w	8004b14 <_write_r>

08004a66 <__sseek>:
 8004a66:	b510      	push	{r4, lr}
 8004a68:	460c      	mov	r4, r1
 8004a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6e:	f000 f82d 	bl	8004acc <_lseek_r>
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	bf15      	itete	ne
 8004a78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a82:	81a3      	strheq	r3, [r4, #12]
 8004a84:	bf18      	it	ne
 8004a86:	81a3      	strhne	r3, [r4, #12]
 8004a88:	bd10      	pop	{r4, pc}

08004a8a <__sclose>:
 8004a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8e:	f000 b80d 	b.w	8004aac <_close_r>

08004a92 <memset>:
 8004a92:	4603      	mov	r3, r0
 8004a94:	4402      	add	r2, r0
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d100      	bne.n	8004a9c <memset+0xa>
 8004a9a:	4770      	bx	lr
 8004a9c:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa0:	e7f9      	b.n	8004a96 <memset+0x4>
	...

08004aa4 <_localeconv_r>:
 8004aa4:	4800      	ldr	r0, [pc, #0]	@ (8004aa8 <_localeconv_r+0x4>)
 8004aa6:	4770      	bx	lr
 8004aa8:	2000015c 	.word	0x2000015c

08004aac <_close_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4d05      	ldr	r5, [pc, #20]	@ (8004ac8 <_close_r+0x1c>)
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	f7fc ff97 	bl	80019ea <_close>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_close_r+0x1a>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_close_r+0x1a>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	200004ac 	.word	0x200004ac

08004acc <_lseek_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4d05      	ldr	r5, [pc, #20]	@ (8004aec <_lseek_r+0x20>)
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fc ffa9 	bl	8001a32 <_lseek>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_lseek_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_lseek_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	200004ac 	.word	0x200004ac

08004af0 <_read_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	2200      	movs	r2, #0
 8004afa:	4d05      	ldr	r5, [pc, #20]	@ (8004b10 <_read_r+0x20>)
 8004afc:	602a      	str	r2, [r5, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f7fc ff3a 	bl	8001978 <_read>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_read_r+0x1e>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_read_r+0x1e>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	200004ac 	.word	0x200004ac

08004b14 <_write_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4d05      	ldr	r5, [pc, #20]	@ (8004b34 <_write_r+0x20>)
 8004b20:	602a      	str	r2, [r5, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f7fc ff45 	bl	80019b2 <_write>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_write_r+0x1e>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_write_r+0x1e>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	200004ac 	.word	0x200004ac

08004b38 <__errno>:
 8004b38:	4b01      	ldr	r3, [pc, #4]	@ (8004b40 <__errno+0x8>)
 8004b3a:	6818      	ldr	r0, [r3, #0]
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	2000001c 	.word	0x2000001c

08004b44 <__libc_init_array>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	2600      	movs	r6, #0
 8004b48:	4d0c      	ldr	r5, [pc, #48]	@ (8004b7c <__libc_init_array+0x38>)
 8004b4a:	4c0d      	ldr	r4, [pc, #52]	@ (8004b80 <__libc_init_array+0x3c>)
 8004b4c:	1b64      	subs	r4, r4, r5
 8004b4e:	10a4      	asrs	r4, r4, #2
 8004b50:	42a6      	cmp	r6, r4
 8004b52:	d109      	bne.n	8004b68 <__libc_init_array+0x24>
 8004b54:	f002 f86e 	bl	8006c34 <_init>
 8004b58:	2600      	movs	r6, #0
 8004b5a:	4d0a      	ldr	r5, [pc, #40]	@ (8004b84 <__libc_init_array+0x40>)
 8004b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b88 <__libc_init_array+0x44>)
 8004b5e:	1b64      	subs	r4, r4, r5
 8004b60:	10a4      	asrs	r4, r4, #2
 8004b62:	42a6      	cmp	r6, r4
 8004b64:	d105      	bne.n	8004b72 <__libc_init_array+0x2e>
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6c:	4798      	blx	r3
 8004b6e:	3601      	adds	r6, #1
 8004b70:	e7ee      	b.n	8004b50 <__libc_init_array+0xc>
 8004b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b76:	4798      	blx	r3
 8004b78:	3601      	adds	r6, #1
 8004b7a:	e7f2      	b.n	8004b62 <__libc_init_array+0x1e>
 8004b7c:	08007008 	.word	0x08007008
 8004b80:	08007008 	.word	0x08007008
 8004b84:	08007008 	.word	0x08007008
 8004b88:	0800700c 	.word	0x0800700c

08004b8c <__retarget_lock_init_recursive>:
 8004b8c:	4770      	bx	lr

08004b8e <__retarget_lock_acquire_recursive>:
 8004b8e:	4770      	bx	lr

08004b90 <__retarget_lock_release_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <memchr>:
 8004b92:	4603      	mov	r3, r0
 8004b94:	b510      	push	{r4, lr}
 8004b96:	b2c9      	uxtb	r1, r1
 8004b98:	4402      	add	r2, r0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	d101      	bne.n	8004ba4 <memchr+0x12>
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e003      	b.n	8004bac <memchr+0x1a>
 8004ba4:	7804      	ldrb	r4, [r0, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	428c      	cmp	r4, r1
 8004baa:	d1f6      	bne.n	8004b9a <memchr+0x8>
 8004bac:	bd10      	pop	{r4, pc}

08004bae <quorem>:
 8004bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb2:	6903      	ldr	r3, [r0, #16]
 8004bb4:	690c      	ldr	r4, [r1, #16]
 8004bb6:	4607      	mov	r7, r0
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	db7e      	blt.n	8004cba <quorem+0x10c>
 8004bbc:	3c01      	subs	r4, #1
 8004bbe:	00a3      	lsls	r3, r4, #2
 8004bc0:	f100 0514 	add.w	r5, r0, #20
 8004bc4:	f101 0814 	add.w	r8, r1, #20
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004be4:	d32e      	bcc.n	8004c44 <quorem+0x96>
 8004be6:	f04f 0a00 	mov.w	sl, #0
 8004bea:	46c4      	mov	ip, r8
 8004bec:	46ae      	mov	lr, r5
 8004bee:	46d3      	mov	fp, sl
 8004bf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bf4:	b298      	uxth	r0, r3
 8004bf6:	fb06 a000 	mla	r0, r6, r0, sl
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	0c02      	lsrs	r2, r0, #16
 8004bfe:	fb06 2303 	mla	r3, r6, r3, r2
 8004c02:	f8de 2000 	ldr.w	r2, [lr]
 8004c06:	b280      	uxth	r0, r0
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	1a12      	subs	r2, r2, r0
 8004c0c:	445a      	add	r2, fp
 8004c0e:	f8de 0000 	ldr.w	r0, [lr]
 8004c12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004c1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004c20:	b292      	uxth	r2, r2
 8004c22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c26:	45e1      	cmp	r9, ip
 8004c28:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c2c:	f84e 2b04 	str.w	r2, [lr], #4
 8004c30:	d2de      	bcs.n	8004bf0 <quorem+0x42>
 8004c32:	9b00      	ldr	r3, [sp, #0]
 8004c34:	58eb      	ldr	r3, [r5, r3]
 8004c36:	b92b      	cbnz	r3, 8004c44 <quorem+0x96>
 8004c38:	9b01      	ldr	r3, [sp, #4]
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	429d      	cmp	r5, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	d32f      	bcc.n	8004ca2 <quorem+0xf4>
 8004c42:	613c      	str	r4, [r7, #16]
 8004c44:	4638      	mov	r0, r7
 8004c46:	f001 f979 	bl	8005f3c <__mcmp>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	db25      	blt.n	8004c9a <quorem+0xec>
 8004c4e:	4629      	mov	r1, r5
 8004c50:	2000      	movs	r0, #0
 8004c52:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c56:	f8d1 c000 	ldr.w	ip, [r1]
 8004c5a:	fa1f fe82 	uxth.w	lr, r2
 8004c5e:	fa1f f38c 	uxth.w	r3, ip
 8004c62:	eba3 030e 	sub.w	r3, r3, lr
 8004c66:	4403      	add	r3, r0
 8004c68:	0c12      	lsrs	r2, r2, #16
 8004c6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004c6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c78:	45c1      	cmp	r9, r8
 8004c7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c7e:	f841 3b04 	str.w	r3, [r1], #4
 8004c82:	d2e6      	bcs.n	8004c52 <quorem+0xa4>
 8004c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c8c:	b922      	cbnz	r2, 8004c98 <quorem+0xea>
 8004c8e:	3b04      	subs	r3, #4
 8004c90:	429d      	cmp	r5, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	d30b      	bcc.n	8004cae <quorem+0x100>
 8004c96:	613c      	str	r4, [r7, #16]
 8004c98:	3601      	adds	r6, #1
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	b003      	add	sp, #12
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	3b04      	subs	r3, #4
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d1cb      	bne.n	8004c42 <quorem+0x94>
 8004caa:	3c01      	subs	r4, #1
 8004cac:	e7c6      	b.n	8004c3c <quorem+0x8e>
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	3b04      	subs	r3, #4
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	d1ef      	bne.n	8004c96 <quorem+0xe8>
 8004cb6:	3c01      	subs	r4, #1
 8004cb8:	e7ea      	b.n	8004c90 <quorem+0xe2>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e7ee      	b.n	8004c9c <quorem+0xee>
	...

08004cc0 <_dtoa_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	69c7      	ldr	r7, [r0, #28]
 8004cca:	b097      	sub	sp, #92	@ 0x5c
 8004ccc:	4683      	mov	fp, r0
 8004cce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004cd2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004cd4:	b97f      	cbnz	r7, 8004cf6 <_dtoa_r+0x36>
 8004cd6:	2010      	movs	r0, #16
 8004cd8:	f000 fe02 	bl	80058e0 <malloc>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f8cb 001c 	str.w	r0, [fp, #28]
 8004ce2:	b920      	cbnz	r0, 8004cee <_dtoa_r+0x2e>
 8004ce4:	21ef      	movs	r1, #239	@ 0xef
 8004ce6:	4ba8      	ldr	r3, [pc, #672]	@ (8004f88 <_dtoa_r+0x2c8>)
 8004ce8:	48a8      	ldr	r0, [pc, #672]	@ (8004f8c <_dtoa_r+0x2cc>)
 8004cea:	f001 fc67 	bl	80065bc <__assert_func>
 8004cee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004cf2:	6007      	str	r7, [r0, #0]
 8004cf4:	60c7      	str	r7, [r0, #12]
 8004cf6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004cfa:	6819      	ldr	r1, [r3, #0]
 8004cfc:	b159      	cbz	r1, 8004d16 <_dtoa_r+0x56>
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	2301      	movs	r3, #1
 8004d02:	4093      	lsls	r3, r2
 8004d04:	604a      	str	r2, [r1, #4]
 8004d06:	608b      	str	r3, [r1, #8]
 8004d08:	4658      	mov	r0, fp
 8004d0a:	f000 fedf 	bl	8005acc <_Bfree>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	1e2b      	subs	r3, r5, #0
 8004d18:	bfaf      	iteee	ge
 8004d1a:	2300      	movge	r3, #0
 8004d1c:	2201      	movlt	r2, #1
 8004d1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004d22:	9303      	strlt	r3, [sp, #12]
 8004d24:	bfa8      	it	ge
 8004d26:	6033      	strge	r3, [r6, #0]
 8004d28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004d2c:	4b98      	ldr	r3, [pc, #608]	@ (8004f90 <_dtoa_r+0x2d0>)
 8004d2e:	bfb8      	it	lt
 8004d30:	6032      	strlt	r2, [r6, #0]
 8004d32:	ea33 0308 	bics.w	r3, r3, r8
 8004d36:	d112      	bne.n	8004d5e <_dtoa_r+0x9e>
 8004d38:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004d44:	4323      	orrs	r3, r4
 8004d46:	f000 8550 	beq.w	80057ea <_dtoa_r+0xb2a>
 8004d4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004f94 <_dtoa_r+0x2d4>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8552 	beq.w	80057fa <_dtoa_r+0xb3a>
 8004d56:	f10a 0303 	add.w	r3, sl, #3
 8004d5a:	f000 bd4c 	b.w	80057f6 <_dtoa_r+0xb36>
 8004d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f7fb fecf 	bl	8000b10 <__aeabi_dcmpeq>
 8004d72:	4607      	mov	r7, r0
 8004d74:	b158      	cbz	r0, 8004d8e <_dtoa_r+0xce>
 8004d76:	2301      	movs	r3, #1
 8004d78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d7e:	b113      	cbz	r3, 8004d86 <_dtoa_r+0xc6>
 8004d80:	4b85      	ldr	r3, [pc, #532]	@ (8004f98 <_dtoa_r+0x2d8>)
 8004d82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004f9c <_dtoa_r+0x2dc>
 8004d8a:	f000 bd36 	b.w	80057fa <_dtoa_r+0xb3a>
 8004d8e:	ab14      	add	r3, sp, #80	@ 0x50
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	ab15      	add	r3, sp, #84	@ 0x54
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	4658      	mov	r0, fp
 8004d98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004d9c:	f001 f97e 	bl	800609c <__d2b>
 8004da0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004da4:	4681      	mov	r9, r0
 8004da6:	2e00      	cmp	r6, #0
 8004da8:	d077      	beq.n	8004e9a <_dtoa_r+0x1da>
 8004daa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004db0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004dbc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004dc0:	9712      	str	r7, [sp, #72]	@ 0x48
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4b76      	ldr	r3, [pc, #472]	@ (8004fa0 <_dtoa_r+0x2e0>)
 8004dc8:	f7fb fa82 	bl	80002d0 <__aeabi_dsub>
 8004dcc:	a368      	add	r3, pc, #416	@ (adr r3, 8004f70 <_dtoa_r+0x2b0>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fc35 	bl	8000640 <__aeabi_dmul>
 8004dd6:	a368      	add	r3, pc, #416	@ (adr r3, 8004f78 <_dtoa_r+0x2b8>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fa7a 	bl	80002d4 <__adddf3>
 8004de0:	4604      	mov	r4, r0
 8004de2:	4630      	mov	r0, r6
 8004de4:	460d      	mov	r5, r1
 8004de6:	f7fb fbc1 	bl	800056c <__aeabi_i2d>
 8004dea:	a365      	add	r3, pc, #404	@ (adr r3, 8004f80 <_dtoa_r+0x2c0>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f7fb fc26 	bl	8000640 <__aeabi_dmul>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f7fb fa6a 	bl	80002d4 <__adddf3>
 8004e00:	4604      	mov	r4, r0
 8004e02:	460d      	mov	r5, r1
 8004e04:	f7fb fecc 	bl	8000ba0 <__aeabi_d2iz>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4607      	mov	r7, r0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4620      	mov	r0, r4
 8004e10:	4629      	mov	r1, r5
 8004e12:	f7fb fe87 	bl	8000b24 <__aeabi_dcmplt>
 8004e16:	b140      	cbz	r0, 8004e2a <_dtoa_r+0x16a>
 8004e18:	4638      	mov	r0, r7
 8004e1a:	f7fb fba7 	bl	800056c <__aeabi_i2d>
 8004e1e:	4622      	mov	r2, r4
 8004e20:	462b      	mov	r3, r5
 8004e22:	f7fb fe75 	bl	8000b10 <__aeabi_dcmpeq>
 8004e26:	b900      	cbnz	r0, 8004e2a <_dtoa_r+0x16a>
 8004e28:	3f01      	subs	r7, #1
 8004e2a:	2f16      	cmp	r7, #22
 8004e2c:	d853      	bhi.n	8004ed6 <_dtoa_r+0x216>
 8004e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e32:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa4 <_dtoa_r+0x2e4>)
 8004e34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3c:	f7fb fe72 	bl	8000b24 <__aeabi_dcmplt>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d04a      	beq.n	8004eda <_dtoa_r+0x21a>
 8004e44:	2300      	movs	r3, #0
 8004e46:	3f01      	subs	r7, #1
 8004e48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	1e5a      	subs	r2, r3, #1
 8004e50:	bf46      	itte	mi
 8004e52:	f1c3 0801 	rsbmi	r8, r3, #1
 8004e56:	2300      	movmi	r3, #0
 8004e58:	f04f 0800 	movpl.w	r8, #0
 8004e5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e5e:	bf48      	it	mi
 8004e60:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004e62:	2f00      	cmp	r7, #0
 8004e64:	db3b      	blt.n	8004ede <_dtoa_r+0x21e>
 8004e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e68:	970e      	str	r7, [sp, #56]	@ 0x38
 8004e6a:	443b      	add	r3, r7
 8004e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e6e:	2300      	movs	r3, #0
 8004e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	d866      	bhi.n	8004f46 <_dtoa_r+0x286>
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	bfc4      	itt	gt
 8004e7c:	3b04      	subgt	r3, #4
 8004e7e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004e80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e82:	bfc8      	it	gt
 8004e84:	2400      	movgt	r4, #0
 8004e86:	f1a3 0302 	sub.w	r3, r3, #2
 8004e8a:	bfd8      	it	le
 8004e8c:	2401      	movle	r4, #1
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d864      	bhi.n	8004f5c <_dtoa_r+0x29c>
 8004e92:	e8df f003 	tbb	[pc, r3]
 8004e96:	382b      	.short	0x382b
 8004e98:	5636      	.short	0x5636
 8004e9a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004e9e:	441e      	add	r6, r3
 8004ea0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	bfc1      	itttt	gt
 8004ea8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004eac:	fa08 f803 	lslgt.w	r8, r8, r3
 8004eb0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004eb4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004eb8:	bfd6      	itet	le
 8004eba:	f1c3 0320 	rsble	r3, r3, #32
 8004ebe:	ea48 0003 	orrgt.w	r0, r8, r3
 8004ec2:	fa04 f003 	lslle.w	r0, r4, r3
 8004ec6:	f7fb fb41 	bl	800054c <__aeabi_ui2d>
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004ed0:	3e01      	subs	r6, #1
 8004ed2:	9212      	str	r2, [sp, #72]	@ 0x48
 8004ed4:	e775      	b.n	8004dc2 <_dtoa_r+0x102>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e7b6      	b.n	8004e48 <_dtoa_r+0x188>
 8004eda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004edc:	e7b5      	b.n	8004e4a <_dtoa_r+0x18a>
 8004ede:	427b      	negs	r3, r7
 8004ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	eba8 0807 	sub.w	r8, r8, r7
 8004ee8:	930e      	str	r3, [sp, #56]	@ 0x38
 8004eea:	e7c2      	b.n	8004e72 <_dtoa_r+0x1b2>
 8004eec:	2300      	movs	r3, #0
 8004eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ef0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dc35      	bgt.n	8004f62 <_dtoa_r+0x2a2>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	461a      	mov	r2, r3
 8004efa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004efe:	9221      	str	r2, [sp, #132]	@ 0x84
 8004f00:	e00b      	b.n	8004f1a <_dtoa_r+0x25a>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e7f3      	b.n	8004eee <_dtoa_r+0x22e>
 8004f06:	2300      	movs	r3, #0
 8004f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	9308      	str	r3, [sp, #32]
 8004f10:	3301      	adds	r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	bfb8      	it	lt
 8004f18:	2301      	movlt	r3, #1
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004f22:	f102 0514 	add.w	r5, r2, #20
 8004f26:	429d      	cmp	r5, r3
 8004f28:	d91f      	bls.n	8004f6a <_dtoa_r+0x2aa>
 8004f2a:	6041      	str	r1, [r0, #4]
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	f000 fd8d 	bl	8005a4c <_Balloc>
 8004f32:	4682      	mov	sl, r0
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d139      	bne.n	8004fac <_dtoa_r+0x2ec>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa8 <_dtoa_r+0x2e8>)
 8004f40:	e6d2      	b.n	8004ce8 <_dtoa_r+0x28>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e7e0      	b.n	8004f08 <_dtoa_r+0x248>
 8004f46:	2401      	movs	r4, #1
 8004f48:	2300      	movs	r3, #0
 8004f4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	2200      	movs	r2, #0
 8004f54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f58:	2312      	movs	r3, #18
 8004f5a:	e7d0      	b.n	8004efe <_dtoa_r+0x23e>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f60:	e7f5      	b.n	8004f4e <_dtoa_r+0x28e>
 8004f62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f68:	e7d7      	b.n	8004f1a <_dtoa_r+0x25a>
 8004f6a:	3101      	adds	r1, #1
 8004f6c:	0052      	lsls	r2, r2, #1
 8004f6e:	e7d8      	b.n	8004f22 <_dtoa_r+0x262>
 8004f70:	636f4361 	.word	0x636f4361
 8004f74:	3fd287a7 	.word	0x3fd287a7
 8004f78:	8b60c8b3 	.word	0x8b60c8b3
 8004f7c:	3fc68a28 	.word	0x3fc68a28
 8004f80:	509f79fb 	.word	0x509f79fb
 8004f84:	3fd34413 	.word	0x3fd34413
 8004f88:	08006ccf 	.word	0x08006ccf
 8004f8c:	08006ce6 	.word	0x08006ce6
 8004f90:	7ff00000 	.word	0x7ff00000
 8004f94:	08006ccb 	.word	0x08006ccb
 8004f98:	08006c9f 	.word	0x08006c9f
 8004f9c:	08006c9e 	.word	0x08006c9e
 8004fa0:	3ff80000 	.word	0x3ff80000
 8004fa4:	08006de0 	.word	0x08006de0
 8004fa8:	08006d3e 	.word	0x08006d3e
 8004fac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fb0:	6018      	str	r0, [r3, #0]
 8004fb2:	9b07      	ldr	r3, [sp, #28]
 8004fb4:	2b0e      	cmp	r3, #14
 8004fb6:	f200 80a4 	bhi.w	8005102 <_dtoa_r+0x442>
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	f000 80a1 	beq.w	8005102 <_dtoa_r+0x442>
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	dd33      	ble.n	800502c <_dtoa_r+0x36c>
 8004fc4:	4b86      	ldr	r3, [pc, #536]	@ (80051e0 <_dtoa_r+0x520>)
 8004fc6:	f007 020f 	and.w	r2, r7, #15
 8004fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fce:	05f8      	lsls	r0, r7, #23
 8004fd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fd4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004fdc:	d516      	bpl.n	800500c <_dtoa_r+0x34c>
 8004fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fe2:	4b80      	ldr	r3, [pc, #512]	@ (80051e4 <_dtoa_r+0x524>)
 8004fe4:	2603      	movs	r6, #3
 8004fe6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fea:	f7fb fc53 	bl	8000894 <__aeabi_ddiv>
 8004fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff2:	f004 040f 	and.w	r4, r4, #15
 8004ff6:	4d7b      	ldr	r5, [pc, #492]	@ (80051e4 <_dtoa_r+0x524>)
 8004ff8:	b954      	cbnz	r4, 8005010 <_dtoa_r+0x350>
 8004ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005002:	f7fb fc47 	bl	8000894 <__aeabi_ddiv>
 8005006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800500a:	e028      	b.n	800505e <_dtoa_r+0x39e>
 800500c:	2602      	movs	r6, #2
 800500e:	e7f2      	b.n	8004ff6 <_dtoa_r+0x336>
 8005010:	07e1      	lsls	r1, r4, #31
 8005012:	d508      	bpl.n	8005026 <_dtoa_r+0x366>
 8005014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005018:	e9d5 2300 	ldrd	r2, r3, [r5]
 800501c:	f7fb fb10 	bl	8000640 <__aeabi_dmul>
 8005020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005024:	3601      	adds	r6, #1
 8005026:	1064      	asrs	r4, r4, #1
 8005028:	3508      	adds	r5, #8
 800502a:	e7e5      	b.n	8004ff8 <_dtoa_r+0x338>
 800502c:	f000 80d2 	beq.w	80051d4 <_dtoa_r+0x514>
 8005030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005034:	427c      	negs	r4, r7
 8005036:	4b6a      	ldr	r3, [pc, #424]	@ (80051e0 <_dtoa_r+0x520>)
 8005038:	f004 020f 	and.w	r2, r4, #15
 800503c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fafc 	bl	8000640 <__aeabi_dmul>
 8005048:	2602      	movs	r6, #2
 800504a:	2300      	movs	r3, #0
 800504c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005050:	4d64      	ldr	r5, [pc, #400]	@ (80051e4 <_dtoa_r+0x524>)
 8005052:	1124      	asrs	r4, r4, #4
 8005054:	2c00      	cmp	r4, #0
 8005056:	f040 80b2 	bne.w	80051be <_dtoa_r+0x4fe>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1d3      	bne.n	8005006 <_dtoa_r+0x346>
 800505e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005062:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80b7 	beq.w	80051d8 <_dtoa_r+0x518>
 800506a:	2200      	movs	r2, #0
 800506c:	4620      	mov	r0, r4
 800506e:	4629      	mov	r1, r5
 8005070:	4b5d      	ldr	r3, [pc, #372]	@ (80051e8 <_dtoa_r+0x528>)
 8005072:	f7fb fd57 	bl	8000b24 <__aeabi_dcmplt>
 8005076:	2800      	cmp	r0, #0
 8005078:	f000 80ae 	beq.w	80051d8 <_dtoa_r+0x518>
 800507c:	9b07      	ldr	r3, [sp, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80aa 	beq.w	80051d8 <_dtoa_r+0x518>
 8005084:	9b08      	ldr	r3, [sp, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	dd37      	ble.n	80050fa <_dtoa_r+0x43a>
 800508a:	1e7b      	subs	r3, r7, #1
 800508c:	4620      	mov	r0, r4
 800508e:	9304      	str	r3, [sp, #16]
 8005090:	2200      	movs	r2, #0
 8005092:	4629      	mov	r1, r5
 8005094:	4b55      	ldr	r3, [pc, #340]	@ (80051ec <_dtoa_r+0x52c>)
 8005096:	f7fb fad3 	bl	8000640 <__aeabi_dmul>
 800509a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800509e:	9c08      	ldr	r4, [sp, #32]
 80050a0:	3601      	adds	r6, #1
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7fb fa62 	bl	800056c <__aeabi_i2d>
 80050a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ac:	f7fb fac8 	bl	8000640 <__aeabi_dmul>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b4f      	ldr	r3, [pc, #316]	@ (80051f0 <_dtoa_r+0x530>)
 80050b4:	f7fb f90e 	bl	80002d4 <__adddf3>
 80050b8:	4605      	mov	r5, r0
 80050ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80050be:	2c00      	cmp	r4, #0
 80050c0:	f040 809a 	bne.w	80051f8 <_dtoa_r+0x538>
 80050c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	4b4a      	ldr	r3, [pc, #296]	@ (80051f4 <_dtoa_r+0x534>)
 80050cc:	f7fb f900 	bl	80002d0 <__aeabi_dsub>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050d8:	462a      	mov	r2, r5
 80050da:	4633      	mov	r3, r6
 80050dc:	f7fb fd40 	bl	8000b60 <__aeabi_dcmpgt>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f040 828e 	bne.w	8005602 <_dtoa_r+0x942>
 80050e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ea:	462a      	mov	r2, r5
 80050ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80050f0:	f7fb fd18 	bl	8000b24 <__aeabi_dcmplt>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f040 8127 	bne.w	8005348 <_dtoa_r+0x688>
 80050fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80050fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005102:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005104:	2b00      	cmp	r3, #0
 8005106:	f2c0 8163 	blt.w	80053d0 <_dtoa_r+0x710>
 800510a:	2f0e      	cmp	r7, #14
 800510c:	f300 8160 	bgt.w	80053d0 <_dtoa_r+0x710>
 8005110:	4b33      	ldr	r3, [pc, #204]	@ (80051e0 <_dtoa_r+0x520>)
 8005112:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005116:	e9d3 3400 	ldrd	r3, r4, [r3]
 800511a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800511e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005120:	2b00      	cmp	r3, #0
 8005122:	da03      	bge.n	800512c <_dtoa_r+0x46c>
 8005124:	9b07      	ldr	r3, [sp, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f340 8100 	ble.w	800532c <_dtoa_r+0x66c>
 800512c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005130:	4656      	mov	r6, sl
 8005132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005136:	4620      	mov	r0, r4
 8005138:	4629      	mov	r1, r5
 800513a:	f7fb fbab 	bl	8000894 <__aeabi_ddiv>
 800513e:	f7fb fd2f 	bl	8000ba0 <__aeabi_d2iz>
 8005142:	4680      	mov	r8, r0
 8005144:	f7fb fa12 	bl	800056c <__aeabi_i2d>
 8005148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800514c:	f7fb fa78 	bl	8000640 <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb f8ba 	bl	80002d0 <__aeabi_dsub>
 800515c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005160:	9d07      	ldr	r5, [sp, #28]
 8005162:	f806 4b01 	strb.w	r4, [r6], #1
 8005166:	eba6 040a 	sub.w	r4, r6, sl
 800516a:	42a5      	cmp	r5, r4
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	f040 8116 	bne.w	80053a0 <_dtoa_r+0x6e0>
 8005174:	f7fb f8ae 	bl	80002d4 <__adddf3>
 8005178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800517c:	4604      	mov	r4, r0
 800517e:	460d      	mov	r5, r1
 8005180:	f7fb fcee 	bl	8000b60 <__aeabi_dcmpgt>
 8005184:	2800      	cmp	r0, #0
 8005186:	f040 80f8 	bne.w	800537a <_dtoa_r+0x6ba>
 800518a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800518e:	4620      	mov	r0, r4
 8005190:	4629      	mov	r1, r5
 8005192:	f7fb fcbd 	bl	8000b10 <__aeabi_dcmpeq>
 8005196:	b118      	cbz	r0, 80051a0 <_dtoa_r+0x4e0>
 8005198:	f018 0f01 	tst.w	r8, #1
 800519c:	f040 80ed 	bne.w	800537a <_dtoa_r+0x6ba>
 80051a0:	4649      	mov	r1, r9
 80051a2:	4658      	mov	r0, fp
 80051a4:	f000 fc92 	bl	8005acc <_Bfree>
 80051a8:	2300      	movs	r3, #0
 80051aa:	7033      	strb	r3, [r6, #0]
 80051ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80051ae:	3701      	adds	r7, #1
 80051b0:	601f      	str	r7, [r3, #0]
 80051b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8320 	beq.w	80057fa <_dtoa_r+0xb3a>
 80051ba:	601e      	str	r6, [r3, #0]
 80051bc:	e31d      	b.n	80057fa <_dtoa_r+0xb3a>
 80051be:	07e2      	lsls	r2, r4, #31
 80051c0:	d505      	bpl.n	80051ce <_dtoa_r+0x50e>
 80051c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051c6:	f7fb fa3b 	bl	8000640 <__aeabi_dmul>
 80051ca:	2301      	movs	r3, #1
 80051cc:	3601      	adds	r6, #1
 80051ce:	1064      	asrs	r4, r4, #1
 80051d0:	3508      	adds	r5, #8
 80051d2:	e73f      	b.n	8005054 <_dtoa_r+0x394>
 80051d4:	2602      	movs	r6, #2
 80051d6:	e742      	b.n	800505e <_dtoa_r+0x39e>
 80051d8:	9c07      	ldr	r4, [sp, #28]
 80051da:	9704      	str	r7, [sp, #16]
 80051dc:	e761      	b.n	80050a2 <_dtoa_r+0x3e2>
 80051de:	bf00      	nop
 80051e0:	08006de0 	.word	0x08006de0
 80051e4:	08006db8 	.word	0x08006db8
 80051e8:	3ff00000 	.word	0x3ff00000
 80051ec:	40240000 	.word	0x40240000
 80051f0:	401c0000 	.word	0x401c0000
 80051f4:	40140000 	.word	0x40140000
 80051f8:	4b70      	ldr	r3, [pc, #448]	@ (80053bc <_dtoa_r+0x6fc>)
 80051fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005200:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005204:	4454      	add	r4, sl
 8005206:	2900      	cmp	r1, #0
 8005208:	d045      	beq.n	8005296 <_dtoa_r+0x5d6>
 800520a:	2000      	movs	r0, #0
 800520c:	496c      	ldr	r1, [pc, #432]	@ (80053c0 <_dtoa_r+0x700>)
 800520e:	f7fb fb41 	bl	8000894 <__aeabi_ddiv>
 8005212:	4633      	mov	r3, r6
 8005214:	462a      	mov	r2, r5
 8005216:	f7fb f85b 	bl	80002d0 <__aeabi_dsub>
 800521a:	4656      	mov	r6, sl
 800521c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005224:	f7fb fcbc 	bl	8000ba0 <__aeabi_d2iz>
 8005228:	4605      	mov	r5, r0
 800522a:	f7fb f99f 	bl	800056c <__aeabi_i2d>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005236:	f7fb f84b 	bl	80002d0 <__aeabi_dsub>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	3530      	adds	r5, #48	@ 0x30
 8005240:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005244:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005248:	f806 5b01 	strb.w	r5, [r6], #1
 800524c:	f7fb fc6a 	bl	8000b24 <__aeabi_dcmplt>
 8005250:	2800      	cmp	r0, #0
 8005252:	d163      	bne.n	800531c <_dtoa_r+0x65c>
 8005254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005258:	2000      	movs	r0, #0
 800525a:	495a      	ldr	r1, [pc, #360]	@ (80053c4 <_dtoa_r+0x704>)
 800525c:	f7fb f838 	bl	80002d0 <__aeabi_dsub>
 8005260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005264:	f7fb fc5e 	bl	8000b24 <__aeabi_dcmplt>
 8005268:	2800      	cmp	r0, #0
 800526a:	f040 8087 	bne.w	800537c <_dtoa_r+0x6bc>
 800526e:	42a6      	cmp	r6, r4
 8005270:	f43f af43 	beq.w	80050fa <_dtoa_r+0x43a>
 8005274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005278:	2200      	movs	r2, #0
 800527a:	4b53      	ldr	r3, [pc, #332]	@ (80053c8 <_dtoa_r+0x708>)
 800527c:	f7fb f9e0 	bl	8000640 <__aeabi_dmul>
 8005280:	2200      	movs	r2, #0
 8005282:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800528a:	4b4f      	ldr	r3, [pc, #316]	@ (80053c8 <_dtoa_r+0x708>)
 800528c:	f7fb f9d8 	bl	8000640 <__aeabi_dmul>
 8005290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005294:	e7c4      	b.n	8005220 <_dtoa_r+0x560>
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	f7fb f9d1 	bl	8000640 <__aeabi_dmul>
 800529e:	4656      	mov	r6, sl
 80052a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80052a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052aa:	f7fb fc79 	bl	8000ba0 <__aeabi_d2iz>
 80052ae:	4605      	mov	r5, r0
 80052b0:	f7fb f95c 	bl	800056c <__aeabi_i2d>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052bc:	f7fb f808 	bl	80002d0 <__aeabi_dsub>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	3530      	adds	r5, #48	@ 0x30
 80052c6:	f806 5b01 	strb.w	r5, [r6], #1
 80052ca:	42a6      	cmp	r6, r4
 80052cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	d124      	bne.n	8005320 <_dtoa_r+0x660>
 80052d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052da:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <_dtoa_r+0x700>)
 80052dc:	f7fa fffa 	bl	80002d4 <__adddf3>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e8:	f7fb fc3a 	bl	8000b60 <__aeabi_dcmpgt>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d145      	bne.n	800537c <_dtoa_r+0x6bc>
 80052f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052f4:	2000      	movs	r0, #0
 80052f6:	4932      	ldr	r1, [pc, #200]	@ (80053c0 <_dtoa_r+0x700>)
 80052f8:	f7fa ffea 	bl	80002d0 <__aeabi_dsub>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005304:	f7fb fc0e 	bl	8000b24 <__aeabi_dcmplt>
 8005308:	2800      	cmp	r0, #0
 800530a:	f43f aef6 	beq.w	80050fa <_dtoa_r+0x43a>
 800530e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005310:	1e73      	subs	r3, r6, #1
 8005312:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005314:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005318:	2b30      	cmp	r3, #48	@ 0x30
 800531a:	d0f8      	beq.n	800530e <_dtoa_r+0x64e>
 800531c:	9f04      	ldr	r7, [sp, #16]
 800531e:	e73f      	b.n	80051a0 <_dtoa_r+0x4e0>
 8005320:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <_dtoa_r+0x708>)
 8005322:	f7fb f98d 	bl	8000640 <__aeabi_dmul>
 8005326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800532a:	e7bc      	b.n	80052a6 <_dtoa_r+0x5e6>
 800532c:	d10c      	bne.n	8005348 <_dtoa_r+0x688>
 800532e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005332:	2200      	movs	r2, #0
 8005334:	4b25      	ldr	r3, [pc, #148]	@ (80053cc <_dtoa_r+0x70c>)
 8005336:	f7fb f983 	bl	8000640 <__aeabi_dmul>
 800533a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800533e:	f7fb fc05 	bl	8000b4c <__aeabi_dcmpge>
 8005342:	2800      	cmp	r0, #0
 8005344:	f000 815b 	beq.w	80055fe <_dtoa_r+0x93e>
 8005348:	2400      	movs	r4, #0
 800534a:	4625      	mov	r5, r4
 800534c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800534e:	4656      	mov	r6, sl
 8005350:	43db      	mvns	r3, r3
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	2700      	movs	r7, #0
 8005356:	4621      	mov	r1, r4
 8005358:	4658      	mov	r0, fp
 800535a:	f000 fbb7 	bl	8005acc <_Bfree>
 800535e:	2d00      	cmp	r5, #0
 8005360:	d0dc      	beq.n	800531c <_dtoa_r+0x65c>
 8005362:	b12f      	cbz	r7, 8005370 <_dtoa_r+0x6b0>
 8005364:	42af      	cmp	r7, r5
 8005366:	d003      	beq.n	8005370 <_dtoa_r+0x6b0>
 8005368:	4639      	mov	r1, r7
 800536a:	4658      	mov	r0, fp
 800536c:	f000 fbae 	bl	8005acc <_Bfree>
 8005370:	4629      	mov	r1, r5
 8005372:	4658      	mov	r0, fp
 8005374:	f000 fbaa 	bl	8005acc <_Bfree>
 8005378:	e7d0      	b.n	800531c <_dtoa_r+0x65c>
 800537a:	9704      	str	r7, [sp, #16]
 800537c:	4633      	mov	r3, r6
 800537e:	461e      	mov	r6, r3
 8005380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005384:	2a39      	cmp	r2, #57	@ 0x39
 8005386:	d107      	bne.n	8005398 <_dtoa_r+0x6d8>
 8005388:	459a      	cmp	sl, r3
 800538a:	d1f8      	bne.n	800537e <_dtoa_r+0x6be>
 800538c:	9a04      	ldr	r2, [sp, #16]
 800538e:	3201      	adds	r2, #1
 8005390:	9204      	str	r2, [sp, #16]
 8005392:	2230      	movs	r2, #48	@ 0x30
 8005394:	f88a 2000 	strb.w	r2, [sl]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	3201      	adds	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e7bd      	b.n	800531c <_dtoa_r+0x65c>
 80053a0:	2200      	movs	r2, #0
 80053a2:	4b09      	ldr	r3, [pc, #36]	@ (80053c8 <_dtoa_r+0x708>)
 80053a4:	f7fb f94c 	bl	8000640 <__aeabi_dmul>
 80053a8:	2200      	movs	r2, #0
 80053aa:	2300      	movs	r3, #0
 80053ac:	4604      	mov	r4, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	f7fb fbae 	bl	8000b10 <__aeabi_dcmpeq>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	f43f aebc 	beq.w	8005132 <_dtoa_r+0x472>
 80053ba:	e6f1      	b.n	80051a0 <_dtoa_r+0x4e0>
 80053bc:	08006de0 	.word	0x08006de0
 80053c0:	3fe00000 	.word	0x3fe00000
 80053c4:	3ff00000 	.word	0x3ff00000
 80053c8:	40240000 	.word	0x40240000
 80053cc:	40140000 	.word	0x40140000
 80053d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80053d2:	2a00      	cmp	r2, #0
 80053d4:	f000 80db 	beq.w	800558e <_dtoa_r+0x8ce>
 80053d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80053da:	2a01      	cmp	r2, #1
 80053dc:	f300 80bf 	bgt.w	800555e <_dtoa_r+0x89e>
 80053e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	f000 80b7 	beq.w	8005556 <_dtoa_r+0x896>
 80053e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80053ec:	4646      	mov	r6, r8
 80053ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053f2:	2101      	movs	r1, #1
 80053f4:	441a      	add	r2, r3
 80053f6:	4658      	mov	r0, fp
 80053f8:	4498      	add	r8, r3
 80053fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80053fc:	f000 fc1a 	bl	8005c34 <__i2b>
 8005400:	4605      	mov	r5, r0
 8005402:	b15e      	cbz	r6, 800541c <_dtoa_r+0x75c>
 8005404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd08      	ble.n	800541c <_dtoa_r+0x75c>
 800540a:	42b3      	cmp	r3, r6
 800540c:	bfa8      	it	ge
 800540e:	4633      	movge	r3, r6
 8005410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005412:	eba8 0803 	sub.w	r8, r8, r3
 8005416:	1af6      	subs	r6, r6, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	9309      	str	r3, [sp, #36]	@ 0x24
 800541c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800541e:	b1f3      	cbz	r3, 800545e <_dtoa_r+0x79e>
 8005420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80b7 	beq.w	8005596 <_dtoa_r+0x8d6>
 8005428:	b18c      	cbz	r4, 800544e <_dtoa_r+0x78e>
 800542a:	4629      	mov	r1, r5
 800542c:	4622      	mov	r2, r4
 800542e:	4658      	mov	r0, fp
 8005430:	f000 fcbe 	bl	8005db0 <__pow5mult>
 8005434:	464a      	mov	r2, r9
 8005436:	4601      	mov	r1, r0
 8005438:	4605      	mov	r5, r0
 800543a:	4658      	mov	r0, fp
 800543c:	f000 fc10 	bl	8005c60 <__multiply>
 8005440:	4649      	mov	r1, r9
 8005442:	9004      	str	r0, [sp, #16]
 8005444:	4658      	mov	r0, fp
 8005446:	f000 fb41 	bl	8005acc <_Bfree>
 800544a:	9b04      	ldr	r3, [sp, #16]
 800544c:	4699      	mov	r9, r3
 800544e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005450:	1b1a      	subs	r2, r3, r4
 8005452:	d004      	beq.n	800545e <_dtoa_r+0x79e>
 8005454:	4649      	mov	r1, r9
 8005456:	4658      	mov	r0, fp
 8005458:	f000 fcaa 	bl	8005db0 <__pow5mult>
 800545c:	4681      	mov	r9, r0
 800545e:	2101      	movs	r1, #1
 8005460:	4658      	mov	r0, fp
 8005462:	f000 fbe7 	bl	8005c34 <__i2b>
 8005466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005468:	4604      	mov	r4, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 81c9 	beq.w	8005802 <_dtoa_r+0xb42>
 8005470:	461a      	mov	r2, r3
 8005472:	4601      	mov	r1, r0
 8005474:	4658      	mov	r0, fp
 8005476:	f000 fc9b 	bl	8005db0 <__pow5mult>
 800547a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800547c:	4604      	mov	r4, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	f300 808f 	bgt.w	80055a2 <_dtoa_r+0x8e2>
 8005484:	9b02      	ldr	r3, [sp, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f040 8087 	bne.w	800559a <_dtoa_r+0x8da>
 800548c:	9b03      	ldr	r3, [sp, #12]
 800548e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005492:	2b00      	cmp	r3, #0
 8005494:	f040 8083 	bne.w	800559e <_dtoa_r+0x8de>
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800549e:	0d1b      	lsrs	r3, r3, #20
 80054a0:	051b      	lsls	r3, r3, #20
 80054a2:	b12b      	cbz	r3, 80054b0 <_dtoa_r+0x7f0>
 80054a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a6:	f108 0801 	add.w	r8, r8, #1
 80054aa:	3301      	adds	r3, #1
 80054ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ae:	2301      	movs	r3, #1
 80054b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80054b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 81aa 	beq.w	800580e <_dtoa_r+0xb4e>
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054c0:	6918      	ldr	r0, [r3, #16]
 80054c2:	f000 fb6b 	bl	8005b9c <__hi0bits>
 80054c6:	f1c0 0020 	rsb	r0, r0, #32
 80054ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054cc:	4418      	add	r0, r3
 80054ce:	f010 001f 	ands.w	r0, r0, #31
 80054d2:	d071      	beq.n	80055b8 <_dtoa_r+0x8f8>
 80054d4:	f1c0 0320 	rsb	r3, r0, #32
 80054d8:	2b04      	cmp	r3, #4
 80054da:	dd65      	ble.n	80055a8 <_dtoa_r+0x8e8>
 80054dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054de:	f1c0 001c 	rsb	r0, r0, #28
 80054e2:	4403      	add	r3, r0
 80054e4:	4480      	add	r8, r0
 80054e6:	4406      	add	r6, r0
 80054e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ea:	f1b8 0f00 	cmp.w	r8, #0
 80054ee:	dd05      	ble.n	80054fc <_dtoa_r+0x83c>
 80054f0:	4649      	mov	r1, r9
 80054f2:	4642      	mov	r2, r8
 80054f4:	4658      	mov	r0, fp
 80054f6:	f000 fcb5 	bl	8005e64 <__lshift>
 80054fa:	4681      	mov	r9, r0
 80054fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	dd05      	ble.n	800550e <_dtoa_r+0x84e>
 8005502:	4621      	mov	r1, r4
 8005504:	461a      	mov	r2, r3
 8005506:	4658      	mov	r0, fp
 8005508:	f000 fcac 	bl	8005e64 <__lshift>
 800550c:	4604      	mov	r4, r0
 800550e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d053      	beq.n	80055bc <_dtoa_r+0x8fc>
 8005514:	4621      	mov	r1, r4
 8005516:	4648      	mov	r0, r9
 8005518:	f000 fd10 	bl	8005f3c <__mcmp>
 800551c:	2800      	cmp	r0, #0
 800551e:	da4d      	bge.n	80055bc <_dtoa_r+0x8fc>
 8005520:	1e7b      	subs	r3, r7, #1
 8005522:	4649      	mov	r1, r9
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	220a      	movs	r2, #10
 8005528:	2300      	movs	r3, #0
 800552a:	4658      	mov	r0, fp
 800552c:	f000 faf0 	bl	8005b10 <__multadd>
 8005530:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005532:	4681      	mov	r9, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 816c 	beq.w	8005812 <_dtoa_r+0xb52>
 800553a:	2300      	movs	r3, #0
 800553c:	4629      	mov	r1, r5
 800553e:	220a      	movs	r2, #10
 8005540:	4658      	mov	r0, fp
 8005542:	f000 fae5 	bl	8005b10 <__multadd>
 8005546:	9b08      	ldr	r3, [sp, #32]
 8005548:	4605      	mov	r5, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	dc61      	bgt.n	8005612 <_dtoa_r+0x952>
 800554e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005550:	2b02      	cmp	r3, #2
 8005552:	dc3b      	bgt.n	80055cc <_dtoa_r+0x90c>
 8005554:	e05d      	b.n	8005612 <_dtoa_r+0x952>
 8005556:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005558:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800555c:	e746      	b.n	80053ec <_dtoa_r+0x72c>
 800555e:	9b07      	ldr	r3, [sp, #28]
 8005560:	1e5c      	subs	r4, r3, #1
 8005562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005564:	42a3      	cmp	r3, r4
 8005566:	bfbf      	itttt	lt
 8005568:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800556a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800556c:	1ae3      	sublt	r3, r4, r3
 800556e:	18d2      	addlt	r2, r2, r3
 8005570:	bfa8      	it	ge
 8005572:	1b1c      	subge	r4, r3, r4
 8005574:	9b07      	ldr	r3, [sp, #28]
 8005576:	bfbe      	ittt	lt
 8005578:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800557a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800557c:	2400      	movlt	r4, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	bfb5      	itete	lt
 8005582:	eba8 0603 	sublt.w	r6, r8, r3
 8005586:	4646      	movge	r6, r8
 8005588:	2300      	movlt	r3, #0
 800558a:	9b07      	ldrge	r3, [sp, #28]
 800558c:	e730      	b.n	80053f0 <_dtoa_r+0x730>
 800558e:	4646      	mov	r6, r8
 8005590:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005592:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005594:	e735      	b.n	8005402 <_dtoa_r+0x742>
 8005596:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005598:	e75c      	b.n	8005454 <_dtoa_r+0x794>
 800559a:	2300      	movs	r3, #0
 800559c:	e788      	b.n	80054b0 <_dtoa_r+0x7f0>
 800559e:	9b02      	ldr	r3, [sp, #8]
 80055a0:	e786      	b.n	80054b0 <_dtoa_r+0x7f0>
 80055a2:	2300      	movs	r3, #0
 80055a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80055a6:	e788      	b.n	80054ba <_dtoa_r+0x7fa>
 80055a8:	d09f      	beq.n	80054ea <_dtoa_r+0x82a>
 80055aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ac:	331c      	adds	r3, #28
 80055ae:	441a      	add	r2, r3
 80055b0:	4498      	add	r8, r3
 80055b2:	441e      	add	r6, r3
 80055b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055b6:	e798      	b.n	80054ea <_dtoa_r+0x82a>
 80055b8:	4603      	mov	r3, r0
 80055ba:	e7f6      	b.n	80055aa <_dtoa_r+0x8ea>
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	9704      	str	r7, [sp, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dc20      	bgt.n	8005606 <_dtoa_r+0x946>
 80055c4:	9308      	str	r3, [sp, #32]
 80055c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	dd1e      	ble.n	800560a <_dtoa_r+0x94a>
 80055cc:	9b08      	ldr	r3, [sp, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f47f aebc 	bne.w	800534c <_dtoa_r+0x68c>
 80055d4:	4621      	mov	r1, r4
 80055d6:	2205      	movs	r2, #5
 80055d8:	4658      	mov	r0, fp
 80055da:	f000 fa99 	bl	8005b10 <__multadd>
 80055de:	4601      	mov	r1, r0
 80055e0:	4604      	mov	r4, r0
 80055e2:	4648      	mov	r0, r9
 80055e4:	f000 fcaa 	bl	8005f3c <__mcmp>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f77f aeaf 	ble.w	800534c <_dtoa_r+0x68c>
 80055ee:	2331      	movs	r3, #49	@ 0x31
 80055f0:	4656      	mov	r6, sl
 80055f2:	f806 3b01 	strb.w	r3, [r6], #1
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	3301      	adds	r3, #1
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	e6aa      	b.n	8005354 <_dtoa_r+0x694>
 80055fe:	9c07      	ldr	r4, [sp, #28]
 8005600:	9704      	str	r7, [sp, #16]
 8005602:	4625      	mov	r5, r4
 8005604:	e7f3      	b.n	80055ee <_dtoa_r+0x92e>
 8005606:	9b07      	ldr	r3, [sp, #28]
 8005608:	9308      	str	r3, [sp, #32]
 800560a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8104 	beq.w	800581a <_dtoa_r+0xb5a>
 8005612:	2e00      	cmp	r6, #0
 8005614:	dd05      	ble.n	8005622 <_dtoa_r+0x962>
 8005616:	4629      	mov	r1, r5
 8005618:	4632      	mov	r2, r6
 800561a:	4658      	mov	r0, fp
 800561c:	f000 fc22 	bl	8005e64 <__lshift>
 8005620:	4605      	mov	r5, r0
 8005622:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05a      	beq.n	80056de <_dtoa_r+0xa1e>
 8005628:	4658      	mov	r0, fp
 800562a:	6869      	ldr	r1, [r5, #4]
 800562c:	f000 fa0e 	bl	8005a4c <_Balloc>
 8005630:	4606      	mov	r6, r0
 8005632:	b928      	cbnz	r0, 8005640 <_dtoa_r+0x980>
 8005634:	4602      	mov	r2, r0
 8005636:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800563a:	4b83      	ldr	r3, [pc, #524]	@ (8005848 <_dtoa_r+0xb88>)
 800563c:	f7ff bb54 	b.w	8004ce8 <_dtoa_r+0x28>
 8005640:	692a      	ldr	r2, [r5, #16]
 8005642:	f105 010c 	add.w	r1, r5, #12
 8005646:	3202      	adds	r2, #2
 8005648:	0092      	lsls	r2, r2, #2
 800564a:	300c      	adds	r0, #12
 800564c:	f000 ffa8 	bl	80065a0 <memcpy>
 8005650:	2201      	movs	r2, #1
 8005652:	4631      	mov	r1, r6
 8005654:	4658      	mov	r0, fp
 8005656:	f000 fc05 	bl	8005e64 <__lshift>
 800565a:	462f      	mov	r7, r5
 800565c:	4605      	mov	r5, r0
 800565e:	f10a 0301 	add.w	r3, sl, #1
 8005662:	9307      	str	r3, [sp, #28]
 8005664:	9b08      	ldr	r3, [sp, #32]
 8005666:	4453      	add	r3, sl
 8005668:	930b      	str	r3, [sp, #44]	@ 0x2c
 800566a:	9b02      	ldr	r3, [sp, #8]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	930a      	str	r3, [sp, #40]	@ 0x28
 8005672:	9b07      	ldr	r3, [sp, #28]
 8005674:	4621      	mov	r1, r4
 8005676:	3b01      	subs	r3, #1
 8005678:	4648      	mov	r0, r9
 800567a:	9302      	str	r3, [sp, #8]
 800567c:	f7ff fa97 	bl	8004bae <quorem>
 8005680:	4639      	mov	r1, r7
 8005682:	9008      	str	r0, [sp, #32]
 8005684:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005688:	4648      	mov	r0, r9
 800568a:	f000 fc57 	bl	8005f3c <__mcmp>
 800568e:	462a      	mov	r2, r5
 8005690:	9009      	str	r0, [sp, #36]	@ 0x24
 8005692:	4621      	mov	r1, r4
 8005694:	4658      	mov	r0, fp
 8005696:	f000 fc6d 	bl	8005f74 <__mdiff>
 800569a:	68c2      	ldr	r2, [r0, #12]
 800569c:	4606      	mov	r6, r0
 800569e:	bb02      	cbnz	r2, 80056e2 <_dtoa_r+0xa22>
 80056a0:	4601      	mov	r1, r0
 80056a2:	4648      	mov	r0, r9
 80056a4:	f000 fc4a 	bl	8005f3c <__mcmp>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4631      	mov	r1, r6
 80056ac:	4658      	mov	r0, fp
 80056ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80056b0:	f000 fa0c 	bl	8005acc <_Bfree>
 80056b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056b8:	9e07      	ldr	r6, [sp, #28]
 80056ba:	ea43 0102 	orr.w	r1, r3, r2
 80056be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056c0:	4319      	orrs	r1, r3
 80056c2:	d110      	bne.n	80056e6 <_dtoa_r+0xa26>
 80056c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056c8:	d029      	beq.n	800571e <_dtoa_r+0xa5e>
 80056ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dd02      	ble.n	80056d6 <_dtoa_r+0xa16>
 80056d0:	9b08      	ldr	r3, [sp, #32]
 80056d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	f883 8000 	strb.w	r8, [r3]
 80056dc:	e63b      	b.n	8005356 <_dtoa_r+0x696>
 80056de:	4628      	mov	r0, r5
 80056e0:	e7bb      	b.n	800565a <_dtoa_r+0x99a>
 80056e2:	2201      	movs	r2, #1
 80056e4:	e7e1      	b.n	80056aa <_dtoa_r+0x9ea>
 80056e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	db04      	blt.n	80056f6 <_dtoa_r+0xa36>
 80056ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80056ee:	430b      	orrs	r3, r1
 80056f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056f2:	430b      	orrs	r3, r1
 80056f4:	d120      	bne.n	8005738 <_dtoa_r+0xa78>
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	dded      	ble.n	80056d6 <_dtoa_r+0xa16>
 80056fa:	4649      	mov	r1, r9
 80056fc:	2201      	movs	r2, #1
 80056fe:	4658      	mov	r0, fp
 8005700:	f000 fbb0 	bl	8005e64 <__lshift>
 8005704:	4621      	mov	r1, r4
 8005706:	4681      	mov	r9, r0
 8005708:	f000 fc18 	bl	8005f3c <__mcmp>
 800570c:	2800      	cmp	r0, #0
 800570e:	dc03      	bgt.n	8005718 <_dtoa_r+0xa58>
 8005710:	d1e1      	bne.n	80056d6 <_dtoa_r+0xa16>
 8005712:	f018 0f01 	tst.w	r8, #1
 8005716:	d0de      	beq.n	80056d6 <_dtoa_r+0xa16>
 8005718:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800571c:	d1d8      	bne.n	80056d0 <_dtoa_r+0xa10>
 800571e:	2339      	movs	r3, #57	@ 0x39
 8005720:	9a02      	ldr	r2, [sp, #8]
 8005722:	7013      	strb	r3, [r2, #0]
 8005724:	4633      	mov	r3, r6
 8005726:	461e      	mov	r6, r3
 8005728:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800572c:	3b01      	subs	r3, #1
 800572e:	2a39      	cmp	r2, #57	@ 0x39
 8005730:	d052      	beq.n	80057d8 <_dtoa_r+0xb18>
 8005732:	3201      	adds	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e60e      	b.n	8005356 <_dtoa_r+0x696>
 8005738:	2a00      	cmp	r2, #0
 800573a:	dd07      	ble.n	800574c <_dtoa_r+0xa8c>
 800573c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005740:	d0ed      	beq.n	800571e <_dtoa_r+0xa5e>
 8005742:	9a02      	ldr	r2, [sp, #8]
 8005744:	f108 0301 	add.w	r3, r8, #1
 8005748:	7013      	strb	r3, [r2, #0]
 800574a:	e604      	b.n	8005356 <_dtoa_r+0x696>
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	9a07      	ldr	r2, [sp, #28]
 8005750:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005756:	4293      	cmp	r3, r2
 8005758:	d028      	beq.n	80057ac <_dtoa_r+0xaec>
 800575a:	4649      	mov	r1, r9
 800575c:	2300      	movs	r3, #0
 800575e:	220a      	movs	r2, #10
 8005760:	4658      	mov	r0, fp
 8005762:	f000 f9d5 	bl	8005b10 <__multadd>
 8005766:	42af      	cmp	r7, r5
 8005768:	4681      	mov	r9, r0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	f04f 020a 	mov.w	r2, #10
 8005772:	4639      	mov	r1, r7
 8005774:	4658      	mov	r0, fp
 8005776:	d107      	bne.n	8005788 <_dtoa_r+0xac8>
 8005778:	f000 f9ca 	bl	8005b10 <__multadd>
 800577c:	4607      	mov	r7, r0
 800577e:	4605      	mov	r5, r0
 8005780:	9b07      	ldr	r3, [sp, #28]
 8005782:	3301      	adds	r3, #1
 8005784:	9307      	str	r3, [sp, #28]
 8005786:	e774      	b.n	8005672 <_dtoa_r+0x9b2>
 8005788:	f000 f9c2 	bl	8005b10 <__multadd>
 800578c:	4629      	mov	r1, r5
 800578e:	4607      	mov	r7, r0
 8005790:	2300      	movs	r3, #0
 8005792:	220a      	movs	r2, #10
 8005794:	4658      	mov	r0, fp
 8005796:	f000 f9bb 	bl	8005b10 <__multadd>
 800579a:	4605      	mov	r5, r0
 800579c:	e7f0      	b.n	8005780 <_dtoa_r+0xac0>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	2700      	movs	r7, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	bfcc      	ite	gt
 80057a6:	461e      	movgt	r6, r3
 80057a8:	2601      	movle	r6, #1
 80057aa:	4456      	add	r6, sl
 80057ac:	4649      	mov	r1, r9
 80057ae:	2201      	movs	r2, #1
 80057b0:	4658      	mov	r0, fp
 80057b2:	f000 fb57 	bl	8005e64 <__lshift>
 80057b6:	4621      	mov	r1, r4
 80057b8:	4681      	mov	r9, r0
 80057ba:	f000 fbbf 	bl	8005f3c <__mcmp>
 80057be:	2800      	cmp	r0, #0
 80057c0:	dcb0      	bgt.n	8005724 <_dtoa_r+0xa64>
 80057c2:	d102      	bne.n	80057ca <_dtoa_r+0xb0a>
 80057c4:	f018 0f01 	tst.w	r8, #1
 80057c8:	d1ac      	bne.n	8005724 <_dtoa_r+0xa64>
 80057ca:	4633      	mov	r3, r6
 80057cc:	461e      	mov	r6, r3
 80057ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057d2:	2a30      	cmp	r2, #48	@ 0x30
 80057d4:	d0fa      	beq.n	80057cc <_dtoa_r+0xb0c>
 80057d6:	e5be      	b.n	8005356 <_dtoa_r+0x696>
 80057d8:	459a      	cmp	sl, r3
 80057da:	d1a4      	bne.n	8005726 <_dtoa_r+0xa66>
 80057dc:	9b04      	ldr	r3, [sp, #16]
 80057de:	3301      	adds	r3, #1
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	2331      	movs	r3, #49	@ 0x31
 80057e4:	f88a 3000 	strb.w	r3, [sl]
 80057e8:	e5b5      	b.n	8005356 <_dtoa_r+0x696>
 80057ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800584c <_dtoa_r+0xb8c>
 80057f0:	b11b      	cbz	r3, 80057fa <_dtoa_r+0xb3a>
 80057f2:	f10a 0308 	add.w	r3, sl, #8
 80057f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4650      	mov	r0, sl
 80057fc:	b017      	add	sp, #92	@ 0x5c
 80057fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005802:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005804:	2b01      	cmp	r3, #1
 8005806:	f77f ae3d 	ble.w	8005484 <_dtoa_r+0x7c4>
 800580a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800580c:	930a      	str	r3, [sp, #40]	@ 0x28
 800580e:	2001      	movs	r0, #1
 8005810:	e65b      	b.n	80054ca <_dtoa_r+0x80a>
 8005812:	9b08      	ldr	r3, [sp, #32]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f77f aed6 	ble.w	80055c6 <_dtoa_r+0x906>
 800581a:	4656      	mov	r6, sl
 800581c:	4621      	mov	r1, r4
 800581e:	4648      	mov	r0, r9
 8005820:	f7ff f9c5 	bl	8004bae <quorem>
 8005824:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005828:	9b08      	ldr	r3, [sp, #32]
 800582a:	f806 8b01 	strb.w	r8, [r6], #1
 800582e:	eba6 020a 	sub.w	r2, r6, sl
 8005832:	4293      	cmp	r3, r2
 8005834:	ddb3      	ble.n	800579e <_dtoa_r+0xade>
 8005836:	4649      	mov	r1, r9
 8005838:	2300      	movs	r3, #0
 800583a:	220a      	movs	r2, #10
 800583c:	4658      	mov	r0, fp
 800583e:	f000 f967 	bl	8005b10 <__multadd>
 8005842:	4681      	mov	r9, r0
 8005844:	e7ea      	b.n	800581c <_dtoa_r+0xb5c>
 8005846:	bf00      	nop
 8005848:	08006d3e 	.word	0x08006d3e
 800584c:	08006cc2 	.word	0x08006cc2

08005850 <_free_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4605      	mov	r5, r0
 8005854:	2900      	cmp	r1, #0
 8005856:	d040      	beq.n	80058da <_free_r+0x8a>
 8005858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800585c:	1f0c      	subs	r4, r1, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	bfb8      	it	lt
 8005862:	18e4      	addlt	r4, r4, r3
 8005864:	f000 f8e6 	bl	8005a34 <__malloc_lock>
 8005868:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <_free_r+0x8c>)
 800586a:	6813      	ldr	r3, [r2, #0]
 800586c:	b933      	cbnz	r3, 800587c <_free_r+0x2c>
 800586e:	6063      	str	r3, [r4, #4]
 8005870:	6014      	str	r4, [r2, #0]
 8005872:	4628      	mov	r0, r5
 8005874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005878:	f000 b8e2 	b.w	8005a40 <__malloc_unlock>
 800587c:	42a3      	cmp	r3, r4
 800587e:	d908      	bls.n	8005892 <_free_r+0x42>
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	1821      	adds	r1, r4, r0
 8005884:	428b      	cmp	r3, r1
 8005886:	bf01      	itttt	eq
 8005888:	6819      	ldreq	r1, [r3, #0]
 800588a:	685b      	ldreq	r3, [r3, #4]
 800588c:	1809      	addeq	r1, r1, r0
 800588e:	6021      	streq	r1, [r4, #0]
 8005890:	e7ed      	b.n	800586e <_free_r+0x1e>
 8005892:	461a      	mov	r2, r3
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	b10b      	cbz	r3, 800589c <_free_r+0x4c>
 8005898:	42a3      	cmp	r3, r4
 800589a:	d9fa      	bls.n	8005892 <_free_r+0x42>
 800589c:	6811      	ldr	r1, [r2, #0]
 800589e:	1850      	adds	r0, r2, r1
 80058a0:	42a0      	cmp	r0, r4
 80058a2:	d10b      	bne.n	80058bc <_free_r+0x6c>
 80058a4:	6820      	ldr	r0, [r4, #0]
 80058a6:	4401      	add	r1, r0
 80058a8:	1850      	adds	r0, r2, r1
 80058aa:	4283      	cmp	r3, r0
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	d1e0      	bne.n	8005872 <_free_r+0x22>
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4408      	add	r0, r1
 80058b6:	6010      	str	r0, [r2, #0]
 80058b8:	6053      	str	r3, [r2, #4]
 80058ba:	e7da      	b.n	8005872 <_free_r+0x22>
 80058bc:	d902      	bls.n	80058c4 <_free_r+0x74>
 80058be:	230c      	movs	r3, #12
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	e7d6      	b.n	8005872 <_free_r+0x22>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	1821      	adds	r1, r4, r0
 80058c8:	428b      	cmp	r3, r1
 80058ca:	bf01      	itttt	eq
 80058cc:	6819      	ldreq	r1, [r3, #0]
 80058ce:	685b      	ldreq	r3, [r3, #4]
 80058d0:	1809      	addeq	r1, r1, r0
 80058d2:	6021      	streq	r1, [r4, #0]
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	6054      	str	r4, [r2, #4]
 80058d8:	e7cb      	b.n	8005872 <_free_r+0x22>
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	200004b8 	.word	0x200004b8

080058e0 <malloc>:
 80058e0:	4b02      	ldr	r3, [pc, #8]	@ (80058ec <malloc+0xc>)
 80058e2:	4601      	mov	r1, r0
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	f000 b825 	b.w	8005934 <_malloc_r>
 80058ea:	bf00      	nop
 80058ec:	2000001c 	.word	0x2000001c

080058f0 <sbrk_aligned>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	4e0f      	ldr	r6, [pc, #60]	@ (8005930 <sbrk_aligned+0x40>)
 80058f4:	460c      	mov	r4, r1
 80058f6:	6831      	ldr	r1, [r6, #0]
 80058f8:	4605      	mov	r5, r0
 80058fa:	b911      	cbnz	r1, 8005902 <sbrk_aligned+0x12>
 80058fc:	f000 fe40 	bl	8006580 <_sbrk_r>
 8005900:	6030      	str	r0, [r6, #0]
 8005902:	4621      	mov	r1, r4
 8005904:	4628      	mov	r0, r5
 8005906:	f000 fe3b 	bl	8006580 <_sbrk_r>
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	d103      	bne.n	8005916 <sbrk_aligned+0x26>
 800590e:	f04f 34ff 	mov.w	r4, #4294967295
 8005912:	4620      	mov	r0, r4
 8005914:	bd70      	pop	{r4, r5, r6, pc}
 8005916:	1cc4      	adds	r4, r0, #3
 8005918:	f024 0403 	bic.w	r4, r4, #3
 800591c:	42a0      	cmp	r0, r4
 800591e:	d0f8      	beq.n	8005912 <sbrk_aligned+0x22>
 8005920:	1a21      	subs	r1, r4, r0
 8005922:	4628      	mov	r0, r5
 8005924:	f000 fe2c 	bl	8006580 <_sbrk_r>
 8005928:	3001      	adds	r0, #1
 800592a:	d1f2      	bne.n	8005912 <sbrk_aligned+0x22>
 800592c:	e7ef      	b.n	800590e <sbrk_aligned+0x1e>
 800592e:	bf00      	nop
 8005930:	200004b4 	.word	0x200004b4

08005934 <_malloc_r>:
 8005934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005938:	1ccd      	adds	r5, r1, #3
 800593a:	f025 0503 	bic.w	r5, r5, #3
 800593e:	3508      	adds	r5, #8
 8005940:	2d0c      	cmp	r5, #12
 8005942:	bf38      	it	cc
 8005944:	250c      	movcc	r5, #12
 8005946:	2d00      	cmp	r5, #0
 8005948:	4606      	mov	r6, r0
 800594a:	db01      	blt.n	8005950 <_malloc_r+0x1c>
 800594c:	42a9      	cmp	r1, r5
 800594e:	d904      	bls.n	800595a <_malloc_r+0x26>
 8005950:	230c      	movs	r3, #12
 8005952:	6033      	str	r3, [r6, #0]
 8005954:	2000      	movs	r0, #0
 8005956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a30 <_malloc_r+0xfc>
 800595e:	f000 f869 	bl	8005a34 <__malloc_lock>
 8005962:	f8d8 3000 	ldr.w	r3, [r8]
 8005966:	461c      	mov	r4, r3
 8005968:	bb44      	cbnz	r4, 80059bc <_malloc_r+0x88>
 800596a:	4629      	mov	r1, r5
 800596c:	4630      	mov	r0, r6
 800596e:	f7ff ffbf 	bl	80058f0 <sbrk_aligned>
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	4604      	mov	r4, r0
 8005976:	d158      	bne.n	8005a2a <_malloc_r+0xf6>
 8005978:	f8d8 4000 	ldr.w	r4, [r8]
 800597c:	4627      	mov	r7, r4
 800597e:	2f00      	cmp	r7, #0
 8005980:	d143      	bne.n	8005a0a <_malloc_r+0xd6>
 8005982:	2c00      	cmp	r4, #0
 8005984:	d04b      	beq.n	8005a1e <_malloc_r+0xea>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	4639      	mov	r1, r7
 800598a:	4630      	mov	r0, r6
 800598c:	eb04 0903 	add.w	r9, r4, r3
 8005990:	f000 fdf6 	bl	8006580 <_sbrk_r>
 8005994:	4581      	cmp	r9, r0
 8005996:	d142      	bne.n	8005a1e <_malloc_r+0xea>
 8005998:	6821      	ldr	r1, [r4, #0]
 800599a:	4630      	mov	r0, r6
 800599c:	1a6d      	subs	r5, r5, r1
 800599e:	4629      	mov	r1, r5
 80059a0:	f7ff ffa6 	bl	80058f0 <sbrk_aligned>
 80059a4:	3001      	adds	r0, #1
 80059a6:	d03a      	beq.n	8005a1e <_malloc_r+0xea>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	442b      	add	r3, r5
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	f8d8 3000 	ldr.w	r3, [r8]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	bb62      	cbnz	r2, 8005a10 <_malloc_r+0xdc>
 80059b6:	f8c8 7000 	str.w	r7, [r8]
 80059ba:	e00f      	b.n	80059dc <_malloc_r+0xa8>
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	1b52      	subs	r2, r2, r5
 80059c0:	d420      	bmi.n	8005a04 <_malloc_r+0xd0>
 80059c2:	2a0b      	cmp	r2, #11
 80059c4:	d917      	bls.n	80059f6 <_malloc_r+0xc2>
 80059c6:	1961      	adds	r1, r4, r5
 80059c8:	42a3      	cmp	r3, r4
 80059ca:	6025      	str	r5, [r4, #0]
 80059cc:	bf18      	it	ne
 80059ce:	6059      	strne	r1, [r3, #4]
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	bf08      	it	eq
 80059d4:	f8c8 1000 	streq.w	r1, [r8]
 80059d8:	5162      	str	r2, [r4, r5]
 80059da:	604b      	str	r3, [r1, #4]
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 f82f 	bl	8005a40 <__malloc_unlock>
 80059e2:	f104 000b 	add.w	r0, r4, #11
 80059e6:	1d23      	adds	r3, r4, #4
 80059e8:	f020 0007 	bic.w	r0, r0, #7
 80059ec:	1ac2      	subs	r2, r0, r3
 80059ee:	bf1c      	itt	ne
 80059f0:	1a1b      	subne	r3, r3, r0
 80059f2:	50a3      	strne	r3, [r4, r2]
 80059f4:	e7af      	b.n	8005956 <_malloc_r+0x22>
 80059f6:	6862      	ldr	r2, [r4, #4]
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	bf0c      	ite	eq
 80059fc:	f8c8 2000 	streq.w	r2, [r8]
 8005a00:	605a      	strne	r2, [r3, #4]
 8005a02:	e7eb      	b.n	80059dc <_malloc_r+0xa8>
 8005a04:	4623      	mov	r3, r4
 8005a06:	6864      	ldr	r4, [r4, #4]
 8005a08:	e7ae      	b.n	8005968 <_malloc_r+0x34>
 8005a0a:	463c      	mov	r4, r7
 8005a0c:	687f      	ldr	r7, [r7, #4]
 8005a0e:	e7b6      	b.n	800597e <_malloc_r+0x4a>
 8005a10:	461a      	mov	r2, r3
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d1fb      	bne.n	8005a10 <_malloc_r+0xdc>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6053      	str	r3, [r2, #4]
 8005a1c:	e7de      	b.n	80059dc <_malloc_r+0xa8>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	4630      	mov	r0, r6
 8005a22:	6033      	str	r3, [r6, #0]
 8005a24:	f000 f80c 	bl	8005a40 <__malloc_unlock>
 8005a28:	e794      	b.n	8005954 <_malloc_r+0x20>
 8005a2a:	6005      	str	r5, [r0, #0]
 8005a2c:	e7d6      	b.n	80059dc <_malloc_r+0xa8>
 8005a2e:	bf00      	nop
 8005a30:	200004b8 	.word	0x200004b8

08005a34 <__malloc_lock>:
 8005a34:	4801      	ldr	r0, [pc, #4]	@ (8005a3c <__malloc_lock+0x8>)
 8005a36:	f7ff b8aa 	b.w	8004b8e <__retarget_lock_acquire_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	200004b0 	.word	0x200004b0

08005a40 <__malloc_unlock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	@ (8005a48 <__malloc_unlock+0x8>)
 8005a42:	f7ff b8a5 	b.w	8004b90 <__retarget_lock_release_recursive>
 8005a46:	bf00      	nop
 8005a48:	200004b0 	.word	0x200004b0

08005a4c <_Balloc>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	69c6      	ldr	r6, [r0, #28]
 8005a50:	4604      	mov	r4, r0
 8005a52:	460d      	mov	r5, r1
 8005a54:	b976      	cbnz	r6, 8005a74 <_Balloc+0x28>
 8005a56:	2010      	movs	r0, #16
 8005a58:	f7ff ff42 	bl	80058e0 <malloc>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	61e0      	str	r0, [r4, #28]
 8005a60:	b920      	cbnz	r0, 8005a6c <_Balloc+0x20>
 8005a62:	216b      	movs	r1, #107	@ 0x6b
 8005a64:	4b17      	ldr	r3, [pc, #92]	@ (8005ac4 <_Balloc+0x78>)
 8005a66:	4818      	ldr	r0, [pc, #96]	@ (8005ac8 <_Balloc+0x7c>)
 8005a68:	f000 fda8 	bl	80065bc <__assert_func>
 8005a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a70:	6006      	str	r6, [r0, #0]
 8005a72:	60c6      	str	r6, [r0, #12]
 8005a74:	69e6      	ldr	r6, [r4, #28]
 8005a76:	68f3      	ldr	r3, [r6, #12]
 8005a78:	b183      	cbz	r3, 8005a9c <_Balloc+0x50>
 8005a7a:	69e3      	ldr	r3, [r4, #28]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a82:	b9b8      	cbnz	r0, 8005ab4 <_Balloc+0x68>
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f605 	lsl.w	r6, r1, r5
 8005a8a:	1d72      	adds	r2, r6, #5
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	0092      	lsls	r2, r2, #2
 8005a90:	f000 fdb2 	bl	80065f8 <_calloc_r>
 8005a94:	b160      	cbz	r0, 8005ab0 <_Balloc+0x64>
 8005a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a9a:	e00e      	b.n	8005aba <_Balloc+0x6e>
 8005a9c:	2221      	movs	r2, #33	@ 0x21
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fda9 	bl	80065f8 <_calloc_r>
 8005aa6:	69e3      	ldr	r3, [r4, #28]
 8005aa8:	60f0      	str	r0, [r6, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e4      	bne.n	8005a7a <_Balloc+0x2e>
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	6802      	ldr	r2, [r0, #0]
 8005ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aba:	2300      	movs	r3, #0
 8005abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ac0:	e7f7      	b.n	8005ab2 <_Balloc+0x66>
 8005ac2:	bf00      	nop
 8005ac4:	08006ccf 	.word	0x08006ccf
 8005ac8:	08006d4f 	.word	0x08006d4f

08005acc <_Bfree>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	69c6      	ldr	r6, [r0, #28]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b976      	cbnz	r6, 8005af4 <_Bfree+0x28>
 8005ad6:	2010      	movs	r0, #16
 8005ad8:	f7ff ff02 	bl	80058e0 <malloc>
 8005adc:	4602      	mov	r2, r0
 8005ade:	61e8      	str	r0, [r5, #28]
 8005ae0:	b920      	cbnz	r0, 8005aec <_Bfree+0x20>
 8005ae2:	218f      	movs	r1, #143	@ 0x8f
 8005ae4:	4b08      	ldr	r3, [pc, #32]	@ (8005b08 <_Bfree+0x3c>)
 8005ae6:	4809      	ldr	r0, [pc, #36]	@ (8005b0c <_Bfree+0x40>)
 8005ae8:	f000 fd68 	bl	80065bc <__assert_func>
 8005aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005af0:	6006      	str	r6, [r0, #0]
 8005af2:	60c6      	str	r6, [r0, #12]
 8005af4:	b13c      	cbz	r4, 8005b06 <_Bfree+0x3a>
 8005af6:	69eb      	ldr	r3, [r5, #28]
 8005af8:	6862      	ldr	r2, [r4, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b00:	6021      	str	r1, [r4, #0]
 8005b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	08006ccf 	.word	0x08006ccf
 8005b0c:	08006d4f 	.word	0x08006d4f

08005b10 <__multadd>:
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b14:	4607      	mov	r7, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	461e      	mov	r6, r3
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	690d      	ldr	r5, [r1, #16]
 8005b1e:	f101 0c14 	add.w	ip, r1, #20
 8005b22:	f8dc 3000 	ldr.w	r3, [ip]
 8005b26:	3001      	adds	r0, #1
 8005b28:	b299      	uxth	r1, r3
 8005b2a:	fb02 6101 	mla	r1, r2, r1, r6
 8005b2e:	0c1e      	lsrs	r6, r3, #16
 8005b30:	0c0b      	lsrs	r3, r1, #16
 8005b32:	fb02 3306 	mla	r3, r2, r6, r3
 8005b36:	b289      	uxth	r1, r1
 8005b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b3c:	4285      	cmp	r5, r0
 8005b3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b42:	f84c 1b04 	str.w	r1, [ip], #4
 8005b46:	dcec      	bgt.n	8005b22 <__multadd+0x12>
 8005b48:	b30e      	cbz	r6, 8005b8e <__multadd+0x7e>
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dc19      	bgt.n	8005b84 <__multadd+0x74>
 8005b50:	6861      	ldr	r1, [r4, #4]
 8005b52:	4638      	mov	r0, r7
 8005b54:	3101      	adds	r1, #1
 8005b56:	f7ff ff79 	bl	8005a4c <_Balloc>
 8005b5a:	4680      	mov	r8, r0
 8005b5c:	b928      	cbnz	r0, 8005b6a <__multadd+0x5a>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	21ba      	movs	r1, #186	@ 0xba
 8005b62:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <__multadd+0x84>)
 8005b64:	480c      	ldr	r0, [pc, #48]	@ (8005b98 <__multadd+0x88>)
 8005b66:	f000 fd29 	bl	80065bc <__assert_func>
 8005b6a:	6922      	ldr	r2, [r4, #16]
 8005b6c:	f104 010c 	add.w	r1, r4, #12
 8005b70:	3202      	adds	r2, #2
 8005b72:	0092      	lsls	r2, r2, #2
 8005b74:	300c      	adds	r0, #12
 8005b76:	f000 fd13 	bl	80065a0 <memcpy>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ffa5 	bl	8005acc <_Bfree>
 8005b82:	4644      	mov	r4, r8
 8005b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b88:	3501      	adds	r5, #1
 8005b8a:	615e      	str	r6, [r3, #20]
 8005b8c:	6125      	str	r5, [r4, #16]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b94:	08006d3e 	.word	0x08006d3e
 8005b98:	08006d4f 	.word	0x08006d4f

08005b9c <__hi0bits>:
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ba2:	bf3a      	itte	cc
 8005ba4:	0403      	lslcc	r3, r0, #16
 8005ba6:	2010      	movcc	r0, #16
 8005ba8:	2000      	movcs	r0, #0
 8005baa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bae:	bf3c      	itt	cc
 8005bb0:	021b      	lslcc	r3, r3, #8
 8005bb2:	3008      	addcc	r0, #8
 8005bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bb8:	bf3c      	itt	cc
 8005bba:	011b      	lslcc	r3, r3, #4
 8005bbc:	3004      	addcc	r0, #4
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc2:	bf3c      	itt	cc
 8005bc4:	009b      	lslcc	r3, r3, #2
 8005bc6:	3002      	addcc	r0, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	db05      	blt.n	8005bd8 <__hi0bits+0x3c>
 8005bcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005bd0:	f100 0001 	add.w	r0, r0, #1
 8005bd4:	bf08      	it	eq
 8005bd6:	2020      	moveq	r0, #32
 8005bd8:	4770      	bx	lr

08005bda <__lo0bits>:
 8005bda:	6803      	ldr	r3, [r0, #0]
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f013 0007 	ands.w	r0, r3, #7
 8005be2:	d00b      	beq.n	8005bfc <__lo0bits+0x22>
 8005be4:	07d9      	lsls	r1, r3, #31
 8005be6:	d421      	bmi.n	8005c2c <__lo0bits+0x52>
 8005be8:	0798      	lsls	r0, r3, #30
 8005bea:	bf49      	itett	mi
 8005bec:	085b      	lsrmi	r3, r3, #1
 8005bee:	089b      	lsrpl	r3, r3, #2
 8005bf0:	2001      	movmi	r0, #1
 8005bf2:	6013      	strmi	r3, [r2, #0]
 8005bf4:	bf5c      	itt	pl
 8005bf6:	2002      	movpl	r0, #2
 8005bf8:	6013      	strpl	r3, [r2, #0]
 8005bfa:	4770      	bx	lr
 8005bfc:	b299      	uxth	r1, r3
 8005bfe:	b909      	cbnz	r1, 8005c04 <__lo0bits+0x2a>
 8005c00:	2010      	movs	r0, #16
 8005c02:	0c1b      	lsrs	r3, r3, #16
 8005c04:	b2d9      	uxtb	r1, r3
 8005c06:	b909      	cbnz	r1, 8005c0c <__lo0bits+0x32>
 8005c08:	3008      	adds	r0, #8
 8005c0a:	0a1b      	lsrs	r3, r3, #8
 8005c0c:	0719      	lsls	r1, r3, #28
 8005c0e:	bf04      	itt	eq
 8005c10:	091b      	lsreq	r3, r3, #4
 8005c12:	3004      	addeq	r0, #4
 8005c14:	0799      	lsls	r1, r3, #30
 8005c16:	bf04      	itt	eq
 8005c18:	089b      	lsreq	r3, r3, #2
 8005c1a:	3002      	addeq	r0, #2
 8005c1c:	07d9      	lsls	r1, r3, #31
 8005c1e:	d403      	bmi.n	8005c28 <__lo0bits+0x4e>
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	f100 0001 	add.w	r0, r0, #1
 8005c26:	d003      	beq.n	8005c30 <__lo0bits+0x56>
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4770      	bx	lr
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	4770      	bx	lr
 8005c30:	2020      	movs	r0, #32
 8005c32:	4770      	bx	lr

08005c34 <__i2b>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	460c      	mov	r4, r1
 8005c38:	2101      	movs	r1, #1
 8005c3a:	f7ff ff07 	bl	8005a4c <_Balloc>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	b928      	cbnz	r0, 8005c4e <__i2b+0x1a>
 8005c42:	f240 1145 	movw	r1, #325	@ 0x145
 8005c46:	4b04      	ldr	r3, [pc, #16]	@ (8005c58 <__i2b+0x24>)
 8005c48:	4804      	ldr	r0, [pc, #16]	@ (8005c5c <__i2b+0x28>)
 8005c4a:	f000 fcb7 	bl	80065bc <__assert_func>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	6144      	str	r4, [r0, #20]
 8005c52:	6103      	str	r3, [r0, #16]
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	bf00      	nop
 8005c58:	08006d3e 	.word	0x08006d3e
 8005c5c:	08006d4f 	.word	0x08006d4f

08005c60 <__multiply>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	4614      	mov	r4, r2
 8005c66:	690a      	ldr	r2, [r1, #16]
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	bfa2      	ittt	ge
 8005c70:	4623      	movge	r3, r4
 8005c72:	460c      	movge	r4, r1
 8005c74:	461f      	movge	r7, r3
 8005c76:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005c7a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	6861      	ldr	r1, [r4, #4]
 8005c82:	eb0a 0609 	add.w	r6, sl, r9
 8005c86:	42b3      	cmp	r3, r6
 8005c88:	b085      	sub	sp, #20
 8005c8a:	bfb8      	it	lt
 8005c8c:	3101      	addlt	r1, #1
 8005c8e:	f7ff fedd 	bl	8005a4c <_Balloc>
 8005c92:	b930      	cbnz	r0, 8005ca2 <__multiply+0x42>
 8005c94:	4602      	mov	r2, r0
 8005c96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005c9a:	4b43      	ldr	r3, [pc, #268]	@ (8005da8 <__multiply+0x148>)
 8005c9c:	4843      	ldr	r0, [pc, #268]	@ (8005dac <__multiply+0x14c>)
 8005c9e:	f000 fc8d 	bl	80065bc <__assert_func>
 8005ca2:	f100 0514 	add.w	r5, r0, #20
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	2200      	movs	r2, #0
 8005caa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cae:	4543      	cmp	r3, r8
 8005cb0:	d321      	bcc.n	8005cf6 <__multiply+0x96>
 8005cb2:	f107 0114 	add.w	r1, r7, #20
 8005cb6:	f104 0214 	add.w	r2, r4, #20
 8005cba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005cbe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005cc2:	9302      	str	r3, [sp, #8]
 8005cc4:	1b13      	subs	r3, r2, r4
 8005cc6:	3b15      	subs	r3, #21
 8005cc8:	f023 0303 	bic.w	r3, r3, #3
 8005ccc:	3304      	adds	r3, #4
 8005cce:	f104 0715 	add.w	r7, r4, #21
 8005cd2:	42ba      	cmp	r2, r7
 8005cd4:	bf38      	it	cc
 8005cd6:	2304      	movcc	r3, #4
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	9b02      	ldr	r3, [sp, #8]
 8005cdc:	9103      	str	r1, [sp, #12]
 8005cde:	428b      	cmp	r3, r1
 8005ce0:	d80c      	bhi.n	8005cfc <__multiply+0x9c>
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	dd03      	ble.n	8005cee <__multiply+0x8e>
 8005ce6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d05a      	beq.n	8005da4 <__multiply+0x144>
 8005cee:	6106      	str	r6, [r0, #16]
 8005cf0:	b005      	add	sp, #20
 8005cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf6:	f843 2b04 	str.w	r2, [r3], #4
 8005cfa:	e7d8      	b.n	8005cae <__multiply+0x4e>
 8005cfc:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d00:	f1ba 0f00 	cmp.w	sl, #0
 8005d04:	d023      	beq.n	8005d4e <__multiply+0xee>
 8005d06:	46a9      	mov	r9, r5
 8005d08:	f04f 0c00 	mov.w	ip, #0
 8005d0c:	f104 0e14 	add.w	lr, r4, #20
 8005d10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d14:	f8d9 3000 	ldr.w	r3, [r9]
 8005d18:	fa1f fb87 	uxth.w	fp, r7
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d22:	4463      	add	r3, ip
 8005d24:	f8d9 c000 	ldr.w	ip, [r9]
 8005d28:	0c3f      	lsrs	r7, r7, #16
 8005d2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d2e:	fb0a c707 	mla	r7, sl, r7, ip
 8005d32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d3c:	4572      	cmp	r2, lr
 8005d3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d42:	f849 3b04 	str.w	r3, [r9], #4
 8005d46:	d8e3      	bhi.n	8005d10 <__multiply+0xb0>
 8005d48:	9b01      	ldr	r3, [sp, #4]
 8005d4a:	f845 c003 	str.w	ip, [r5, r3]
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	3104      	adds	r1, #4
 8005d52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d56:	f1b9 0f00 	cmp.w	r9, #0
 8005d5a:	d021      	beq.n	8005da0 <__multiply+0x140>
 8005d5c:	46ae      	mov	lr, r5
 8005d5e:	f04f 0a00 	mov.w	sl, #0
 8005d62:	682b      	ldr	r3, [r5, #0]
 8005d64:	f104 0c14 	add.w	ip, r4, #20
 8005d68:	f8bc b000 	ldrh.w	fp, [ip]
 8005d6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	fb09 770b 	mla	r7, r9, fp, r7
 8005d76:	4457      	add	r7, sl
 8005d78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d7c:	f84e 3b04 	str.w	r3, [lr], #4
 8005d80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d88:	f8be 3000 	ldrh.w	r3, [lr]
 8005d8c:	4562      	cmp	r2, ip
 8005d8e:	fb09 330a 	mla	r3, r9, sl, r3
 8005d92:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005d96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d9a:	d8e5      	bhi.n	8005d68 <__multiply+0x108>
 8005d9c:	9f01      	ldr	r7, [sp, #4]
 8005d9e:	51eb      	str	r3, [r5, r7]
 8005da0:	3504      	adds	r5, #4
 8005da2:	e79a      	b.n	8005cda <__multiply+0x7a>
 8005da4:	3e01      	subs	r6, #1
 8005da6:	e79c      	b.n	8005ce2 <__multiply+0x82>
 8005da8:	08006d3e 	.word	0x08006d3e
 8005dac:	08006d4f 	.word	0x08006d4f

08005db0 <__pow5mult>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	4615      	mov	r5, r2
 8005db6:	f012 0203 	ands.w	r2, r2, #3
 8005dba:	4607      	mov	r7, r0
 8005dbc:	460e      	mov	r6, r1
 8005dbe:	d007      	beq.n	8005dd0 <__pow5mult+0x20>
 8005dc0:	4c25      	ldr	r4, [pc, #148]	@ (8005e58 <__pow5mult+0xa8>)
 8005dc2:	3a01      	subs	r2, #1
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dca:	f7ff fea1 	bl	8005b10 <__multadd>
 8005dce:	4606      	mov	r6, r0
 8005dd0:	10ad      	asrs	r5, r5, #2
 8005dd2:	d03d      	beq.n	8005e50 <__pow5mult+0xa0>
 8005dd4:	69fc      	ldr	r4, [r7, #28]
 8005dd6:	b97c      	cbnz	r4, 8005df8 <__pow5mult+0x48>
 8005dd8:	2010      	movs	r0, #16
 8005dda:	f7ff fd81 	bl	80058e0 <malloc>
 8005dde:	4602      	mov	r2, r0
 8005de0:	61f8      	str	r0, [r7, #28]
 8005de2:	b928      	cbnz	r0, 8005df0 <__pow5mult+0x40>
 8005de4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005de8:	4b1c      	ldr	r3, [pc, #112]	@ (8005e5c <__pow5mult+0xac>)
 8005dea:	481d      	ldr	r0, [pc, #116]	@ (8005e60 <__pow5mult+0xb0>)
 8005dec:	f000 fbe6 	bl	80065bc <__assert_func>
 8005df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005df4:	6004      	str	r4, [r0, #0]
 8005df6:	60c4      	str	r4, [r0, #12]
 8005df8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e00:	b94c      	cbnz	r4, 8005e16 <__pow5mult+0x66>
 8005e02:	f240 2171 	movw	r1, #625	@ 0x271
 8005e06:	4638      	mov	r0, r7
 8005e08:	f7ff ff14 	bl	8005c34 <__i2b>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e14:	6003      	str	r3, [r0, #0]
 8005e16:	f04f 0900 	mov.w	r9, #0
 8005e1a:	07eb      	lsls	r3, r5, #31
 8005e1c:	d50a      	bpl.n	8005e34 <__pow5mult+0x84>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4622      	mov	r2, r4
 8005e22:	4638      	mov	r0, r7
 8005e24:	f7ff ff1c 	bl	8005c60 <__multiply>
 8005e28:	4680      	mov	r8, r0
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff fe4d 	bl	8005acc <_Bfree>
 8005e32:	4646      	mov	r6, r8
 8005e34:	106d      	asrs	r5, r5, #1
 8005e36:	d00b      	beq.n	8005e50 <__pow5mult+0xa0>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	b938      	cbnz	r0, 8005e4c <__pow5mult+0x9c>
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4638      	mov	r0, r7
 8005e42:	f7ff ff0d 	bl	8005c60 <__multiply>
 8005e46:	6020      	str	r0, [r4, #0]
 8005e48:	f8c0 9000 	str.w	r9, [r0]
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	e7e4      	b.n	8005e1a <__pow5mult+0x6a>
 8005e50:	4630      	mov	r0, r6
 8005e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e56:	bf00      	nop
 8005e58:	08006da8 	.word	0x08006da8
 8005e5c:	08006ccf 	.word	0x08006ccf
 8005e60:	08006d4f 	.word	0x08006d4f

08005e64 <__lshift>:
 8005e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e68:	460c      	mov	r4, r1
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	4691      	mov	r9, r2
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	6849      	ldr	r1, [r1, #4]
 8005e72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e7c:	f108 0601 	add.w	r6, r8, #1
 8005e80:	42b3      	cmp	r3, r6
 8005e82:	db0b      	blt.n	8005e9c <__lshift+0x38>
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7ff fde1 	bl	8005a4c <_Balloc>
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	b948      	cbnz	r0, 8005ea2 <__lshift+0x3e>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005e94:	4b27      	ldr	r3, [pc, #156]	@ (8005f34 <__lshift+0xd0>)
 8005e96:	4828      	ldr	r0, [pc, #160]	@ (8005f38 <__lshift+0xd4>)
 8005e98:	f000 fb90 	bl	80065bc <__assert_func>
 8005e9c:	3101      	adds	r1, #1
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	e7ee      	b.n	8005e80 <__lshift+0x1c>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f100 0114 	add.w	r1, r0, #20
 8005ea8:	f100 0210 	add.w	r2, r0, #16
 8005eac:	4618      	mov	r0, r3
 8005eae:	4553      	cmp	r3, sl
 8005eb0:	db33      	blt.n	8005f1a <__lshift+0xb6>
 8005eb2:	6920      	ldr	r0, [r4, #16]
 8005eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005eb8:	f104 0314 	add.w	r3, r4, #20
 8005ebc:	f019 091f 	ands.w	r9, r9, #31
 8005ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ec8:	d02b      	beq.n	8005f22 <__lshift+0xbe>
 8005eca:	468a      	mov	sl, r1
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f1c9 0e20 	rsb	lr, r9, #32
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	fa00 f009 	lsl.w	r0, r0, r9
 8005ed8:	4310      	orrs	r0, r2
 8005eda:	f84a 0b04 	str.w	r0, [sl], #4
 8005ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee2:	459c      	cmp	ip, r3
 8005ee4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ee8:	d8f3      	bhi.n	8005ed2 <__lshift+0x6e>
 8005eea:	ebac 0304 	sub.w	r3, ip, r4
 8005eee:	3b15      	subs	r3, #21
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	f104 0015 	add.w	r0, r4, #21
 8005efa:	4584      	cmp	ip, r0
 8005efc:	bf38      	it	cc
 8005efe:	2304      	movcc	r3, #4
 8005f00:	50ca      	str	r2, [r1, r3]
 8005f02:	b10a      	cbz	r2, 8005f08 <__lshift+0xa4>
 8005f04:	f108 0602 	add.w	r6, r8, #2
 8005f08:	3e01      	subs	r6, #1
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	612e      	str	r6, [r5, #16]
 8005f10:	f7ff fddc 	bl	8005acc <_Bfree>
 8005f14:	4628      	mov	r0, r5
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f1e:	3301      	adds	r3, #1
 8005f20:	e7c5      	b.n	8005eae <__lshift+0x4a>
 8005f22:	3904      	subs	r1, #4
 8005f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f28:	459c      	cmp	ip, r3
 8005f2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f2e:	d8f9      	bhi.n	8005f24 <__lshift+0xc0>
 8005f30:	e7ea      	b.n	8005f08 <__lshift+0xa4>
 8005f32:	bf00      	nop
 8005f34:	08006d3e 	.word	0x08006d3e
 8005f38:	08006d4f 	.word	0x08006d4f

08005f3c <__mcmp>:
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	690a      	ldr	r2, [r1, #16]
 8005f40:	6900      	ldr	r0, [r0, #16]
 8005f42:	b530      	push	{r4, r5, lr}
 8005f44:	1a80      	subs	r0, r0, r2
 8005f46:	d10e      	bne.n	8005f66 <__mcmp+0x2a>
 8005f48:	3314      	adds	r3, #20
 8005f4a:	3114      	adds	r1, #20
 8005f4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f5c:	4295      	cmp	r5, r2
 8005f5e:	d003      	beq.n	8005f68 <__mcmp+0x2c>
 8005f60:	d205      	bcs.n	8005f6e <__mcmp+0x32>
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295
 8005f66:	bd30      	pop	{r4, r5, pc}
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	d3f3      	bcc.n	8005f54 <__mcmp+0x18>
 8005f6c:	e7fb      	b.n	8005f66 <__mcmp+0x2a>
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e7f9      	b.n	8005f66 <__mcmp+0x2a>
	...

08005f74 <__mdiff>:
 8005f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	4689      	mov	r9, r1
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4648      	mov	r0, r9
 8005f80:	4614      	mov	r4, r2
 8005f82:	f7ff ffdb 	bl	8005f3c <__mcmp>
 8005f86:	1e05      	subs	r5, r0, #0
 8005f88:	d112      	bne.n	8005fb0 <__mdiff+0x3c>
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f7ff fd5d 	bl	8005a4c <_Balloc>
 8005f92:	4602      	mov	r2, r0
 8005f94:	b928      	cbnz	r0, 8005fa2 <__mdiff+0x2e>
 8005f96:	f240 2137 	movw	r1, #567	@ 0x237
 8005f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8006094 <__mdiff+0x120>)
 8005f9c:	483e      	ldr	r0, [pc, #248]	@ (8006098 <__mdiff+0x124>)
 8005f9e:	f000 fb0d 	bl	80065bc <__assert_func>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	b003      	add	sp, #12
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	bfbc      	itt	lt
 8005fb2:	464b      	movlt	r3, r9
 8005fb4:	46a1      	movlt	r9, r4
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005fbc:	bfba      	itte	lt
 8005fbe:	461c      	movlt	r4, r3
 8005fc0:	2501      	movlt	r5, #1
 8005fc2:	2500      	movge	r5, #0
 8005fc4:	f7ff fd42 	bl	8005a4c <_Balloc>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	b918      	cbnz	r0, 8005fd4 <__mdiff+0x60>
 8005fcc:	f240 2145 	movw	r1, #581	@ 0x245
 8005fd0:	4b30      	ldr	r3, [pc, #192]	@ (8006094 <__mdiff+0x120>)
 8005fd2:	e7e3      	b.n	8005f9c <__mdiff+0x28>
 8005fd4:	f100 0b14 	add.w	fp, r0, #20
 8005fd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005fdc:	f109 0310 	add.w	r3, r9, #16
 8005fe0:	60c5      	str	r5, [r0, #12]
 8005fe2:	f04f 0c00 	mov.w	ip, #0
 8005fe6:	f109 0514 	add.w	r5, r9, #20
 8005fea:	46d9      	mov	r9, fp
 8005fec:	6926      	ldr	r6, [r4, #16]
 8005fee:	f104 0e14 	add.w	lr, r4, #20
 8005ff2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005ff6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	9b01      	ldr	r3, [sp, #4]
 8005ffe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006002:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006006:	b281      	uxth	r1, r0
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	fa1f f38a 	uxth.w	r3, sl
 800600e:	1a5b      	subs	r3, r3, r1
 8006010:	0c00      	lsrs	r0, r0, #16
 8006012:	4463      	add	r3, ip
 8006014:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006018:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800601c:	b29b      	uxth	r3, r3
 800601e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006022:	4576      	cmp	r6, lr
 8006024:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006028:	f849 3b04 	str.w	r3, [r9], #4
 800602c:	d8e6      	bhi.n	8005ffc <__mdiff+0x88>
 800602e:	1b33      	subs	r3, r6, r4
 8006030:	3b15      	subs	r3, #21
 8006032:	f023 0303 	bic.w	r3, r3, #3
 8006036:	3415      	adds	r4, #21
 8006038:	3304      	adds	r3, #4
 800603a:	42a6      	cmp	r6, r4
 800603c:	bf38      	it	cc
 800603e:	2304      	movcc	r3, #4
 8006040:	441d      	add	r5, r3
 8006042:	445b      	add	r3, fp
 8006044:	461e      	mov	r6, r3
 8006046:	462c      	mov	r4, r5
 8006048:	4544      	cmp	r4, r8
 800604a:	d30e      	bcc.n	800606a <__mdiff+0xf6>
 800604c:	f108 0103 	add.w	r1, r8, #3
 8006050:	1b49      	subs	r1, r1, r5
 8006052:	f021 0103 	bic.w	r1, r1, #3
 8006056:	3d03      	subs	r5, #3
 8006058:	45a8      	cmp	r8, r5
 800605a:	bf38      	it	cc
 800605c:	2100      	movcc	r1, #0
 800605e:	440b      	add	r3, r1
 8006060:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006064:	b199      	cbz	r1, 800608e <__mdiff+0x11a>
 8006066:	6117      	str	r7, [r2, #16]
 8006068:	e79e      	b.n	8005fa8 <__mdiff+0x34>
 800606a:	46e6      	mov	lr, ip
 800606c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006070:	fa1f fc81 	uxth.w	ip, r1
 8006074:	44f4      	add	ip, lr
 8006076:	0c08      	lsrs	r0, r1, #16
 8006078:	4471      	add	r1, lr
 800607a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800607e:	b289      	uxth	r1, r1
 8006080:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006084:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006088:	f846 1b04 	str.w	r1, [r6], #4
 800608c:	e7dc      	b.n	8006048 <__mdiff+0xd4>
 800608e:	3f01      	subs	r7, #1
 8006090:	e7e6      	b.n	8006060 <__mdiff+0xec>
 8006092:	bf00      	nop
 8006094:	08006d3e 	.word	0x08006d3e
 8006098:	08006d4f 	.word	0x08006d4f

0800609c <__d2b>:
 800609c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80060a0:	2101      	movs	r1, #1
 80060a2:	4690      	mov	r8, r2
 80060a4:	4699      	mov	r9, r3
 80060a6:	9e08      	ldr	r6, [sp, #32]
 80060a8:	f7ff fcd0 	bl	8005a4c <_Balloc>
 80060ac:	4604      	mov	r4, r0
 80060ae:	b930      	cbnz	r0, 80060be <__d2b+0x22>
 80060b0:	4602      	mov	r2, r0
 80060b2:	f240 310f 	movw	r1, #783	@ 0x30f
 80060b6:	4b23      	ldr	r3, [pc, #140]	@ (8006144 <__d2b+0xa8>)
 80060b8:	4823      	ldr	r0, [pc, #140]	@ (8006148 <__d2b+0xac>)
 80060ba:	f000 fa7f 	bl	80065bc <__assert_func>
 80060be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060c6:	b10d      	cbz	r5, 80060cc <__d2b+0x30>
 80060c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	f1b8 0300 	subs.w	r3, r8, #0
 80060d2:	d024      	beq.n	800611e <__d2b+0x82>
 80060d4:	4668      	mov	r0, sp
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	f7ff fd7f 	bl	8005bda <__lo0bits>
 80060dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80060e0:	b1d8      	cbz	r0, 800611a <__d2b+0x7e>
 80060e2:	f1c0 0320 	rsb	r3, r0, #32
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	430b      	orrs	r3, r1
 80060ec:	40c2      	lsrs	r2, r0
 80060ee:	6163      	str	r3, [r4, #20]
 80060f0:	9201      	str	r2, [sp, #4]
 80060f2:	9b01      	ldr	r3, [sp, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bf0c      	ite	eq
 80060f8:	2201      	moveq	r2, #1
 80060fa:	2202      	movne	r2, #2
 80060fc:	61a3      	str	r3, [r4, #24]
 80060fe:	6122      	str	r2, [r4, #16]
 8006100:	b1ad      	cbz	r5, 800612e <__d2b+0x92>
 8006102:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006106:	4405      	add	r5, r0
 8006108:	6035      	str	r5, [r6, #0]
 800610a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800610e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006110:	6018      	str	r0, [r3, #0]
 8006112:	4620      	mov	r0, r4
 8006114:	b002      	add	sp, #8
 8006116:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800611a:	6161      	str	r1, [r4, #20]
 800611c:	e7e9      	b.n	80060f2 <__d2b+0x56>
 800611e:	a801      	add	r0, sp, #4
 8006120:	f7ff fd5b 	bl	8005bda <__lo0bits>
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	6163      	str	r3, [r4, #20]
 800612a:	3020      	adds	r0, #32
 800612c:	e7e7      	b.n	80060fe <__d2b+0x62>
 800612e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006132:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006136:	6030      	str	r0, [r6, #0]
 8006138:	6918      	ldr	r0, [r3, #16]
 800613a:	f7ff fd2f 	bl	8005b9c <__hi0bits>
 800613e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006142:	e7e4      	b.n	800610e <__d2b+0x72>
 8006144:	08006d3e 	.word	0x08006d3e
 8006148:	08006d4f 	.word	0x08006d4f

0800614c <__ssputs_r>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	461f      	mov	r7, r3
 8006152:	688e      	ldr	r6, [r1, #8]
 8006154:	4682      	mov	sl, r0
 8006156:	42be      	cmp	r6, r7
 8006158:	460c      	mov	r4, r1
 800615a:	4690      	mov	r8, r2
 800615c:	680b      	ldr	r3, [r1, #0]
 800615e:	d82d      	bhi.n	80061bc <__ssputs_r+0x70>
 8006160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006168:	d026      	beq.n	80061b8 <__ssputs_r+0x6c>
 800616a:	6965      	ldr	r5, [r4, #20]
 800616c:	6909      	ldr	r1, [r1, #16]
 800616e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006172:	eba3 0901 	sub.w	r9, r3, r1
 8006176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800617a:	1c7b      	adds	r3, r7, #1
 800617c:	444b      	add	r3, r9
 800617e:	106d      	asrs	r5, r5, #1
 8006180:	429d      	cmp	r5, r3
 8006182:	bf38      	it	cc
 8006184:	461d      	movcc	r5, r3
 8006186:	0553      	lsls	r3, r2, #21
 8006188:	d527      	bpl.n	80061da <__ssputs_r+0x8e>
 800618a:	4629      	mov	r1, r5
 800618c:	f7ff fbd2 	bl	8005934 <_malloc_r>
 8006190:	4606      	mov	r6, r0
 8006192:	b360      	cbz	r0, 80061ee <__ssputs_r+0xa2>
 8006194:	464a      	mov	r2, r9
 8006196:	6921      	ldr	r1, [r4, #16]
 8006198:	f000 fa02 	bl	80065a0 <memcpy>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a6:	81a3      	strh	r3, [r4, #12]
 80061a8:	6126      	str	r6, [r4, #16]
 80061aa:	444e      	add	r6, r9
 80061ac:	6026      	str	r6, [r4, #0]
 80061ae:	463e      	mov	r6, r7
 80061b0:	6165      	str	r5, [r4, #20]
 80061b2:	eba5 0509 	sub.w	r5, r5, r9
 80061b6:	60a5      	str	r5, [r4, #8]
 80061b8:	42be      	cmp	r6, r7
 80061ba:	d900      	bls.n	80061be <__ssputs_r+0x72>
 80061bc:	463e      	mov	r6, r7
 80061be:	4632      	mov	r2, r6
 80061c0:	4641      	mov	r1, r8
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	f000 f9c2 	bl	800654c <memmove>
 80061c8:	2000      	movs	r0, #0
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	1b9b      	subs	r3, r3, r6
 80061ce:	60a3      	str	r3, [r4, #8]
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	4433      	add	r3, r6
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	462a      	mov	r2, r5
 80061dc:	f000 fa32 	bl	8006644 <_realloc_r>
 80061e0:	4606      	mov	r6, r0
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d1e0      	bne.n	80061a8 <__ssputs_r+0x5c>
 80061e6:	4650      	mov	r0, sl
 80061e8:	6921      	ldr	r1, [r4, #16]
 80061ea:	f7ff fb31 	bl	8005850 <_free_r>
 80061ee:	230c      	movs	r3, #12
 80061f0:	f8ca 3000 	str.w	r3, [sl]
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	f04f 30ff 	mov.w	r0, #4294967295
 80061fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	e7e9      	b.n	80061d6 <__ssputs_r+0x8a>
	...

08006204 <_svfiprintf_r>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	4698      	mov	r8, r3
 800620a:	898b      	ldrh	r3, [r1, #12]
 800620c:	4607      	mov	r7, r0
 800620e:	061b      	lsls	r3, r3, #24
 8006210:	460d      	mov	r5, r1
 8006212:	4614      	mov	r4, r2
 8006214:	b09d      	sub	sp, #116	@ 0x74
 8006216:	d510      	bpl.n	800623a <_svfiprintf_r+0x36>
 8006218:	690b      	ldr	r3, [r1, #16]
 800621a:	b973      	cbnz	r3, 800623a <_svfiprintf_r+0x36>
 800621c:	2140      	movs	r1, #64	@ 0x40
 800621e:	f7ff fb89 	bl	8005934 <_malloc_r>
 8006222:	6028      	str	r0, [r5, #0]
 8006224:	6128      	str	r0, [r5, #16]
 8006226:	b930      	cbnz	r0, 8006236 <_svfiprintf_r+0x32>
 8006228:	230c      	movs	r3, #12
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	b01d      	add	sp, #116	@ 0x74
 8006232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	2340      	movs	r3, #64	@ 0x40
 8006238:	616b      	str	r3, [r5, #20]
 800623a:	2300      	movs	r3, #0
 800623c:	9309      	str	r3, [sp, #36]	@ 0x24
 800623e:	2320      	movs	r3, #32
 8006240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006244:	2330      	movs	r3, #48	@ 0x30
 8006246:	f04f 0901 	mov.w	r9, #1
 800624a:	f8cd 800c 	str.w	r8, [sp, #12]
 800624e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80063e8 <_svfiprintf_r+0x1e4>
 8006252:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006256:	4623      	mov	r3, r4
 8006258:	469a      	mov	sl, r3
 800625a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800625e:	b10a      	cbz	r2, 8006264 <_svfiprintf_r+0x60>
 8006260:	2a25      	cmp	r2, #37	@ 0x25
 8006262:	d1f9      	bne.n	8006258 <_svfiprintf_r+0x54>
 8006264:	ebba 0b04 	subs.w	fp, sl, r4
 8006268:	d00b      	beq.n	8006282 <_svfiprintf_r+0x7e>
 800626a:	465b      	mov	r3, fp
 800626c:	4622      	mov	r2, r4
 800626e:	4629      	mov	r1, r5
 8006270:	4638      	mov	r0, r7
 8006272:	f7ff ff6b 	bl	800614c <__ssputs_r>
 8006276:	3001      	adds	r0, #1
 8006278:	f000 80a7 	beq.w	80063ca <_svfiprintf_r+0x1c6>
 800627c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800627e:	445a      	add	r2, fp
 8006280:	9209      	str	r2, [sp, #36]	@ 0x24
 8006282:	f89a 3000 	ldrb.w	r3, [sl]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 809f 	beq.w	80063ca <_svfiprintf_r+0x1c6>
 800628c:	2300      	movs	r3, #0
 800628e:	f04f 32ff 	mov.w	r2, #4294967295
 8006292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006296:	f10a 0a01 	add.w	sl, sl, #1
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	9307      	str	r3, [sp, #28]
 800629e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80062a4:	4654      	mov	r4, sl
 80062a6:	2205      	movs	r2, #5
 80062a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ac:	484e      	ldr	r0, [pc, #312]	@ (80063e8 <_svfiprintf_r+0x1e4>)
 80062ae:	f7fe fc70 	bl	8004b92 <memchr>
 80062b2:	9a04      	ldr	r2, [sp, #16]
 80062b4:	b9d8      	cbnz	r0, 80062ee <_svfiprintf_r+0xea>
 80062b6:	06d0      	lsls	r0, r2, #27
 80062b8:	bf44      	itt	mi
 80062ba:	2320      	movmi	r3, #32
 80062bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062c0:	0711      	lsls	r1, r2, #28
 80062c2:	bf44      	itt	mi
 80062c4:	232b      	movmi	r3, #43	@ 0x2b
 80062c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062ca:	f89a 3000 	ldrb.w	r3, [sl]
 80062ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80062d0:	d015      	beq.n	80062fe <_svfiprintf_r+0xfa>
 80062d2:	4654      	mov	r4, sl
 80062d4:	2000      	movs	r0, #0
 80062d6:	f04f 0c0a 	mov.w	ip, #10
 80062da:	9a07      	ldr	r2, [sp, #28]
 80062dc:	4621      	mov	r1, r4
 80062de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062e2:	3b30      	subs	r3, #48	@ 0x30
 80062e4:	2b09      	cmp	r3, #9
 80062e6:	d94b      	bls.n	8006380 <_svfiprintf_r+0x17c>
 80062e8:	b1b0      	cbz	r0, 8006318 <_svfiprintf_r+0x114>
 80062ea:	9207      	str	r2, [sp, #28]
 80062ec:	e014      	b.n	8006318 <_svfiprintf_r+0x114>
 80062ee:	eba0 0308 	sub.w	r3, r0, r8
 80062f2:	fa09 f303 	lsl.w	r3, r9, r3
 80062f6:	4313      	orrs	r3, r2
 80062f8:	46a2      	mov	sl, r4
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	e7d2      	b.n	80062a4 <_svfiprintf_r+0xa0>
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	1d19      	adds	r1, r3, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	9103      	str	r1, [sp, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	bfbb      	ittet	lt
 800630a:	425b      	neglt	r3, r3
 800630c:	f042 0202 	orrlt.w	r2, r2, #2
 8006310:	9307      	strge	r3, [sp, #28]
 8006312:	9307      	strlt	r3, [sp, #28]
 8006314:	bfb8      	it	lt
 8006316:	9204      	strlt	r2, [sp, #16]
 8006318:	7823      	ldrb	r3, [r4, #0]
 800631a:	2b2e      	cmp	r3, #46	@ 0x2e
 800631c:	d10a      	bne.n	8006334 <_svfiprintf_r+0x130>
 800631e:	7863      	ldrb	r3, [r4, #1]
 8006320:	2b2a      	cmp	r3, #42	@ 0x2a
 8006322:	d132      	bne.n	800638a <_svfiprintf_r+0x186>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	3402      	adds	r4, #2
 8006328:	1d1a      	adds	r2, r3, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	9203      	str	r2, [sp, #12]
 800632e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80063ec <_svfiprintf_r+0x1e8>
 8006338:	2203      	movs	r2, #3
 800633a:	4650      	mov	r0, sl
 800633c:	7821      	ldrb	r1, [r4, #0]
 800633e:	f7fe fc28 	bl	8004b92 <memchr>
 8006342:	b138      	cbz	r0, 8006354 <_svfiprintf_r+0x150>
 8006344:	2240      	movs	r2, #64	@ 0x40
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	eba0 000a 	sub.w	r0, r0, sl
 800634c:	4082      	lsls	r2, r0
 800634e:	4313      	orrs	r3, r2
 8006350:	3401      	adds	r4, #1
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006358:	2206      	movs	r2, #6
 800635a:	4825      	ldr	r0, [pc, #148]	@ (80063f0 <_svfiprintf_r+0x1ec>)
 800635c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006360:	f7fe fc17 	bl	8004b92 <memchr>
 8006364:	2800      	cmp	r0, #0
 8006366:	d036      	beq.n	80063d6 <_svfiprintf_r+0x1d2>
 8006368:	4b22      	ldr	r3, [pc, #136]	@ (80063f4 <_svfiprintf_r+0x1f0>)
 800636a:	bb1b      	cbnz	r3, 80063b4 <_svfiprintf_r+0x1b0>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	3307      	adds	r3, #7
 8006370:	f023 0307 	bic.w	r3, r3, #7
 8006374:	3308      	adds	r3, #8
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637a:	4433      	add	r3, r6
 800637c:	9309      	str	r3, [sp, #36]	@ 0x24
 800637e:	e76a      	b.n	8006256 <_svfiprintf_r+0x52>
 8006380:	460c      	mov	r4, r1
 8006382:	2001      	movs	r0, #1
 8006384:	fb0c 3202 	mla	r2, ip, r2, r3
 8006388:	e7a8      	b.n	80062dc <_svfiprintf_r+0xd8>
 800638a:	2300      	movs	r3, #0
 800638c:	f04f 0c0a 	mov.w	ip, #10
 8006390:	4619      	mov	r1, r3
 8006392:	3401      	adds	r4, #1
 8006394:	9305      	str	r3, [sp, #20]
 8006396:	4620      	mov	r0, r4
 8006398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800639c:	3a30      	subs	r2, #48	@ 0x30
 800639e:	2a09      	cmp	r2, #9
 80063a0:	d903      	bls.n	80063aa <_svfiprintf_r+0x1a6>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0c6      	beq.n	8006334 <_svfiprintf_r+0x130>
 80063a6:	9105      	str	r1, [sp, #20]
 80063a8:	e7c4      	b.n	8006334 <_svfiprintf_r+0x130>
 80063aa:	4604      	mov	r4, r0
 80063ac:	2301      	movs	r3, #1
 80063ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80063b2:	e7f0      	b.n	8006396 <_svfiprintf_r+0x192>
 80063b4:	ab03      	add	r3, sp, #12
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	462a      	mov	r2, r5
 80063ba:	4638      	mov	r0, r7
 80063bc:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <_svfiprintf_r+0x1f4>)
 80063be:	a904      	add	r1, sp, #16
 80063c0:	f7fd fe84 	bl	80040cc <_printf_float>
 80063c4:	1c42      	adds	r2, r0, #1
 80063c6:	4606      	mov	r6, r0
 80063c8:	d1d6      	bne.n	8006378 <_svfiprintf_r+0x174>
 80063ca:	89ab      	ldrh	r3, [r5, #12]
 80063cc:	065b      	lsls	r3, r3, #25
 80063ce:	f53f af2d 	bmi.w	800622c <_svfiprintf_r+0x28>
 80063d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063d4:	e72c      	b.n	8006230 <_svfiprintf_r+0x2c>
 80063d6:	ab03      	add	r3, sp, #12
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	462a      	mov	r2, r5
 80063dc:	4638      	mov	r0, r7
 80063de:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <_svfiprintf_r+0x1f4>)
 80063e0:	a904      	add	r1, sp, #16
 80063e2:	f7fe f911 	bl	8004608 <_printf_i>
 80063e6:	e7ed      	b.n	80063c4 <_svfiprintf_r+0x1c0>
 80063e8:	08006ea8 	.word	0x08006ea8
 80063ec:	08006eae 	.word	0x08006eae
 80063f0:	08006eb2 	.word	0x08006eb2
 80063f4:	080040cd 	.word	0x080040cd
 80063f8:	0800614d 	.word	0x0800614d

080063fc <__sflush_r>:
 80063fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	0716      	lsls	r6, r2, #28
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	d454      	bmi.n	80064b4 <__sflush_r+0xb8>
 800640a:	684b      	ldr	r3, [r1, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dc02      	bgt.n	8006416 <__sflush_r+0x1a>
 8006410:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	dd48      	ble.n	80064a8 <__sflush_r+0xac>
 8006416:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006418:	2e00      	cmp	r6, #0
 800641a:	d045      	beq.n	80064a8 <__sflush_r+0xac>
 800641c:	2300      	movs	r3, #0
 800641e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006422:	682f      	ldr	r7, [r5, #0]
 8006424:	6a21      	ldr	r1, [r4, #32]
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	d030      	beq.n	800648c <__sflush_r+0x90>
 800642a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	0759      	lsls	r1, r3, #29
 8006430:	d505      	bpl.n	800643e <__sflush_r+0x42>
 8006432:	6863      	ldr	r3, [r4, #4]
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006438:	b10b      	cbz	r3, 800643e <__sflush_r+0x42>
 800643a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	2300      	movs	r3, #0
 8006440:	4628      	mov	r0, r5
 8006442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006444:	6a21      	ldr	r1, [r4, #32]
 8006446:	47b0      	blx	r6
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	d106      	bne.n	800645c <__sflush_r+0x60>
 800644e:	6829      	ldr	r1, [r5, #0]
 8006450:	291d      	cmp	r1, #29
 8006452:	d82b      	bhi.n	80064ac <__sflush_r+0xb0>
 8006454:	4a28      	ldr	r2, [pc, #160]	@ (80064f8 <__sflush_r+0xfc>)
 8006456:	410a      	asrs	r2, r1
 8006458:	07d6      	lsls	r6, r2, #31
 800645a:	d427      	bmi.n	80064ac <__sflush_r+0xb0>
 800645c:	2200      	movs	r2, #0
 800645e:	6062      	str	r2, [r4, #4]
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	04d9      	lsls	r1, r3, #19
 8006464:	6022      	str	r2, [r4, #0]
 8006466:	d504      	bpl.n	8006472 <__sflush_r+0x76>
 8006468:	1c42      	adds	r2, r0, #1
 800646a:	d101      	bne.n	8006470 <__sflush_r+0x74>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b903      	cbnz	r3, 8006472 <__sflush_r+0x76>
 8006470:	6560      	str	r0, [r4, #84]	@ 0x54
 8006472:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006474:	602f      	str	r7, [r5, #0]
 8006476:	b1b9      	cbz	r1, 80064a8 <__sflush_r+0xac>
 8006478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800647c:	4299      	cmp	r1, r3
 800647e:	d002      	beq.n	8006486 <__sflush_r+0x8a>
 8006480:	4628      	mov	r0, r5
 8006482:	f7ff f9e5 	bl	8005850 <_free_r>
 8006486:	2300      	movs	r3, #0
 8006488:	6363      	str	r3, [r4, #52]	@ 0x34
 800648a:	e00d      	b.n	80064a8 <__sflush_r+0xac>
 800648c:	2301      	movs	r3, #1
 800648e:	4628      	mov	r0, r5
 8006490:	47b0      	blx	r6
 8006492:	4602      	mov	r2, r0
 8006494:	1c50      	adds	r0, r2, #1
 8006496:	d1c9      	bne.n	800642c <__sflush_r+0x30>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0c6      	beq.n	800642c <__sflush_r+0x30>
 800649e:	2b1d      	cmp	r3, #29
 80064a0:	d001      	beq.n	80064a6 <__sflush_r+0xaa>
 80064a2:	2b16      	cmp	r3, #22
 80064a4:	d11d      	bne.n	80064e2 <__sflush_r+0xe6>
 80064a6:	602f      	str	r7, [r5, #0]
 80064a8:	2000      	movs	r0, #0
 80064aa:	e021      	b.n	80064f0 <__sflush_r+0xf4>
 80064ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b0:	b21b      	sxth	r3, r3
 80064b2:	e01a      	b.n	80064ea <__sflush_r+0xee>
 80064b4:	690f      	ldr	r7, [r1, #16]
 80064b6:	2f00      	cmp	r7, #0
 80064b8:	d0f6      	beq.n	80064a8 <__sflush_r+0xac>
 80064ba:	0793      	lsls	r3, r2, #30
 80064bc:	bf18      	it	ne
 80064be:	2300      	movne	r3, #0
 80064c0:	680e      	ldr	r6, [r1, #0]
 80064c2:	bf08      	it	eq
 80064c4:	694b      	ldreq	r3, [r1, #20]
 80064c6:	1bf6      	subs	r6, r6, r7
 80064c8:	600f      	str	r7, [r1, #0]
 80064ca:	608b      	str	r3, [r1, #8]
 80064cc:	2e00      	cmp	r6, #0
 80064ce:	ddeb      	ble.n	80064a8 <__sflush_r+0xac>
 80064d0:	4633      	mov	r3, r6
 80064d2:	463a      	mov	r2, r7
 80064d4:	4628      	mov	r0, r5
 80064d6:	6a21      	ldr	r1, [r4, #32]
 80064d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80064dc:	47e0      	blx	ip
 80064de:	2800      	cmp	r0, #0
 80064e0:	dc07      	bgt.n	80064f2 <__sflush_r+0xf6>
 80064e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f2:	4407      	add	r7, r0
 80064f4:	1a36      	subs	r6, r6, r0
 80064f6:	e7e9      	b.n	80064cc <__sflush_r+0xd0>
 80064f8:	dfbffffe 	.word	0xdfbffffe

080064fc <_fflush_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	690b      	ldr	r3, [r1, #16]
 8006500:	4605      	mov	r5, r0
 8006502:	460c      	mov	r4, r1
 8006504:	b913      	cbnz	r3, 800650c <_fflush_r+0x10>
 8006506:	2500      	movs	r5, #0
 8006508:	4628      	mov	r0, r5
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	b118      	cbz	r0, 8006516 <_fflush_r+0x1a>
 800650e:	6a03      	ldr	r3, [r0, #32]
 8006510:	b90b      	cbnz	r3, 8006516 <_fflush_r+0x1a>
 8006512:	f7fe fa25 	bl	8004960 <__sinit>
 8006516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f3      	beq.n	8006506 <_fflush_r+0xa>
 800651e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006520:	07d0      	lsls	r0, r2, #31
 8006522:	d404      	bmi.n	800652e <_fflush_r+0x32>
 8006524:	0599      	lsls	r1, r3, #22
 8006526:	d402      	bmi.n	800652e <_fflush_r+0x32>
 8006528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800652a:	f7fe fb30 	bl	8004b8e <__retarget_lock_acquire_recursive>
 800652e:	4628      	mov	r0, r5
 8006530:	4621      	mov	r1, r4
 8006532:	f7ff ff63 	bl	80063fc <__sflush_r>
 8006536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006538:	4605      	mov	r5, r0
 800653a:	07da      	lsls	r2, r3, #31
 800653c:	d4e4      	bmi.n	8006508 <_fflush_r+0xc>
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	059b      	lsls	r3, r3, #22
 8006542:	d4e1      	bmi.n	8006508 <_fflush_r+0xc>
 8006544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006546:	f7fe fb23 	bl	8004b90 <__retarget_lock_release_recursive>
 800654a:	e7dd      	b.n	8006508 <_fflush_r+0xc>

0800654c <memmove>:
 800654c:	4288      	cmp	r0, r1
 800654e:	b510      	push	{r4, lr}
 8006550:	eb01 0402 	add.w	r4, r1, r2
 8006554:	d902      	bls.n	800655c <memmove+0x10>
 8006556:	4284      	cmp	r4, r0
 8006558:	4623      	mov	r3, r4
 800655a:	d807      	bhi.n	800656c <memmove+0x20>
 800655c:	1e43      	subs	r3, r0, #1
 800655e:	42a1      	cmp	r1, r4
 8006560:	d008      	beq.n	8006574 <memmove+0x28>
 8006562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800656a:	e7f8      	b.n	800655e <memmove+0x12>
 800656c:	4601      	mov	r1, r0
 800656e:	4402      	add	r2, r0
 8006570:	428a      	cmp	r2, r1
 8006572:	d100      	bne.n	8006576 <memmove+0x2a>
 8006574:	bd10      	pop	{r4, pc}
 8006576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800657a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800657e:	e7f7      	b.n	8006570 <memmove+0x24>

08006580 <_sbrk_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	2300      	movs	r3, #0
 8006584:	4d05      	ldr	r5, [pc, #20]	@ (800659c <_sbrk_r+0x1c>)
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	f7fb fa5e 	bl	8001a4c <_sbrk>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_sbrk_r+0x1a>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_sbrk_r+0x1a>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	200004ac 	.word	0x200004ac

080065a0 <memcpy>:
 80065a0:	440a      	add	r2, r1
 80065a2:	4291      	cmp	r1, r2
 80065a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a8:	d100      	bne.n	80065ac <memcpy+0xc>
 80065aa:	4770      	bx	lr
 80065ac:	b510      	push	{r4, lr}
 80065ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b2:	4291      	cmp	r1, r2
 80065b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065b8:	d1f9      	bne.n	80065ae <memcpy+0xe>
 80065ba:	bd10      	pop	{r4, pc}

080065bc <__assert_func>:
 80065bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065be:	4614      	mov	r4, r2
 80065c0:	461a      	mov	r2, r3
 80065c2:	4b09      	ldr	r3, [pc, #36]	@ (80065e8 <__assert_func+0x2c>)
 80065c4:	4605      	mov	r5, r0
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68d8      	ldr	r0, [r3, #12]
 80065ca:	b954      	cbnz	r4, 80065e2 <__assert_func+0x26>
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <__assert_func+0x30>)
 80065ce:	461c      	mov	r4, r3
 80065d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065d4:	9100      	str	r1, [sp, #0]
 80065d6:	462b      	mov	r3, r5
 80065d8:	4905      	ldr	r1, [pc, #20]	@ (80065f0 <__assert_func+0x34>)
 80065da:	f000 f86f 	bl	80066bc <fiprintf>
 80065de:	f000 f87f 	bl	80066e0 <abort>
 80065e2:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <__assert_func+0x38>)
 80065e4:	e7f4      	b.n	80065d0 <__assert_func+0x14>
 80065e6:	bf00      	nop
 80065e8:	2000001c 	.word	0x2000001c
 80065ec:	08006efe 	.word	0x08006efe
 80065f0:	08006ed0 	.word	0x08006ed0
 80065f4:	08006ec3 	.word	0x08006ec3

080065f8 <_calloc_r>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	fba1 5402 	umull	r5, r4, r1, r2
 80065fe:	b93c      	cbnz	r4, 8006610 <_calloc_r+0x18>
 8006600:	4629      	mov	r1, r5
 8006602:	f7ff f997 	bl	8005934 <_malloc_r>
 8006606:	4606      	mov	r6, r0
 8006608:	b928      	cbnz	r0, 8006616 <_calloc_r+0x1e>
 800660a:	2600      	movs	r6, #0
 800660c:	4630      	mov	r0, r6
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	220c      	movs	r2, #12
 8006612:	6002      	str	r2, [r0, #0]
 8006614:	e7f9      	b.n	800660a <_calloc_r+0x12>
 8006616:	462a      	mov	r2, r5
 8006618:	4621      	mov	r1, r4
 800661a:	f7fe fa3a 	bl	8004a92 <memset>
 800661e:	e7f5      	b.n	800660c <_calloc_r+0x14>

08006620 <__ascii_mbtowc>:
 8006620:	b082      	sub	sp, #8
 8006622:	b901      	cbnz	r1, 8006626 <__ascii_mbtowc+0x6>
 8006624:	a901      	add	r1, sp, #4
 8006626:	b142      	cbz	r2, 800663a <__ascii_mbtowc+0x1a>
 8006628:	b14b      	cbz	r3, 800663e <__ascii_mbtowc+0x1e>
 800662a:	7813      	ldrb	r3, [r2, #0]
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	1e10      	subs	r0, r2, #0
 8006632:	bf18      	it	ne
 8006634:	2001      	movne	r0, #1
 8006636:	b002      	add	sp, #8
 8006638:	4770      	bx	lr
 800663a:	4610      	mov	r0, r2
 800663c:	e7fb      	b.n	8006636 <__ascii_mbtowc+0x16>
 800663e:	f06f 0001 	mvn.w	r0, #1
 8006642:	e7f8      	b.n	8006636 <__ascii_mbtowc+0x16>

08006644 <_realloc_r>:
 8006644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006648:	4680      	mov	r8, r0
 800664a:	4615      	mov	r5, r2
 800664c:	460c      	mov	r4, r1
 800664e:	b921      	cbnz	r1, 800665a <_realloc_r+0x16>
 8006650:	4611      	mov	r1, r2
 8006652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006656:	f7ff b96d 	b.w	8005934 <_malloc_r>
 800665a:	b92a      	cbnz	r2, 8006668 <_realloc_r+0x24>
 800665c:	f7ff f8f8 	bl	8005850 <_free_r>
 8006660:	2400      	movs	r4, #0
 8006662:	4620      	mov	r0, r4
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	f000 f841 	bl	80066ee <_malloc_usable_size_r>
 800666c:	4285      	cmp	r5, r0
 800666e:	4606      	mov	r6, r0
 8006670:	d802      	bhi.n	8006678 <_realloc_r+0x34>
 8006672:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006676:	d8f4      	bhi.n	8006662 <_realloc_r+0x1e>
 8006678:	4629      	mov	r1, r5
 800667a:	4640      	mov	r0, r8
 800667c:	f7ff f95a 	bl	8005934 <_malloc_r>
 8006680:	4607      	mov	r7, r0
 8006682:	2800      	cmp	r0, #0
 8006684:	d0ec      	beq.n	8006660 <_realloc_r+0x1c>
 8006686:	42b5      	cmp	r5, r6
 8006688:	462a      	mov	r2, r5
 800668a:	4621      	mov	r1, r4
 800668c:	bf28      	it	cs
 800668e:	4632      	movcs	r2, r6
 8006690:	f7ff ff86 	bl	80065a0 <memcpy>
 8006694:	4621      	mov	r1, r4
 8006696:	4640      	mov	r0, r8
 8006698:	f7ff f8da 	bl	8005850 <_free_r>
 800669c:	463c      	mov	r4, r7
 800669e:	e7e0      	b.n	8006662 <_realloc_r+0x1e>

080066a0 <__ascii_wctomb>:
 80066a0:	4603      	mov	r3, r0
 80066a2:	4608      	mov	r0, r1
 80066a4:	b141      	cbz	r1, 80066b8 <__ascii_wctomb+0x18>
 80066a6:	2aff      	cmp	r2, #255	@ 0xff
 80066a8:	d904      	bls.n	80066b4 <__ascii_wctomb+0x14>
 80066aa:	228a      	movs	r2, #138	@ 0x8a
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	4770      	bx	lr
 80066b4:	2001      	movs	r0, #1
 80066b6:	700a      	strb	r2, [r1, #0]
 80066b8:	4770      	bx	lr
	...

080066bc <fiprintf>:
 80066bc:	b40e      	push	{r1, r2, r3}
 80066be:	b503      	push	{r0, r1, lr}
 80066c0:	4601      	mov	r1, r0
 80066c2:	ab03      	add	r3, sp, #12
 80066c4:	4805      	ldr	r0, [pc, #20]	@ (80066dc <fiprintf+0x20>)
 80066c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	f000 f83d 	bl	800674c <_vfiprintf_r>
 80066d2:	b002      	add	sp, #8
 80066d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d8:	b003      	add	sp, #12
 80066da:	4770      	bx	lr
 80066dc:	2000001c 	.word	0x2000001c

080066e0 <abort>:
 80066e0:	2006      	movs	r0, #6
 80066e2:	b508      	push	{r3, lr}
 80066e4:	f000 fa06 	bl	8006af4 <raise>
 80066e8:	2001      	movs	r0, #1
 80066ea:	f7fb f93a 	bl	8001962 <_exit>

080066ee <_malloc_usable_size_r>:
 80066ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f2:	1f18      	subs	r0, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bfbc      	itt	lt
 80066f8:	580b      	ldrlt	r3, [r1, r0]
 80066fa:	18c0      	addlt	r0, r0, r3
 80066fc:	4770      	bx	lr

080066fe <__sfputc_r>:
 80066fe:	6893      	ldr	r3, [r2, #8]
 8006700:	b410      	push	{r4}
 8006702:	3b01      	subs	r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	6093      	str	r3, [r2, #8]
 8006708:	da07      	bge.n	800671a <__sfputc_r+0x1c>
 800670a:	6994      	ldr	r4, [r2, #24]
 800670c:	42a3      	cmp	r3, r4
 800670e:	db01      	blt.n	8006714 <__sfputc_r+0x16>
 8006710:	290a      	cmp	r1, #10
 8006712:	d102      	bne.n	800671a <__sfputc_r+0x1c>
 8006714:	bc10      	pop	{r4}
 8006716:	f000 b931 	b.w	800697c <__swbuf_r>
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	1c58      	adds	r0, r3, #1
 800671e:	6010      	str	r0, [r2, #0]
 8006720:	7019      	strb	r1, [r3, #0]
 8006722:	4608      	mov	r0, r1
 8006724:	bc10      	pop	{r4}
 8006726:	4770      	bx	lr

08006728 <__sfputs_r>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	4614      	mov	r4, r2
 8006730:	18d5      	adds	r5, r2, r3
 8006732:	42ac      	cmp	r4, r5
 8006734:	d101      	bne.n	800673a <__sfputs_r+0x12>
 8006736:	2000      	movs	r0, #0
 8006738:	e007      	b.n	800674a <__sfputs_r+0x22>
 800673a:	463a      	mov	r2, r7
 800673c:	4630      	mov	r0, r6
 800673e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006742:	f7ff ffdc 	bl	80066fe <__sfputc_r>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d1f3      	bne.n	8006732 <__sfputs_r+0xa>
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800674c <_vfiprintf_r>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	460d      	mov	r5, r1
 8006752:	4614      	mov	r4, r2
 8006754:	4698      	mov	r8, r3
 8006756:	4606      	mov	r6, r0
 8006758:	b09d      	sub	sp, #116	@ 0x74
 800675a:	b118      	cbz	r0, 8006764 <_vfiprintf_r+0x18>
 800675c:	6a03      	ldr	r3, [r0, #32]
 800675e:	b90b      	cbnz	r3, 8006764 <_vfiprintf_r+0x18>
 8006760:	f7fe f8fe 	bl	8004960 <__sinit>
 8006764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	d405      	bmi.n	8006776 <_vfiprintf_r+0x2a>
 800676a:	89ab      	ldrh	r3, [r5, #12]
 800676c:	059a      	lsls	r2, r3, #22
 800676e:	d402      	bmi.n	8006776 <_vfiprintf_r+0x2a>
 8006770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006772:	f7fe fa0c 	bl	8004b8e <__retarget_lock_acquire_recursive>
 8006776:	89ab      	ldrh	r3, [r5, #12]
 8006778:	071b      	lsls	r3, r3, #28
 800677a:	d501      	bpl.n	8006780 <_vfiprintf_r+0x34>
 800677c:	692b      	ldr	r3, [r5, #16]
 800677e:	b99b      	cbnz	r3, 80067a8 <_vfiprintf_r+0x5c>
 8006780:	4629      	mov	r1, r5
 8006782:	4630      	mov	r0, r6
 8006784:	f000 f938 	bl	80069f8 <__swsetup_r>
 8006788:	b170      	cbz	r0, 80067a8 <_vfiprintf_r+0x5c>
 800678a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800678c:	07dc      	lsls	r4, r3, #31
 800678e:	d504      	bpl.n	800679a <_vfiprintf_r+0x4e>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	b01d      	add	sp, #116	@ 0x74
 8006796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	0598      	lsls	r0, r3, #22
 800679e:	d4f7      	bmi.n	8006790 <_vfiprintf_r+0x44>
 80067a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067a2:	f7fe f9f5 	bl	8004b90 <__retarget_lock_release_recursive>
 80067a6:	e7f3      	b.n	8006790 <_vfiprintf_r+0x44>
 80067a8:	2300      	movs	r3, #0
 80067aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ac:	2320      	movs	r3, #32
 80067ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067b2:	2330      	movs	r3, #48	@ 0x30
 80067b4:	f04f 0901 	mov.w	r9, #1
 80067b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006968 <_vfiprintf_r+0x21c>
 80067c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067c4:	4623      	mov	r3, r4
 80067c6:	469a      	mov	sl, r3
 80067c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067cc:	b10a      	cbz	r2, 80067d2 <_vfiprintf_r+0x86>
 80067ce:	2a25      	cmp	r2, #37	@ 0x25
 80067d0:	d1f9      	bne.n	80067c6 <_vfiprintf_r+0x7a>
 80067d2:	ebba 0b04 	subs.w	fp, sl, r4
 80067d6:	d00b      	beq.n	80067f0 <_vfiprintf_r+0xa4>
 80067d8:	465b      	mov	r3, fp
 80067da:	4622      	mov	r2, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	4630      	mov	r0, r6
 80067e0:	f7ff ffa2 	bl	8006728 <__sfputs_r>
 80067e4:	3001      	adds	r0, #1
 80067e6:	f000 80a7 	beq.w	8006938 <_vfiprintf_r+0x1ec>
 80067ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067ec:	445a      	add	r2, fp
 80067ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80067f0:	f89a 3000 	ldrb.w	r3, [sl]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 809f 	beq.w	8006938 <_vfiprintf_r+0x1ec>
 80067fa:	2300      	movs	r3, #0
 80067fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006804:	f10a 0a01 	add.w	sl, sl, #1
 8006808:	9304      	str	r3, [sp, #16]
 800680a:	9307      	str	r3, [sp, #28]
 800680c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006810:	931a      	str	r3, [sp, #104]	@ 0x68
 8006812:	4654      	mov	r4, sl
 8006814:	2205      	movs	r2, #5
 8006816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681a:	4853      	ldr	r0, [pc, #332]	@ (8006968 <_vfiprintf_r+0x21c>)
 800681c:	f7fe f9b9 	bl	8004b92 <memchr>
 8006820:	9a04      	ldr	r2, [sp, #16]
 8006822:	b9d8      	cbnz	r0, 800685c <_vfiprintf_r+0x110>
 8006824:	06d1      	lsls	r1, r2, #27
 8006826:	bf44      	itt	mi
 8006828:	2320      	movmi	r3, #32
 800682a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800682e:	0713      	lsls	r3, r2, #28
 8006830:	bf44      	itt	mi
 8006832:	232b      	movmi	r3, #43	@ 0x2b
 8006834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006838:	f89a 3000 	ldrb.w	r3, [sl]
 800683c:	2b2a      	cmp	r3, #42	@ 0x2a
 800683e:	d015      	beq.n	800686c <_vfiprintf_r+0x120>
 8006840:	4654      	mov	r4, sl
 8006842:	2000      	movs	r0, #0
 8006844:	f04f 0c0a 	mov.w	ip, #10
 8006848:	9a07      	ldr	r2, [sp, #28]
 800684a:	4621      	mov	r1, r4
 800684c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006850:	3b30      	subs	r3, #48	@ 0x30
 8006852:	2b09      	cmp	r3, #9
 8006854:	d94b      	bls.n	80068ee <_vfiprintf_r+0x1a2>
 8006856:	b1b0      	cbz	r0, 8006886 <_vfiprintf_r+0x13a>
 8006858:	9207      	str	r2, [sp, #28]
 800685a:	e014      	b.n	8006886 <_vfiprintf_r+0x13a>
 800685c:	eba0 0308 	sub.w	r3, r0, r8
 8006860:	fa09 f303 	lsl.w	r3, r9, r3
 8006864:	4313      	orrs	r3, r2
 8006866:	46a2      	mov	sl, r4
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	e7d2      	b.n	8006812 <_vfiprintf_r+0xc6>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	1d19      	adds	r1, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	9103      	str	r1, [sp, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	bfbb      	ittet	lt
 8006878:	425b      	neglt	r3, r3
 800687a:	f042 0202 	orrlt.w	r2, r2, #2
 800687e:	9307      	strge	r3, [sp, #28]
 8006880:	9307      	strlt	r3, [sp, #28]
 8006882:	bfb8      	it	lt
 8006884:	9204      	strlt	r2, [sp, #16]
 8006886:	7823      	ldrb	r3, [r4, #0]
 8006888:	2b2e      	cmp	r3, #46	@ 0x2e
 800688a:	d10a      	bne.n	80068a2 <_vfiprintf_r+0x156>
 800688c:	7863      	ldrb	r3, [r4, #1]
 800688e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006890:	d132      	bne.n	80068f8 <_vfiprintf_r+0x1ac>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	3402      	adds	r4, #2
 8006896:	1d1a      	adds	r2, r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	9203      	str	r2, [sp, #12]
 800689c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800696c <_vfiprintf_r+0x220>
 80068a6:	2203      	movs	r2, #3
 80068a8:	4650      	mov	r0, sl
 80068aa:	7821      	ldrb	r1, [r4, #0]
 80068ac:	f7fe f971 	bl	8004b92 <memchr>
 80068b0:	b138      	cbz	r0, 80068c2 <_vfiprintf_r+0x176>
 80068b2:	2240      	movs	r2, #64	@ 0x40
 80068b4:	9b04      	ldr	r3, [sp, #16]
 80068b6:	eba0 000a 	sub.w	r0, r0, sl
 80068ba:	4082      	lsls	r2, r0
 80068bc:	4313      	orrs	r3, r2
 80068be:	3401      	adds	r4, #1
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c6:	2206      	movs	r2, #6
 80068c8:	4829      	ldr	r0, [pc, #164]	@ (8006970 <_vfiprintf_r+0x224>)
 80068ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068ce:	f7fe f960 	bl	8004b92 <memchr>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d03f      	beq.n	8006956 <_vfiprintf_r+0x20a>
 80068d6:	4b27      	ldr	r3, [pc, #156]	@ (8006974 <_vfiprintf_r+0x228>)
 80068d8:	bb1b      	cbnz	r3, 8006922 <_vfiprintf_r+0x1d6>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	3307      	adds	r3, #7
 80068de:	f023 0307 	bic.w	r3, r3, #7
 80068e2:	3308      	adds	r3, #8
 80068e4:	9303      	str	r3, [sp, #12]
 80068e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e8:	443b      	add	r3, r7
 80068ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ec:	e76a      	b.n	80067c4 <_vfiprintf_r+0x78>
 80068ee:	460c      	mov	r4, r1
 80068f0:	2001      	movs	r0, #1
 80068f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f6:	e7a8      	b.n	800684a <_vfiprintf_r+0xfe>
 80068f8:	2300      	movs	r3, #0
 80068fa:	f04f 0c0a 	mov.w	ip, #10
 80068fe:	4619      	mov	r1, r3
 8006900:	3401      	adds	r4, #1
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	4620      	mov	r0, r4
 8006906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800690a:	3a30      	subs	r2, #48	@ 0x30
 800690c:	2a09      	cmp	r2, #9
 800690e:	d903      	bls.n	8006918 <_vfiprintf_r+0x1cc>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0c6      	beq.n	80068a2 <_vfiprintf_r+0x156>
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	e7c4      	b.n	80068a2 <_vfiprintf_r+0x156>
 8006918:	4604      	mov	r4, r0
 800691a:	2301      	movs	r3, #1
 800691c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006920:	e7f0      	b.n	8006904 <_vfiprintf_r+0x1b8>
 8006922:	ab03      	add	r3, sp, #12
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	462a      	mov	r2, r5
 8006928:	4630      	mov	r0, r6
 800692a:	4b13      	ldr	r3, [pc, #76]	@ (8006978 <_vfiprintf_r+0x22c>)
 800692c:	a904      	add	r1, sp, #16
 800692e:	f7fd fbcd 	bl	80040cc <_printf_float>
 8006932:	4607      	mov	r7, r0
 8006934:	1c78      	adds	r0, r7, #1
 8006936:	d1d6      	bne.n	80068e6 <_vfiprintf_r+0x19a>
 8006938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800693a:	07d9      	lsls	r1, r3, #31
 800693c:	d405      	bmi.n	800694a <_vfiprintf_r+0x1fe>
 800693e:	89ab      	ldrh	r3, [r5, #12]
 8006940:	059a      	lsls	r2, r3, #22
 8006942:	d402      	bmi.n	800694a <_vfiprintf_r+0x1fe>
 8006944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006946:	f7fe f923 	bl	8004b90 <__retarget_lock_release_recursive>
 800694a:	89ab      	ldrh	r3, [r5, #12]
 800694c:	065b      	lsls	r3, r3, #25
 800694e:	f53f af1f 	bmi.w	8006790 <_vfiprintf_r+0x44>
 8006952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006954:	e71e      	b.n	8006794 <_vfiprintf_r+0x48>
 8006956:	ab03      	add	r3, sp, #12
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	462a      	mov	r2, r5
 800695c:	4630      	mov	r0, r6
 800695e:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <_vfiprintf_r+0x22c>)
 8006960:	a904      	add	r1, sp, #16
 8006962:	f7fd fe51 	bl	8004608 <_printf_i>
 8006966:	e7e4      	b.n	8006932 <_vfiprintf_r+0x1e6>
 8006968:	08006ea8 	.word	0x08006ea8
 800696c:	08006eae 	.word	0x08006eae
 8006970:	08006eb2 	.word	0x08006eb2
 8006974:	080040cd 	.word	0x080040cd
 8006978:	08006729 	.word	0x08006729

0800697c <__swbuf_r>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	460e      	mov	r6, r1
 8006980:	4614      	mov	r4, r2
 8006982:	4605      	mov	r5, r0
 8006984:	b118      	cbz	r0, 800698e <__swbuf_r+0x12>
 8006986:	6a03      	ldr	r3, [r0, #32]
 8006988:	b90b      	cbnz	r3, 800698e <__swbuf_r+0x12>
 800698a:	f7fd ffe9 	bl	8004960 <__sinit>
 800698e:	69a3      	ldr	r3, [r4, #24]
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	071a      	lsls	r2, r3, #28
 8006996:	d501      	bpl.n	800699c <__swbuf_r+0x20>
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	b943      	cbnz	r3, 80069ae <__swbuf_r+0x32>
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f82a 	bl	80069f8 <__swsetup_r>
 80069a4:	b118      	cbz	r0, 80069ae <__swbuf_r+0x32>
 80069a6:	f04f 37ff 	mov.w	r7, #4294967295
 80069aa:	4638      	mov	r0, r7
 80069ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	6922      	ldr	r2, [r4, #16]
 80069b2:	b2f6      	uxtb	r6, r6
 80069b4:	1a98      	subs	r0, r3, r2
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	4637      	mov	r7, r6
 80069ba:	4283      	cmp	r3, r0
 80069bc:	dc05      	bgt.n	80069ca <__swbuf_r+0x4e>
 80069be:	4621      	mov	r1, r4
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7ff fd9b 	bl	80064fc <_fflush_r>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d1ed      	bne.n	80069a6 <__swbuf_r+0x2a>
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	701e      	strb	r6, [r3, #0]
 80069d8:	6962      	ldr	r2, [r4, #20]
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	429a      	cmp	r2, r3
 80069de:	d004      	beq.n	80069ea <__swbuf_r+0x6e>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d5e1      	bpl.n	80069aa <__swbuf_r+0x2e>
 80069e6:	2e0a      	cmp	r6, #10
 80069e8:	d1df      	bne.n	80069aa <__swbuf_r+0x2e>
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f7ff fd85 	bl	80064fc <_fflush_r>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d0d9      	beq.n	80069aa <__swbuf_r+0x2e>
 80069f6:	e7d6      	b.n	80069a6 <__swbuf_r+0x2a>

080069f8 <__swsetup_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4b29      	ldr	r3, [pc, #164]	@ (8006aa0 <__swsetup_r+0xa8>)
 80069fc:	4605      	mov	r5, r0
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	460c      	mov	r4, r1
 8006a02:	b118      	cbz	r0, 8006a0c <__swsetup_r+0x14>
 8006a04:	6a03      	ldr	r3, [r0, #32]
 8006a06:	b90b      	cbnz	r3, 8006a0c <__swsetup_r+0x14>
 8006a08:	f7fd ffaa 	bl	8004960 <__sinit>
 8006a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a10:	0719      	lsls	r1, r3, #28
 8006a12:	d422      	bmi.n	8006a5a <__swsetup_r+0x62>
 8006a14:	06da      	lsls	r2, r3, #27
 8006a16:	d407      	bmi.n	8006a28 <__swsetup_r+0x30>
 8006a18:	2209      	movs	r2, #9
 8006a1a:	602a      	str	r2, [r5, #0]
 8006a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	e033      	b.n	8006a90 <__swsetup_r+0x98>
 8006a28:	0758      	lsls	r0, r3, #29
 8006a2a:	d512      	bpl.n	8006a52 <__swsetup_r+0x5a>
 8006a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a2e:	b141      	cbz	r1, 8006a42 <__swsetup_r+0x4a>
 8006a30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d002      	beq.n	8006a3e <__swsetup_r+0x46>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7fe ff09 	bl	8005850 <_free_r>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6063      	str	r3, [r4, #4]
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f043 0308 	orr.w	r3, r3, #8
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	b94b      	cbnz	r3, 8006a72 <__swsetup_r+0x7a>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a68:	d003      	beq.n	8006a72 <__swsetup_r+0x7a>
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 f882 	bl	8006b76 <__smakebuf_r>
 8006a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a76:	f013 0201 	ands.w	r2, r3, #1
 8006a7a:	d00a      	beq.n	8006a92 <__swsetup_r+0x9a>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60a2      	str	r2, [r4, #8]
 8006a80:	6962      	ldr	r2, [r4, #20]
 8006a82:	4252      	negs	r2, r2
 8006a84:	61a2      	str	r2, [r4, #24]
 8006a86:	6922      	ldr	r2, [r4, #16]
 8006a88:	b942      	cbnz	r2, 8006a9c <__swsetup_r+0xa4>
 8006a8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a8e:	d1c5      	bne.n	8006a1c <__swsetup_r+0x24>
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	0799      	lsls	r1, r3, #30
 8006a94:	bf58      	it	pl
 8006a96:	6962      	ldrpl	r2, [r4, #20]
 8006a98:	60a2      	str	r2, [r4, #8]
 8006a9a:	e7f4      	b.n	8006a86 <__swsetup_r+0x8e>
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e7f7      	b.n	8006a90 <__swsetup_r+0x98>
 8006aa0:	2000001c 	.word	0x2000001c

08006aa4 <_raise_r>:
 8006aa4:	291f      	cmp	r1, #31
 8006aa6:	b538      	push	{r3, r4, r5, lr}
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	d904      	bls.n	8006ab8 <_raise_r+0x14>
 8006aae:	2316      	movs	r3, #22
 8006ab0:	6003      	str	r3, [r0, #0]
 8006ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006aba:	b112      	cbz	r2, 8006ac2 <_raise_r+0x1e>
 8006abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ac0:	b94b      	cbnz	r3, 8006ad6 <_raise_r+0x32>
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 f830 	bl	8006b28 <_getpid_r>
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4601      	mov	r1, r0
 8006acc:	4628      	mov	r0, r5
 8006ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad2:	f000 b817 	b.w	8006b04 <_kill_r>
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d00a      	beq.n	8006af0 <_raise_r+0x4c>
 8006ada:	1c59      	adds	r1, r3, #1
 8006adc:	d103      	bne.n	8006ae6 <_raise_r+0x42>
 8006ade:	2316      	movs	r3, #22
 8006ae0:	6003      	str	r3, [r0, #0]
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	e7e7      	b.n	8006ab6 <_raise_r+0x12>
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006aee:	4798      	blx	r3
 8006af0:	2000      	movs	r0, #0
 8006af2:	e7e0      	b.n	8006ab6 <_raise_r+0x12>

08006af4 <raise>:
 8006af4:	4b02      	ldr	r3, [pc, #8]	@ (8006b00 <raise+0xc>)
 8006af6:	4601      	mov	r1, r0
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	f7ff bfd3 	b.w	8006aa4 <_raise_r>
 8006afe:	bf00      	nop
 8006b00:	2000001c 	.word	0x2000001c

08006b04 <_kill_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	2300      	movs	r3, #0
 8006b08:	4d06      	ldr	r5, [pc, #24]	@ (8006b24 <_kill_r+0x20>)
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	f7fa ff16 	bl	8001942 <_kill>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d102      	bne.n	8006b20 <_kill_r+0x1c>
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	b103      	cbz	r3, 8006b20 <_kill_r+0x1c>
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
 8006b22:	bf00      	nop
 8006b24:	200004ac 	.word	0x200004ac

08006b28 <_getpid_r>:
 8006b28:	f7fa bf04 	b.w	8001934 <_getpid>

08006b2c <__swhatbuf_r>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	460c      	mov	r4, r1
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	4615      	mov	r5, r2
 8006b36:	2900      	cmp	r1, #0
 8006b38:	461e      	mov	r6, r3
 8006b3a:	b096      	sub	sp, #88	@ 0x58
 8006b3c:	da0c      	bge.n	8006b58 <__swhatbuf_r+0x2c>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	2100      	movs	r1, #0
 8006b42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b46:	bf14      	ite	ne
 8006b48:	2340      	movne	r3, #64	@ 0x40
 8006b4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b4e:	2000      	movs	r0, #0
 8006b50:	6031      	str	r1, [r6, #0]
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	b016      	add	sp, #88	@ 0x58
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	466a      	mov	r2, sp
 8006b5a:	f000 f849 	bl	8006bf0 <_fstat_r>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	dbed      	blt.n	8006b3e <__swhatbuf_r+0x12>
 8006b62:	9901      	ldr	r1, [sp, #4]
 8006b64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b6c:	4259      	negs	r1, r3
 8006b6e:	4159      	adcs	r1, r3
 8006b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b74:	e7eb      	b.n	8006b4e <__swhatbuf_r+0x22>

08006b76 <__smakebuf_r>:
 8006b76:	898b      	ldrh	r3, [r1, #12]
 8006b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b7a:	079d      	lsls	r5, r3, #30
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	d507      	bpl.n	8006b92 <__smakebuf_r+0x1c>
 8006b82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	6163      	str	r3, [r4, #20]
 8006b8e:	b003      	add	sp, #12
 8006b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b92:	466a      	mov	r2, sp
 8006b94:	ab01      	add	r3, sp, #4
 8006b96:	f7ff ffc9 	bl	8006b2c <__swhatbuf_r>
 8006b9a:	9f00      	ldr	r7, [sp, #0]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7fe fec7 	bl	8005934 <_malloc_r>
 8006ba6:	b948      	cbnz	r0, 8006bbc <__smakebuf_r+0x46>
 8006ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bac:	059a      	lsls	r2, r3, #22
 8006bae:	d4ee      	bmi.n	8006b8e <__smakebuf_r+0x18>
 8006bb0:	f023 0303 	bic.w	r3, r3, #3
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	e7e2      	b.n	8006b82 <__smakebuf_r+0xc>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	6020      	str	r0, [r4, #0]
 8006bcc:	b15b      	cbz	r3, 8006be6 <__smakebuf_r+0x70>
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd4:	f000 f81e 	bl	8006c14 <_isatty_r>
 8006bd8:	b128      	cbz	r0, 8006be6 <__smakebuf_r+0x70>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f023 0303 	bic.w	r3, r3, #3
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	431d      	orrs	r5, r3
 8006bea:	81a5      	strh	r5, [r4, #12]
 8006bec:	e7cf      	b.n	8006b8e <__smakebuf_r+0x18>
	...

08006bf0 <_fstat_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4d06      	ldr	r5, [pc, #24]	@ (8006c10 <_fstat_r+0x20>)
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	f7fa feff 	bl	8001a00 <_fstat>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	d102      	bne.n	8006c0c <_fstat_r+0x1c>
 8006c06:	682b      	ldr	r3, [r5, #0]
 8006c08:	b103      	cbz	r3, 8006c0c <_fstat_r+0x1c>
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	bd38      	pop	{r3, r4, r5, pc}
 8006c0e:	bf00      	nop
 8006c10:	200004ac 	.word	0x200004ac

08006c14 <_isatty_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	2300      	movs	r3, #0
 8006c18:	4d05      	ldr	r5, [pc, #20]	@ (8006c30 <_isatty_r+0x1c>)
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	f7fa fefd 	bl	8001a1e <_isatty>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d102      	bne.n	8006c2e <_isatty_r+0x1a>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	b103      	cbz	r3, 8006c2e <_isatty_r+0x1a>
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	200004ac 	.word	0x200004ac

08006c34 <_init>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr

08006c40 <_fini>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr
