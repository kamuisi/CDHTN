
actuator_comunicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cdc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e58  08003e58  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  08003e58  08003e58  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e58  08003e58  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00004e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003e60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000060  08003ec0  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003ec0  000052f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b718  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a12  00000000  00000000  000107a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000121b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091b  00000000  00000000  00012d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178bf  00000000  00000000  0001366b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc7e  00000000  00000000  0002af2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a43a  00000000  00000000  00037ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  000c2028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c56b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dd0 	.word	0x08003dd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003dd0 	.word	0x08003dd0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == htim3.Instance)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d16d      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0xf0>
	 {
		float error = target_RPM[state_RPM] - current_RPM;
 80006a8:	4b39      	ldr	r3, [pc, #228]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a39      	ldr	r2, [pc, #228]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80006ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b38      	ldr	r3, [pc, #224]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80006b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fdff 	bl	80002c0 <__aeabi_i2f>
 80006c2:	4603      	mov	r3, r0
 80006c4:	617b      	str	r3, [r7, #20]
		float Pout = Kp * error;
 80006c6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80006ca:	4619      	mov	r1, r3
 80006cc:	6978      	ldr	r0, [r7, #20]
 80006ce:	f7ff fe4b 	bl	8000368 <__aeabi_fmul>
 80006d2:	4603      	mov	r3, r0
 80006d4:	613b      	str	r3, [r7, #16]
		float Dout = Kd * (error - old_error) / TIME_SAMPLE;
 80006d6:	4b31      	ldr	r3, [pc, #196]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80006d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fdef 	bl	80002c0 <__aeabi_i2f>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4619      	mov	r1, r3
 80006e6:	6978      	ldr	r0, [r7, #20]
 80006e8:	f7ff fd34 	bl	8000154 <__aeabi_fsub>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80006f2:	4619      	mov	r1, r3
 80006f4:	4610      	mov	r0, r2
 80006f6:	f7ff fe37 	bl	8000368 <__aeabi_fmul>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fee5 	bl	80004d0 <__aeabi_fdiv>
 8000706:	4603      	mov	r3, r0
 8000708:	60fb      	str	r3, [r7, #12]
		sum_error+=error;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6979      	ldr	r1, [r7, #20]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd21 	bl	8000158 <__addsf3>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800071c:	601a      	str	r2, [r3, #0]
		float Iout = Ki * sum_error * TIME_SAMPLE;
 800071e:	4a22      	ldr	r2, [pc, #136]	@ (80007a8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4610      	mov	r0, r2
 8000728:	f7ff fe1e 	bl	8000368 <__aeabi_fmul>
 800072c:	4603      	mov	r3, r0
 800072e:	4619      	mov	r1, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd11 	bl	8000158 <__addsf3>
 8000736:	4603      	mov	r3, r0
 8000738:	60bb      	str	r3, [r7, #8]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t)(Pout + Iout + Dout));
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	6938      	ldr	r0, [r7, #16]
 800073e:	f7ff fd0b 	bl	8000158 <__addsf3>
 8000742:	4603      	mov	r3, r0
 8000744:	68f9      	ldr	r1, [r7, #12]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd06 	bl	8000158 <__addsf3>
 800074c:	4603      	mov	r3, r0
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff80 	bl	8000654 <__aeabi_f2uiz>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <HAL_TIM_PeriodElapsedCallback+0x118>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40
		old_error = error;
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff52 	bl	8000608 <__aeabi_f2iz>
 8000764:	4603      	mov	r3, r0
 8000766:	b21a      	sxth	r2, r3
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800076a:	801a      	strh	r2, [r3, #0]
		state_RPM+=1;
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000774:	6013      	str	r3, [r2, #0]
		if(state_RPM == 5)
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b05      	cmp	r3, #5
 800077c:	d102      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0xf0>
		{
			state_RPM = 0;
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
		}
	  }
}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000010c 	.word	0x2000010c
 8000790:	20000000 	.word	0x20000000
 8000794:	08003dec 	.word	0x08003dec
 8000798:	2000019c 	.word	0x2000019c
 800079c:	200001a4 	.word	0x200001a4
 80007a0:	3d4ccccd 	.word	0x3d4ccccd
 80007a4:	200001a0 	.word	0x200001a0
 80007a8:	3dcccccd 	.word	0x3dcccccd
 80007ac:	2000007c 	.word	0x2000007c

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 fc23 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f851 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 fa0d 	bl	8000bdc <MX_GPIO_Init>
  MX_TIM1_Init();
 80007c2:	f000 f893 	bl	80008ec <MX_TIM1_Init>
  MX_TIM2_Init();
 80007c6:	f000 f93d 	bl	8000a44 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80007ca:	f000 f9dd 	bl	8000b88 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80007ce:	f000 f98d 	bl	8000aec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  char text_data[20];
  uint16_t encoder_data;
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80007d2:	213c      	movs	r1, #60	@ 0x3c
 80007d4:	481b      	ldr	r0, [pc, #108]	@ (8000844 <main+0x94>)
 80007d6:	f001 fd89 	bl	80022ec <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80007da:	210c      	movs	r1, #12
 80007dc:	481a      	ldr	r0, [pc, #104]	@ (8000848 <main+0x98>)
 80007de:	f001 fc41 	bl	8002064 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim3);
 80007e2:	481a      	ldr	r0, [pc, #104]	@ (800084c <main+0x9c>)
 80007e4:	f001 fb9c 	bl	8001f20 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ec:	f000 fc6a 	bl	80010c4 <HAL_Delay>
	  encoder_data = __HAL_TIM_GET_COUNTER(&htim2);
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <main+0x94>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f6:	82fb      	strh	r3, [r7, #22]
	  encoder_data= 65535 - encoder_data;
 80007f8:	8afb      	ldrh	r3, [r7, #22]
 80007fa:	43db      	mvns	r3, r3
 80007fc:	82fb      	strh	r3, [r7, #22]
	  current_RPM = encoder_data*60 / PULSE_PER_ROUND;
 80007fe:	8afa      	ldrh	r2, [r7, #22]
 8000800:	4613      	mov	r3, r2
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	1a9b      	subs	r3, r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <main+0xa0>)
 800080a:	fb82 1203 	smull	r1, r2, r2, r3
 800080e:	1212      	asrs	r2, r2, #8
 8000810:	17db      	asrs	r3, r3, #31
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b21a      	sxth	r2, r3
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <main+0xa4>)
 8000818:	801a      	strh	r2, [r3, #0]
	  sprintf(text_data, "%u", current_RPM);
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <main+0xa4>)
 800081c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000820:	461a      	mov	r2, r3
 8000822:	463b      	mov	r3, r7
 8000824:	490c      	ldr	r1, [pc, #48]	@ (8000858 <main+0xa8>)
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fe22 	bl	8003470 <siprintf>
	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <main+0x94>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_UART_Transmit(&huart1, (uint8_t*)text_data, sizeof(text_data), 100);
 8000834:	4639      	mov	r1, r7
 8000836:	2364      	movs	r3, #100	@ 0x64
 8000838:	2214      	movs	r2, #20
 800083a:	4808      	ldr	r0, [pc, #32]	@ (800085c <main+0xac>)
 800083c:	f002 fc43 	bl	80030c6 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000840:	bf00      	nop
 8000842:	e7d1      	b.n	80007e8 <main+0x38>
 8000844:	200000c4 	.word	0x200000c4
 8000848:	2000007c 	.word	0x2000007c
 800084c:	2000010c 	.word	0x2000010c
 8000850:	2572fb07 	.word	0x2572fb07
 8000854:	2000019c 	.word	0x2000019c
 8000858:	08003de8 	.word	0x08003de8
 800085c:	20000154 	.word	0x20000154

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b090      	sub	sp, #64	@ 0x40
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2228      	movs	r2, #40	@ 0x28
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fe1e 	bl	80034b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000886:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800089e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fed9 	bl	8001660 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008b4:	f000 f9de 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f946 	bl	8001b64 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008de:	f000 f9c9 	bl	8000c74 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3740      	adds	r7, #64	@ 0x40
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b096      	sub	sp, #88	@ 0x58
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2220      	movs	r2, #32
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fdc3 	bl	80034b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092a:	4b44      	ldr	r3, [pc, #272]	@ (8000a3c <MX_TIM1_Init+0x150>)
 800092c:	4a44      	ldr	r2, [pc, #272]	@ (8000a40 <MX_TIM1_Init+0x154>)
 800092e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000930:	4b42      	ldr	r3, [pc, #264]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000932:	2247      	movs	r2, #71	@ 0x47
 8000934:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b41      	ldr	r3, [pc, #260]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800093c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a3c <MX_TIM1_Init+0x150>)
 800093e:	2263      	movs	r2, #99	@ 0x63
 8000940:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000942:	4b3e      	ldr	r3, [pc, #248]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000948:	4b3c      	ldr	r3, [pc, #240]	@ (8000a3c <MX_TIM1_Init+0x150>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000954:	4839      	ldr	r0, [pc, #228]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000956:	f001 fa93 	bl	8001e80 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000960:	f000 f988 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000968:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800096a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800096e:	4619      	mov	r1, r3
 8000970:	4832      	ldr	r0, [pc, #200]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000972:	f001 fefb 	bl	800276c <HAL_TIM_ConfigClockSource>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800097c:	f000 f97a 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000980:	482e      	ldr	r0, [pc, #184]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000982:	f001 fb17 	bl	8001fb4 <HAL_TIM_PWM_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800098c:	f000 f972 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000998:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800099c:	4619      	mov	r1, r3
 800099e:	4827      	ldr	r0, [pc, #156]	@ (8000a3c <MX_TIM1_Init+0x150>)
 80009a0:	f002 fa80 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80009aa:	f000 f963 	bl	8000c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	2360      	movs	r3, #96	@ 0x60
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 80009b2:	2332      	movs	r3, #50	@ 0x32
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	481a      	ldr	r0, [pc, #104]	@ (8000a3c <MX_TIM1_Init+0x150>)
 80009d4:	f001 fe08 	bl	80025e8 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80009de:	f000 f949 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	220c      	movs	r2, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <MX_TIM1_Init+0x150>)
 80009ec:	f001 fdfc 	bl	80025e8 <HAL_TIM_PWM_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80009f6:	f000 f93d 	bl	8000c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000a1e:	f002 fa9f 	bl	8002f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a28:	f000 f924 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MX_TIM1_Init+0x150>)
 8000a2e:	f000 f9cf 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3758      	adds	r7, #88	@ 0x58
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000007c 	.word	0x2000007c
 8000a40:	40012c00 	.word	0x40012c00

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	@ 0x30
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2224      	movs	r2, #36	@ 0x24
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fd2c 	bl	80034b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000ab4:	f001 fb78 	bl	80021a8 <HAL_TIM_Encoder_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000abe:	f000 f8d9 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_TIM2_Init+0xa4>)
 8000ad0:	f002 f9e8 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ada:	f000 f8cb 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	@ 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000c4 	.word	0x200000c4

08000aec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	463b      	mov	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b84 <MX_TIM3_Init+0x98>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b10:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000b14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b1e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b30:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b32:	f001 f9a5 	bl	8001e80 <HAL_TIM_Base_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b3c:	f000 f89a 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b4e:	f001 fe0d 	bl	800276c <HAL_TIM_ConfigClockSource>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b58:	f000 f88c 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_TIM3_Init+0x94>)
 8000b6a:	f002 f99b 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b74:	f000 f87e 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000010c 	.word	0x2000010c
 8000b84:	40000400 	.word	0x40000400

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <MX_USART1_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f002 fa31 	bl	8003026 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f000 f853 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000154 	.word	0x20000154
 8000bd8:	40013800 	.word	0x40013800

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000bf6:	f043 0320 	orr.w	r3, r3, #32
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0320 	and.w	r3, r3, #32
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a11      	ldr	r2, [pc, #68]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_GPIO_Init+0x90>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_EN_Pin|L_EN_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000c3e:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0x94>)
 8000c40:	f000 fcf6 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_EN_Pin L_EN_Pin */
  GPIO_InitStruct.Pin = R_EN_Pin|L_EN_Pin;
 8000c44:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <MX_GPIO_Init+0x94>)
 8000c5e:	f000 fb63 	bl	8001328 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a16      	ldr	r2, [pc, #88]	@ (8000d4c <HAL_TIM_Base_MspInit+0x68>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10c      	bne.n	8000d10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000cfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d0e:	e018      	b.n	8000d42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0f      	ldr	r2, [pc, #60]	@ (8000d54 <HAL_TIM_Base_MspInit+0x70>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d113      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_TIM_Base_MspInit+0x6c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	201d      	movs	r0, #29
 8000d38:	f000 fabf 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d3c:	201d      	movs	r0, #29
 8000d3e:	f000 fad8 	bl	80012f2 <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40000400 	.word	0x40000400

08000d58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d76:	d123      	bne.n	8000dc0 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	61d3      	str	r3, [r2, #28]
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000da8:	2303      	movs	r3, #3
 8000daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <HAL_TIM_Encoder_MspInit+0x74>)
 8000dbc:	f000 fab4 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a10      	ldr	r2, [pc, #64]	@ (8000e2c <HAL_TIM_MspPostInit+0x5c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d118      	bne.n	8000e22 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_TIM_MspPostInit+0x60>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <HAL_TIM_MspPostInit+0x60>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_TIM_MspPostInit+0x60>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = L_PWM_Pin|R_PWM_Pin;
 8000e08:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000e0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <HAL_TIM_MspPostInit+0x64>)
 8000e1e:	f000 fa83 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40012c00 	.word	0x40012c00
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec4 <HAL_UART_MspInit+0x8c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d131      	bne.n	8000ebc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a14      	ldr	r2, [pc, #80]	@ (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_UART_MspInit+0x90>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <HAL_UART_MspInit+0x94>)
 8000e9e:	f000 fa43 	bl	8001328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <HAL_UART_MspInit+0x94>)
 8000eb8:	f000 fa36 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40013800 	.word	0x40013800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8b4 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <TIM3_IRQHandler+0x10>)
 8000f2e:	f001 fa6b 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000010c 	.word	0x2000010c

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f002 faa8 	bl	80034c0 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20005000 	.word	0x20005000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200001a8 	.word	0x200001a8
 8000fa4:	200002f8 	.word	0x200002f8

08000fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb4:	f7ff fff8 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fba:	490c      	ldr	r1, [pc, #48]	@ (8000fec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fd0:	4c09      	ldr	r4, [pc, #36]	@ (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f002 fa75 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff fbe5 	bl	80007b0 <main>
  bx lr
 8000fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ff0:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8000ff4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ff8:	200002f8 	.word	0x200002f8

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f947 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fe30 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f95f 	bl	800130e <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f927 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000008 	.word	0x20000008

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	@ (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	200001ac 	.word	0x200001ac

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	200001ac 	.word	0x200001ac

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff0 	bl	80010b0 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffe0 	bl	80010b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4906      	ldr	r1, [pc, #24]	@ (80011a4 <__NVIC_EnableIRQ+0x34>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	@ (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff90 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff2d 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff42 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff90 	bl	80011fc <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5f 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff35 	bl	8001170 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b08b      	sub	sp, #44	@ 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e169      	b.n	8001610 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800133c:	2201      	movs	r2, #1
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 8158 	bne.w	800160a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a9a      	ldr	r2, [pc, #616]	@ (80015c8 <HAL_GPIO_Init+0x2a0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d05e      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001364:	4a98      	ldr	r2, [pc, #608]	@ (80015c8 <HAL_GPIO_Init+0x2a0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d875      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800136a:	4a98      	ldr	r2, [pc, #608]	@ (80015cc <HAL_GPIO_Init+0x2a4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d058      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001370:	4a96      	ldr	r2, [pc, #600]	@ (80015cc <HAL_GPIO_Init+0x2a4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d86f      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001376:	4a96      	ldr	r2, [pc, #600]	@ (80015d0 <HAL_GPIO_Init+0x2a8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d052      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 800137c:	4a94      	ldr	r2, [pc, #592]	@ (80015d0 <HAL_GPIO_Init+0x2a8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d869      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001382:	4a94      	ldr	r2, [pc, #592]	@ (80015d4 <HAL_GPIO_Init+0x2ac>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d04c      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001388:	4a92      	ldr	r2, [pc, #584]	@ (80015d4 <HAL_GPIO_Init+0x2ac>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d863      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800138e:	4a92      	ldr	r2, [pc, #584]	@ (80015d8 <HAL_GPIO_Init+0x2b0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d046      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001394:	4a90      	ldr	r2, [pc, #576]	@ (80015d8 <HAL_GPIO_Init+0x2b0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d85d      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800139a:	2b12      	cmp	r3, #18
 800139c:	d82a      	bhi.n	80013f4 <HAL_GPIO_Init+0xcc>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d859      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 80013a2:	a201      	add	r2, pc, #4	@ (adr r2, 80013a8 <HAL_GPIO_Init+0x80>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	08001423 	.word	0x08001423
 80013ac:	080013fd 	.word	0x080013fd
 80013b0:	0800140f 	.word	0x0800140f
 80013b4:	08001451 	.word	0x08001451
 80013b8:	08001457 	.word	0x08001457
 80013bc:	08001457 	.word	0x08001457
 80013c0:	08001457 	.word	0x08001457
 80013c4:	08001457 	.word	0x08001457
 80013c8:	08001457 	.word	0x08001457
 80013cc:	08001457 	.word	0x08001457
 80013d0:	08001457 	.word	0x08001457
 80013d4:	08001457 	.word	0x08001457
 80013d8:	08001457 	.word	0x08001457
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001457 	.word	0x08001457
 80013e4:	08001457 	.word	0x08001457
 80013e8:	08001457 	.word	0x08001457
 80013ec:	08001405 	.word	0x08001405
 80013f0:	08001419 	.word	0x08001419
 80013f4:	4a79      	ldr	r2, [pc, #484]	@ (80015dc <HAL_GPIO_Init+0x2b4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fa:	e02c      	b.n	8001456 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e029      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	3304      	adds	r3, #4
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e024      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	3308      	adds	r3, #8
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e01f      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	330c      	adds	r3, #12
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e01a      	b.n	8001458 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142a:	2304      	movs	r3, #4
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e013      	b.n	8001458 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001438:	2308      	movs	r3, #8
 800143a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	611a      	str	r2, [r3, #16]
          break;
 8001442:	e009      	b.n	8001458 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	615a      	str	r2, [r3, #20]
          break;
 800144e:	e003      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x130>
          break;
 8001456:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	@ 0xff
 800145c:	d801      	bhi.n	8001462 <HAL_GPIO_Init+0x13a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_Init+0x13e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3304      	adds	r3, #4
 8001466:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2bff      	cmp	r3, #255	@ 0xff
 800146c:	d802      	bhi.n	8001474 <HAL_GPIO_Init+0x14c>
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x152>
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	3b08      	subs	r3, #8
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	210f      	movs	r1, #15
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	6a39      	ldr	r1, [r7, #32]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80b1 	beq.w	800160a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a8:	4b4d      	ldr	r3, [pc, #308]	@ (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a4c      	ldr	r2, [pc, #304]	@ (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c0:	4a48      	ldr	r2, [pc, #288]	@ (80015e4 <HAL_GPIO_Init+0x2bc>)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a40      	ldr	r2, [pc, #256]	@ (80015e8 <HAL_GPIO_Init+0x2c0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d013      	beq.n	8001514 <HAL_GPIO_Init+0x1ec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3f      	ldr	r2, [pc, #252]	@ (80015ec <HAL_GPIO_Init+0x2c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00d      	beq.n	8001510 <HAL_GPIO_Init+0x1e8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3e      	ldr	r2, [pc, #248]	@ (80015f0 <HAL_GPIO_Init+0x2c8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d007      	beq.n	800150c <HAL_GPIO_Init+0x1e4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3d      	ldr	r2, [pc, #244]	@ (80015f4 <HAL_GPIO_Init+0x2cc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_GPIO_Init+0x1e0>
 8001504:	2303      	movs	r3, #3
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001508:	2304      	movs	r3, #4
 800150a:	e004      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 800150c:	2302      	movs	r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001514:	2300      	movs	r3, #0
 8001516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001518:	f002 0203 	and.w	r2, r2, #3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4093      	lsls	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001526:	492f      	ldr	r1, [pc, #188]	@ (80015e4 <HAL_GPIO_Init+0x2bc>)
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	492c      	ldr	r1, [pc, #176]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4928      	ldr	r1, [pc, #160]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001558:	4013      	ands	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	4922      	ldr	r1, [pc, #136]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	491e      	ldr	r1, [pc, #120]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4918      	ldr	r1, [pc, #96]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4914      	ldr	r1, [pc, #80]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d021      	beq.n	80015fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	490e      	ldr	r1, [pc, #56]	@ (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e021      	b.n	800160a <HAL_GPIO_Init+0x2e2>
 80015c6:	bf00      	nop
 80015c8:	10320000 	.word	0x10320000
 80015cc:	10310000 	.word	0x10310000
 80015d0:	10220000 	.word	0x10220000
 80015d4:	10210000 	.word	0x10210000
 80015d8:	10120000 	.word	0x10120000
 80015dc:	10110000 	.word	0x10110000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010800 	.word	0x40010800
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40011400 	.word	0x40011400
 80015f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_GPIO_Init+0x304>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	43db      	mvns	r3, r3
 8001604:	4909      	ldr	r1, [pc, #36]	@ (800162c <HAL_GPIO_Init+0x304>)
 8001606:	4013      	ands	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	3301      	adds	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	f47f ae8e 	bne.w	800133c <HAL_GPIO_Init+0x14>
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	372c      	adds	r7, #44	@ 0x2c
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	611a      	str	r2, [r3, #16]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e272      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8087 	beq.w	800178e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001680:	4b92      	ldr	r3, [pc, #584]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b04      	cmp	r3, #4
 800168a:	d00c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800168c:	4b8f      	ldr	r3, [pc, #572]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	d112      	bne.n	80016be <HAL_RCC_OscConfig+0x5e>
 8001698:	4b8c      	ldr	r3, [pc, #560]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016a4:	d10b      	bne.n	80016be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	4b89      	ldr	r3, [pc, #548]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d06c      	beq.n	800178c <HAL_RCC_OscConfig+0x12c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d168      	bne.n	800178c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e24c      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x76>
 80016c8:	4b80      	ldr	r3, [pc, #512]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a7f      	ldr	r2, [pc, #508]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e02e      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x98>
 80016de:	4b7b      	ldr	r3, [pc, #492]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a7a      	ldr	r2, [pc, #488]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b78      	ldr	r3, [pc, #480]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a77      	ldr	r2, [pc, #476]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80016f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0xbc>
 8001702:	4b72      	ldr	r3, [pc, #456]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a71      	ldr	r2, [pc, #452]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b6f      	ldr	r3, [pc, #444]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6e      	ldr	r2, [pc, #440]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xd4>
 800171c:	4b6b      	ldr	r3, [pc, #428]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6a      	ldr	r2, [pc, #424]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b68      	ldr	r3, [pc, #416]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a67      	ldr	r2, [pc, #412]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fcb8 	bl	80010b0 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fcb4 	bl	80010b0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	@ 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e200      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b5d      	ldr	r3, [pc, #372]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xe4>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fca4 	bl	80010b0 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fca0 	bl	80010b0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1ec      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x10c>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179a:	4b4c      	ldr	r3, [pc, #304]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017a6:	4b49      	ldr	r3, [pc, #292]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x18c>
 80017b2:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x176>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1c0      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4939      	ldr	r1, [pc, #228]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b36      	ldr	r3, [pc, #216]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff fc59 	bl	80010b0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fc55 	bl	80010b0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1a1      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4927      	ldr	r1, [pc, #156]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <HAL_RCC_OscConfig+0x270>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc38 	bl	80010b0 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fc34 	bl	80010b0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e180      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03a      	beq.n	80018e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d019      	beq.n	80018aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_RCC_OscConfig+0x274>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff fc18 	bl	80010b0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fc14 	bl	80010b0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e160      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_RCC_OscConfig+0x26c>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f000 face 	bl	8001e44 <RCC_Delay>
 80018a8:	e01c      	b.n	80018e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_RCC_OscConfig+0x274>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fbfe 	bl	80010b0 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b6:	e00f      	b.n	80018d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fbfa 	bl	80010b0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d908      	bls.n	80018d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e146      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	42420000 	.word	0x42420000
 80018d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4b92      	ldr	r3, [pc, #584]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e9      	bne.n	80018b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80a6 	beq.w	8001a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10d      	bne.n	800191e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b88      	ldr	r3, [pc, #544]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a87      	ldr	r2, [pc, #540]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b85      	ldr	r3, [pc, #532]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191a:	2301      	movs	r3, #1
 800191c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191e:	4b82      	ldr	r3, [pc, #520]	@ (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d118      	bne.n	800195c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001936:	f7ff fbbb 	bl	80010b0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193e:	f7ff fbb7 	bl	80010b0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b64      	cmp	r3, #100	@ 0x64
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e103      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	4b75      	ldr	r3, [pc, #468]	@ (8001b28 <HAL_RCC_OscConfig+0x4c8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x312>
 8001964:	4b6f      	ldr	r3, [pc, #444]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a6e      	ldr	r2, [pc, #440]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6213      	str	r3, [r2, #32]
 8001970:	e02d      	b.n	80019ce <HAL_RCC_OscConfig+0x36e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x334>
 800197a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a69      	ldr	r2, [pc, #420]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	4b67      	ldr	r3, [pc, #412]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a66      	ldr	r2, [pc, #408]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	e01c      	b.n	80019ce <HAL_RCC_OscConfig+0x36e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d10c      	bne.n	80019b6 <HAL_RCC_OscConfig+0x356>
 800199c:	4b61      	ldr	r3, [pc, #388]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4a60      	ldr	r2, [pc, #384]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	6213      	str	r3, [r2, #32]
 80019a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	e00b      	b.n	80019ce <HAL_RCC_OscConfig+0x36e>
 80019b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	4b58      	ldr	r3, [pc, #352]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a57      	ldr	r2, [pc, #348]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d015      	beq.n	8001a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fb6b 	bl	80010b0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fb67 	bl	80010b0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0b1      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ee      	beq.n	80019de <HAL_RCC_OscConfig+0x37e>
 8001a00:	e014      	b.n	8001a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fb55 	bl	80010b0 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fb51 	bl	80010b0 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e09b      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a20:	4b40      	ldr	r3, [pc, #256]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b3c      	ldr	r3, [pc, #240]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a3b      	ldr	r2, [pc, #236]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8087 	beq.w	8001b56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a48:	4b36      	ldr	r3, [pc, #216]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d061      	beq.n	8001b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d146      	bne.n	8001aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b33      	ldr	r3, [pc, #204]	@ (8001b2c <HAL_RCC_OscConfig+0x4cc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fb25 	bl	80010b0 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff fb21 	bl	80010b0 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e06d      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a90:	d108      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4921      	ldr	r1, [pc, #132]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a19      	ldr	r1, [r3, #32]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	491b      	ldr	r1, [pc, #108]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff faf5 	bl	80010b0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff faf1 	bl	80010b0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e03d      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x46a>
 8001ae8:	e035      	b.n	8001b56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_RCC_OscConfig+0x4cc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fade 	bl	80010b0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff fada 	bl	80010b0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e026      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x498>
 8001b16:	e01e      	b.n	8001b56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e019      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_OscConfig+0x500>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0d0      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b6a      	ldr	r3, [pc, #424]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b67      	ldr	r3, [pc, #412]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4965      	ldr	r1, [pc, #404]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b63      	ldr	r3, [pc, #396]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0b8      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc0:	4b59      	ldr	r3, [pc, #356]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a58      	ldr	r2, [pc, #352]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd8:	4b53      	ldr	r3, [pc, #332]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4a52      	ldr	r2, [pc, #328]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be4:	4b50      	ldr	r3, [pc, #320]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	494d      	ldr	r1, [pc, #308]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d040      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b47      	ldr	r3, [pc, #284]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d115      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e07f      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b41      	ldr	r3, [pc, #260]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e073      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06b      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b39      	ldr	r3, [pc, #228]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4936      	ldr	r1, [pc, #216]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff fa2c 	bl	80010b0 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff fa28 	bl	80010b0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e053      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b27      	ldr	r3, [pc, #156]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d210      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4922      	ldr	r1, [pc, #136]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e032      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4916      	ldr	r1, [pc, #88]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	490e      	ldr	r1, [pc, #56]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cf2:	f000 f821 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	490a      	ldr	r1, [pc, #40]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	4a09      	ldr	r2, [pc, #36]	@ (8001d30 <HAL_RCC_ClockConfig+0x1cc>)
 8001d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_RCC_ClockConfig+0x1d0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f98a 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003df8 	.word	0x08003df8
 8001d30:	20000004 	.word	0x20000004
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x30>
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x36>
 8001d66:	e027      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6a:	613b      	str	r3, [r7, #16]
      break;
 8001d6c:	e027      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d010      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0c5b      	lsrs	r3, r3, #17
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	4a11      	ldr	r2, [pc, #68]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e004      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	613b      	str	r3, [r7, #16]
      break;
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dba:	613b      	str	r3, [r7, #16]
      break;
 8001dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbe:	693b      	ldr	r3, [r7, #16]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	08003e10 	.word	0x08003e10
 8001dd8:	08003e20 	.word	0x08003e20
 8001ddc:	003d0900 	.word	0x003d0900

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b02      	ldr	r3, [pc, #8]	@ (8001df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000004 	.word	0x20000004

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff2 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	@ (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08003e08 	.word	0x08003e08

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0adb      	lsrs	r3, r3, #11
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	@ (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08003e08 	.word	0x08003e08

08001e44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <RCC_Delay+0x34>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <RCC_Delay+0x38>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0a5b      	lsrs	r3, r3, #9
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e60:	bf00      	nop
  }
  while (Delay --);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	60fa      	str	r2, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f9      	bne.n	8001e60 <RCC_Delay+0x1c>
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	10624dd3 	.word	0x10624dd3

08001e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e041      	b.n	8001f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe ff1c 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f000 fd40 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d001      	beq.n	8001f38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e032      	b.n	8001f9e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a18      	ldr	r2, [pc, #96]	@ (8001fa8 <HAL_TIM_Base_Start+0x88>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_TIM_Base_Start+0x48>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f52:	d009      	beq.n	8001f68 <HAL_TIM_Base_Start+0x48>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <HAL_TIM_Base_Start+0x8c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_TIM_Base_Start+0x48>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a13      	ldr	r2, [pc, #76]	@ (8001fb0 <HAL_TIM_Base_Start+0x90>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d111      	bne.n	8001f8c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d010      	beq.n	8001f9c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8a:	e007      	b.n	8001f9c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40000800 	.word	0x40000800

08001fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e041      	b.n	800204a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f839 	bl	8002052 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 fca6 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_TIM_PWM_Start+0x24>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e022      	b.n	80020ce <HAL_TIM_PWM_Start+0x6a>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b04      	cmp	r3, #4
 800208c:	d109      	bne.n	80020a2 <HAL_TIM_PWM_Start+0x3e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	e015      	b.n	80020ce <HAL_TIM_PWM_Start+0x6a>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d109      	bne.n	80020bc <HAL_TIM_PWM_Start+0x58>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e008      	b.n	80020ce <HAL_TIM_PWM_Start+0x6a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e05e      	b.n	8002194 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_PWM_Start+0x82>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020e4:	e013      	b.n	800210e <HAL_TIM_PWM_Start+0xaa>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_PWM_Start+0x92>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020f4:	e00b      	b.n	800210e <HAL_TIM_PWM_Start+0xaa>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_PWM_Start+0xa2>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002104:	e003      	b.n	800210e <HAL_TIM_PWM_Start+0xaa>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fea0 	bl	8002e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1e      	ldr	r2, [pc, #120]	@ (800219c <HAL_TIM_PWM_Start+0x138>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d107      	bne.n	8002136 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002134:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a18      	ldr	r2, [pc, #96]	@ (800219c <HAL_TIM_PWM_Start+0x138>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00e      	beq.n	800215e <HAL_TIM_PWM_Start+0xfa>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002148:	d009      	beq.n	800215e <HAL_TIM_PWM_Start+0xfa>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <HAL_TIM_PWM_Start+0x13c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d004      	beq.n	800215e <HAL_TIM_PWM_Start+0xfa>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <HAL_TIM_PWM_Start+0x140>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d111      	bne.n	8002182 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b06      	cmp	r3, #6
 800216e:	d010      	beq.n	8002192 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002180:	e007      	b.n	8002192 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800

080021a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e093      	b.n	80022e4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe fdc1 	bl	8000d58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021ec:	f023 0307 	bic.w	r3, r3, #7
 80021f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3304      	adds	r3, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f000 fba1 	bl	8002944 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	4313      	orrs	r3, r2
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002248:	f023 030c 	bic.w	r3, r3, #12
 800224c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002254:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	4313      	orrs	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	011a      	lsls	r2, r3, #4
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	031b      	lsls	r3, r3, #12
 8002278:	4313      	orrs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002286:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	4313      	orrs	r3, r2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002304:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800230c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002314:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d110      	bne.n	800233e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002322:	7b7b      	ldrb	r3, [r7, #13]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d001      	beq.n	800232c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e069      	b.n	8002400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800233c:	e031      	b.n	80023a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d110      	bne.n	8002366 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002344:	7bbb      	ldrb	r3, [r7, #14]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d102      	bne.n	8002350 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800234a:	7b3b      	ldrb	r3, [r7, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d001      	beq.n	8002354 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e055      	b.n	8002400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002364:	e01d      	b.n	80023a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d108      	bne.n	800237e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800236c:	7bbb      	ldrb	r3, [r7, #14]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002372:	7b7b      	ldrb	r3, [r7, #13]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d102      	bne.n	800237e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002378:	7b3b      	ldrb	r3, [r7, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e03e      	b.n	8002400 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_TIM_Encoder_Start+0xc4>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d008      	beq.n	80023c0 <HAL_TIM_Encoder_Start+0xd4>
 80023ae:	e00f      	b.n	80023d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2201      	movs	r2, #1
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fd4f 	bl	8002e5c <TIM_CCxChannelCmd>
      break;
 80023be:	e016      	b.n	80023ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	2104      	movs	r1, #4
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fd47 	bl	8002e5c <TIM_CCxChannelCmd>
      break;
 80023ce:	e00e      	b.n	80023ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fd3f 	bl	8002e5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	2104      	movs	r1, #4
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fd38 	bl	8002e5c <TIM_CCxChannelCmd>
      break;
 80023ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0202 	mvn.w	r2, #2
 800243c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa5a 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa4d 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fa5c 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0204 	mvn.w	r2, #4
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa34 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa27 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa36 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d020      	beq.n	8002504 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01b      	beq.n	8002504 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0208 	mvn.w	r2, #8
 80024d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2204      	movs	r2, #4
 80024da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa0e 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 80024f0:	e005      	b.n	80024fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa01 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa10 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d020      	beq.n	8002550 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0210 	mvn.w	r2, #16
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2208      	movs	r2, #8
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9e8 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f9db 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f9ea 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0201 	mvn.w	r2, #1
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe f890 	bl	8000694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00c      	beq.n	8002598 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fd3e 	bl	8003014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00c      	beq.n	80025bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9ba 	bl	8002930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0220 	mvn.w	r2, #32
 80025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fd11 	bl	8003002 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002602:	2302      	movs	r3, #2
 8002604:	e0ae      	b.n	8002764 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b0c      	cmp	r3, #12
 8002612:	f200 809f 	bhi.w	8002754 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002616:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	08002651 	.word	0x08002651
 8002620:	08002755 	.word	0x08002755
 8002624:	08002755 	.word	0x08002755
 8002628:	08002755 	.word	0x08002755
 800262c:	08002691 	.word	0x08002691
 8002630:	08002755 	.word	0x08002755
 8002634:	08002755 	.word	0x08002755
 8002638:	08002755 	.word	0x08002755
 800263c:	080026d3 	.word	0x080026d3
 8002640:	08002755 	.word	0x08002755
 8002644:	08002755 	.word	0x08002755
 8002648:	08002755 	.word	0x08002755
 800264c:	08002713 	.word	0x08002713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f9e2 	bl	8002a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0208 	orr.w	r2, r2, #8
 800266a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0204 	bic.w	r2, r2, #4
 800267a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6999      	ldr	r1, [r3, #24]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	619a      	str	r2, [r3, #24]
      break;
 800268e:	e064      	b.n	800275a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fa28 	bl	8002aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6999      	ldr	r1, [r3, #24]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	021a      	lsls	r2, r3, #8
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	619a      	str	r2, [r3, #24]
      break;
 80026d0:	e043      	b.n	800275a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fa71 	bl	8002bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0208 	orr.w	r2, r2, #8
 80026ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0204 	bic.w	r2, r2, #4
 80026fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69d9      	ldr	r1, [r3, #28]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	61da      	str	r2, [r3, #28]
      break;
 8002710:	e023      	b.n	800275a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fabb 	bl	8002c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800272c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69da      	ldr	r2, [r3, #28]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69d9      	ldr	r1, [r3, #28]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	021a      	lsls	r2, r3, #8
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	61da      	str	r2, [r3, #28]
      break;
 8002752:	e002      	b.n	800275a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
      break;
 8002758:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002762:	7dfb      	ldrb	r3, [r7, #23]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_TIM_ConfigClockSource+0x1c>
 8002784:	2302      	movs	r3, #2
 8002786:	e0b4      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x186>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c0:	d03e      	beq.n	8002840 <HAL_TIM_ConfigClockSource+0xd4>
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c6:	f200 8087 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ce:	f000 8086 	beq.w	80028de <HAL_TIM_ConfigClockSource+0x172>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d6:	d87f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b70      	cmp	r3, #112	@ 0x70
 80027da:	d01a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0xa6>
 80027dc:	2b70      	cmp	r3, #112	@ 0x70
 80027de:	d87b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b60      	cmp	r3, #96	@ 0x60
 80027e2:	d050      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x11a>
 80027e4:	2b60      	cmp	r3, #96	@ 0x60
 80027e6:	d877      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b50      	cmp	r3, #80	@ 0x50
 80027ea:	d03c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xfa>
 80027ec:	2b50      	cmp	r3, #80	@ 0x50
 80027ee:	d873      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b40      	cmp	r3, #64	@ 0x40
 80027f2:	d058      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x13a>
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	d86f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b30      	cmp	r3, #48	@ 0x30
 80027fa:	d064      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	2b30      	cmp	r3, #48	@ 0x30
 80027fe:	d86b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d060      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d867      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d05a      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002810:	e062      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	f000 fafc 	bl	8002e1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
      break;
 800283e:	e04f      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	f000 fae5 	bl	8002e1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002862:	609a      	str	r2, [r3, #8]
      break;
 8002864:	e03c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	461a      	mov	r2, r3
 8002874:	f000 fa5c 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2150      	movs	r1, #80	@ 0x50
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fab3 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 8002884:	e02c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002892:	461a      	mov	r2, r3
 8002894:	f000 fa7a 	bl	8002d8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2160      	movs	r1, #96	@ 0x60
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 faa3 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 80028a4:	e01c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 fa3c 	bl	8002d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2140      	movs	r1, #64	@ 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa93 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f000 fa8a 	bl	8002dea <TIM_ITRx_SetConfig>
      break;
 80028d6:	e003      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
	...

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a2f      	ldr	r2, [pc, #188]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00b      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002962:	d007      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <TIM_Base_SetConfig+0xd4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a1c <TIM_Base_SetConfig+0xd8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00b      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <TIM_Base_SetConfig+0xd4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <TIM_Base_SetConfig+0xd8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d103      	bne.n	80029ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f023 0201 	bic.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f023 0201 	bic.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f023 0302 	bic.w	r3, r3, #2
 8002a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae8 <TIM_OC1_SetConfig+0xc8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10c      	bne.n	8002a96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f023 0308 	bic.w	r3, r3, #8
 8002a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <TIM_OC1_SetConfig+0xc8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d111      	bne.n	8002ac2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	621a      	str	r2, [r3, #32]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f023 0210 	bic.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0320 	bic.w	r3, r3, #32
 8002b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <TIM_OC2_SetConfig+0xd0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10d      	bne.n	8002b68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <TIM_OC2_SetConfig+0xd0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d113      	bne.n	8002b98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40012c00 	.word	0x40012c00

08002bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <TIM_OC3_SetConfig+0xd0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <TIM_OC3_SetConfig+0xd0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d113      	bne.n	8002c6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40012c00 	.word	0x40012c00

08002c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0f      	ldr	r2, [pc, #60]	@ (8002d2c <TIM_OC4_SetConfig+0x98>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40012c00 	.word	0x40012c00

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f023 030a 	bic.w	r3, r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f023 0210 	bic.w	r2, r3, #16
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	031b      	lsls	r3, r3, #12
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	621a      	str	r2, [r3, #32]
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f043 0307 	orr.w	r3, r3, #7
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	021a      	lsls	r2, r3, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	609a      	str	r2, [r3, #8]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2201      	movs	r2, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	621a      	str	r2, [r3, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e046      	b.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a16      	ldr	r2, [pc, #88]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f08:	d009      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a10      	ldr	r2, [pc, #64]	@ (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10c      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800

08002f60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e03d      	b.n	8002ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e042      	b.n	80030be <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd fef3 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2224      	movs	r2, #36	@ 0x24
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003068:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f972 	bl	8003354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800309e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b08a      	sub	sp, #40	@ 0x28
 80030ca:	af02      	add	r7, sp, #8
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d175      	bne.n	80031d2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_UART_Transmit+0x2c>
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06e      	b.n	80031d4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2221      	movs	r2, #33	@ 0x21
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003104:	f7fd ffd4 	bl	80010b0 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	88fa      	ldrh	r2, [r7, #6]
 800310e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311e:	d108      	bne.n	8003132 <HAL_UART_Transmit+0x6c>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	e003      	b.n	800313a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800313a:	e02e      	b.n	800319a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2200      	movs	r2, #0
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f848 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e03a      	b.n	80031d4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003172:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	3302      	adds	r3, #2
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e007      	b.n	800318c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1cb      	bne.n	800313c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	2140      	movs	r1, #64	@ 0x40
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f814 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e006      	b.n	80031d4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ec:	e03b      	b.n	8003266 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d037      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fd ff5b 	bl	80010b0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <UART_WaitOnFlagUntilTimeout+0x30>
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e03a      	b.n	8003286 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d023      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0x8a>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b80      	cmp	r3, #128	@ 0x80
 8003222:	d020      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b40      	cmp	r3, #64	@ 0x40
 8003228:	d01d      	beq.n	8003266 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d116      	bne.n	8003266 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f81d 	bl	800328e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2208      	movs	r2, #8
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	429a      	cmp	r2, r3
 8003282:	d0b4      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800328e:	b480      	push	{r7}
 8003290:	b095      	sub	sp, #84	@ 0x54
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80032b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e5      	bne.n	8003296 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3314      	adds	r3, #20
 80032d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e5      	bne.n	80032ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	2b01      	cmp	r3, #1
 8003304:	d119      	bne.n	800333a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	60bb      	str	r3, [r7, #8]
   return(result);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f023 0310 	bic.w	r3, r3, #16
 800331c:	647b      	str	r3, [r7, #68]	@ 0x44
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	330c      	adds	r3, #12
 8003324:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003326:	61ba      	str	r2, [r7, #24]
 8003328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6979      	ldr	r1, [r7, #20]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	613b      	str	r3, [r7, #16]
   return(result);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e5      	bne.n	8003306 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003348:	bf00      	nop
 800334a:	3754      	adds	r7, #84	@ 0x54
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800338e:	f023 030c 	bic.w	r3, r3, #12
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	430b      	orrs	r3, r1
 800339a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003468 <UART_SetConfig+0x114>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d103      	bne.n	80033c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033bc:	f7fe fd2e 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	e002      	b.n	80033ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033c4:	f7fe fd16 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80033c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009a      	lsls	r2, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	4a22      	ldr	r2, [pc, #136]	@ (800346c <UART_SetConfig+0x118>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	0119      	lsls	r1, r3, #4
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009a      	lsls	r2, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003400:	4b1a      	ldr	r3, [pc, #104]	@ (800346c <UART_SetConfig+0x118>)
 8003402:	fba3 0302 	umull	r0, r3, r3, r2
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2064      	movs	r0, #100	@ 0x64
 800340a:	fb00 f303 	mul.w	r3, r0, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	3332      	adds	r3, #50	@ 0x32
 8003414:	4a15      	ldr	r2, [pc, #84]	@ (800346c <UART_SetConfig+0x118>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003420:	4419      	add	r1, r3
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fbb2 f2f3 	udiv	r2, r2, r3
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <UART_SetConfig+0x118>)
 800343a:	fba3 0302 	umull	r0, r3, r3, r2
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2064      	movs	r0, #100	@ 0x64
 8003442:	fb00 f303 	mul.w	r3, r0, r3
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	3332      	adds	r3, #50	@ 0x32
 800344c:	4a07      	ldr	r2, [pc, #28]	@ (800346c <UART_SetConfig+0x118>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	f003 020f 	and.w	r2, r3, #15
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	440a      	add	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40013800 	.word	0x40013800
 800346c:	51eb851f 	.word	0x51eb851f

08003470 <siprintf>:
 8003470:	b40e      	push	{r1, r2, r3}
 8003472:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003476:	b500      	push	{lr}
 8003478:	b09c      	sub	sp, #112	@ 0x70
 800347a:	ab1d      	add	r3, sp, #116	@ 0x74
 800347c:	9002      	str	r0, [sp, #8]
 800347e:	9006      	str	r0, [sp, #24]
 8003480:	9107      	str	r1, [sp, #28]
 8003482:	9104      	str	r1, [sp, #16]
 8003484:	4808      	ldr	r0, [pc, #32]	@ (80034a8 <siprintf+0x38>)
 8003486:	4909      	ldr	r1, [pc, #36]	@ (80034ac <siprintf+0x3c>)
 8003488:	f853 2b04 	ldr.w	r2, [r3], #4
 800348c:	9105      	str	r1, [sp, #20]
 800348e:	6800      	ldr	r0, [r0, #0]
 8003490:	a902      	add	r1, sp, #8
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	f000 f992 	bl	80037bc <_svfiprintf_r>
 8003498:	2200      	movs	r2, #0
 800349a:	9b02      	ldr	r3, [sp, #8]
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	b01c      	add	sp, #112	@ 0x70
 80034a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034a4:	b003      	add	sp, #12
 80034a6:	4770      	bx	lr
 80034a8:	20000010 	.word	0x20000010
 80034ac:	ffff0208 	.word	0xffff0208

080034b0 <memset>:
 80034b0:	4603      	mov	r3, r0
 80034b2:	4402      	add	r2, r0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d100      	bne.n	80034ba <memset+0xa>
 80034b8:	4770      	bx	lr
 80034ba:	f803 1b01 	strb.w	r1, [r3], #1
 80034be:	e7f9      	b.n	80034b4 <memset+0x4>

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	@ (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000010 	.word	0x20000010

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	@ (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	@ (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f000 fc78 	bl	8003dd0 <_init>
 80034e0:	2600      	movs	r6, #0
 80034e2:	4d0a      	ldr	r5, [pc, #40]	@ (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08003e58 	.word	0x08003e58
 8003508:	08003e58 	.word	0x08003e58
 800350c:	08003e58 	.word	0x08003e58
 8003510:	08003e5c 	.word	0x08003e5c

08003514 <__retarget_lock_acquire_recursive>:
 8003514:	4770      	bx	lr

08003516 <__retarget_lock_release_recursive>:
 8003516:	4770      	bx	lr

08003518 <_free_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4605      	mov	r5, r0
 800351c:	2900      	cmp	r1, #0
 800351e:	d040      	beq.n	80035a2 <_free_r+0x8a>
 8003520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003524:	1f0c      	subs	r4, r1, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	bfb8      	it	lt
 800352a:	18e4      	addlt	r4, r4, r3
 800352c:	f000 f8de 	bl	80036ec <__malloc_lock>
 8003530:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <_free_r+0x8c>)
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	b933      	cbnz	r3, 8003544 <_free_r+0x2c>
 8003536:	6063      	str	r3, [r4, #4]
 8003538:	6014      	str	r4, [r2, #0]
 800353a:	4628      	mov	r0, r5
 800353c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003540:	f000 b8da 	b.w	80036f8 <__malloc_unlock>
 8003544:	42a3      	cmp	r3, r4
 8003546:	d908      	bls.n	800355a <_free_r+0x42>
 8003548:	6820      	ldr	r0, [r4, #0]
 800354a:	1821      	adds	r1, r4, r0
 800354c:	428b      	cmp	r3, r1
 800354e:	bf01      	itttt	eq
 8003550:	6819      	ldreq	r1, [r3, #0]
 8003552:	685b      	ldreq	r3, [r3, #4]
 8003554:	1809      	addeq	r1, r1, r0
 8003556:	6021      	streq	r1, [r4, #0]
 8003558:	e7ed      	b.n	8003536 <_free_r+0x1e>
 800355a:	461a      	mov	r2, r3
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	b10b      	cbz	r3, 8003564 <_free_r+0x4c>
 8003560:	42a3      	cmp	r3, r4
 8003562:	d9fa      	bls.n	800355a <_free_r+0x42>
 8003564:	6811      	ldr	r1, [r2, #0]
 8003566:	1850      	adds	r0, r2, r1
 8003568:	42a0      	cmp	r0, r4
 800356a:	d10b      	bne.n	8003584 <_free_r+0x6c>
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	4401      	add	r1, r0
 8003570:	1850      	adds	r0, r2, r1
 8003572:	4283      	cmp	r3, r0
 8003574:	6011      	str	r1, [r2, #0]
 8003576:	d1e0      	bne.n	800353a <_free_r+0x22>
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4408      	add	r0, r1
 800357e:	6010      	str	r0, [r2, #0]
 8003580:	6053      	str	r3, [r2, #4]
 8003582:	e7da      	b.n	800353a <_free_r+0x22>
 8003584:	d902      	bls.n	800358c <_free_r+0x74>
 8003586:	230c      	movs	r3, #12
 8003588:	602b      	str	r3, [r5, #0]
 800358a:	e7d6      	b.n	800353a <_free_r+0x22>
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	1821      	adds	r1, r4, r0
 8003590:	428b      	cmp	r3, r1
 8003592:	bf01      	itttt	eq
 8003594:	6819      	ldreq	r1, [r3, #0]
 8003596:	685b      	ldreq	r3, [r3, #4]
 8003598:	1809      	addeq	r1, r1, r0
 800359a:	6021      	streq	r1, [r4, #0]
 800359c:	6063      	str	r3, [r4, #4]
 800359e:	6054      	str	r4, [r2, #4]
 80035a0:	e7cb      	b.n	800353a <_free_r+0x22>
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
 80035a4:	200002f4 	.word	0x200002f4

080035a8 <sbrk_aligned>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	4e0f      	ldr	r6, [pc, #60]	@ (80035e8 <sbrk_aligned+0x40>)
 80035ac:	460c      	mov	r4, r1
 80035ae:	6831      	ldr	r1, [r6, #0]
 80035b0:	4605      	mov	r5, r0
 80035b2:	b911      	cbnz	r1, 80035ba <sbrk_aligned+0x12>
 80035b4:	f000 fbaa 	bl	8003d0c <_sbrk_r>
 80035b8:	6030      	str	r0, [r6, #0]
 80035ba:	4621      	mov	r1, r4
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 fba5 	bl	8003d0c <_sbrk_r>
 80035c2:	1c43      	adds	r3, r0, #1
 80035c4:	d103      	bne.n	80035ce <sbrk_aligned+0x26>
 80035c6:	f04f 34ff 	mov.w	r4, #4294967295
 80035ca:	4620      	mov	r0, r4
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
 80035ce:	1cc4      	adds	r4, r0, #3
 80035d0:	f024 0403 	bic.w	r4, r4, #3
 80035d4:	42a0      	cmp	r0, r4
 80035d6:	d0f8      	beq.n	80035ca <sbrk_aligned+0x22>
 80035d8:	1a21      	subs	r1, r4, r0
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 fb96 	bl	8003d0c <_sbrk_r>
 80035e0:	3001      	adds	r0, #1
 80035e2:	d1f2      	bne.n	80035ca <sbrk_aligned+0x22>
 80035e4:	e7ef      	b.n	80035c6 <sbrk_aligned+0x1e>
 80035e6:	bf00      	nop
 80035e8:	200002f0 	.word	0x200002f0

080035ec <_malloc_r>:
 80035ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f0:	1ccd      	adds	r5, r1, #3
 80035f2:	f025 0503 	bic.w	r5, r5, #3
 80035f6:	3508      	adds	r5, #8
 80035f8:	2d0c      	cmp	r5, #12
 80035fa:	bf38      	it	cc
 80035fc:	250c      	movcc	r5, #12
 80035fe:	2d00      	cmp	r5, #0
 8003600:	4606      	mov	r6, r0
 8003602:	db01      	blt.n	8003608 <_malloc_r+0x1c>
 8003604:	42a9      	cmp	r1, r5
 8003606:	d904      	bls.n	8003612 <_malloc_r+0x26>
 8003608:	230c      	movs	r3, #12
 800360a:	6033      	str	r3, [r6, #0]
 800360c:	2000      	movs	r0, #0
 800360e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003612:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036e8 <_malloc_r+0xfc>
 8003616:	f000 f869 	bl	80036ec <__malloc_lock>
 800361a:	f8d8 3000 	ldr.w	r3, [r8]
 800361e:	461c      	mov	r4, r3
 8003620:	bb44      	cbnz	r4, 8003674 <_malloc_r+0x88>
 8003622:	4629      	mov	r1, r5
 8003624:	4630      	mov	r0, r6
 8003626:	f7ff ffbf 	bl	80035a8 <sbrk_aligned>
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	4604      	mov	r4, r0
 800362e:	d158      	bne.n	80036e2 <_malloc_r+0xf6>
 8003630:	f8d8 4000 	ldr.w	r4, [r8]
 8003634:	4627      	mov	r7, r4
 8003636:	2f00      	cmp	r7, #0
 8003638:	d143      	bne.n	80036c2 <_malloc_r+0xd6>
 800363a:	2c00      	cmp	r4, #0
 800363c:	d04b      	beq.n	80036d6 <_malloc_r+0xea>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	4639      	mov	r1, r7
 8003642:	4630      	mov	r0, r6
 8003644:	eb04 0903 	add.w	r9, r4, r3
 8003648:	f000 fb60 	bl	8003d0c <_sbrk_r>
 800364c:	4581      	cmp	r9, r0
 800364e:	d142      	bne.n	80036d6 <_malloc_r+0xea>
 8003650:	6821      	ldr	r1, [r4, #0]
 8003652:	4630      	mov	r0, r6
 8003654:	1a6d      	subs	r5, r5, r1
 8003656:	4629      	mov	r1, r5
 8003658:	f7ff ffa6 	bl	80035a8 <sbrk_aligned>
 800365c:	3001      	adds	r0, #1
 800365e:	d03a      	beq.n	80036d6 <_malloc_r+0xea>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	442b      	add	r3, r5
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	f8d8 3000 	ldr.w	r3, [r8]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	bb62      	cbnz	r2, 80036c8 <_malloc_r+0xdc>
 800366e:	f8c8 7000 	str.w	r7, [r8]
 8003672:	e00f      	b.n	8003694 <_malloc_r+0xa8>
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	1b52      	subs	r2, r2, r5
 8003678:	d420      	bmi.n	80036bc <_malloc_r+0xd0>
 800367a:	2a0b      	cmp	r2, #11
 800367c:	d917      	bls.n	80036ae <_malloc_r+0xc2>
 800367e:	1961      	adds	r1, r4, r5
 8003680:	42a3      	cmp	r3, r4
 8003682:	6025      	str	r5, [r4, #0]
 8003684:	bf18      	it	ne
 8003686:	6059      	strne	r1, [r3, #4]
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	bf08      	it	eq
 800368c:	f8c8 1000 	streq.w	r1, [r8]
 8003690:	5162      	str	r2, [r4, r5]
 8003692:	604b      	str	r3, [r1, #4]
 8003694:	4630      	mov	r0, r6
 8003696:	f000 f82f 	bl	80036f8 <__malloc_unlock>
 800369a:	f104 000b 	add.w	r0, r4, #11
 800369e:	1d23      	adds	r3, r4, #4
 80036a0:	f020 0007 	bic.w	r0, r0, #7
 80036a4:	1ac2      	subs	r2, r0, r3
 80036a6:	bf1c      	itt	ne
 80036a8:	1a1b      	subne	r3, r3, r0
 80036aa:	50a3      	strne	r3, [r4, r2]
 80036ac:	e7af      	b.n	800360e <_malloc_r+0x22>
 80036ae:	6862      	ldr	r2, [r4, #4]
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	bf0c      	ite	eq
 80036b4:	f8c8 2000 	streq.w	r2, [r8]
 80036b8:	605a      	strne	r2, [r3, #4]
 80036ba:	e7eb      	b.n	8003694 <_malloc_r+0xa8>
 80036bc:	4623      	mov	r3, r4
 80036be:	6864      	ldr	r4, [r4, #4]
 80036c0:	e7ae      	b.n	8003620 <_malloc_r+0x34>
 80036c2:	463c      	mov	r4, r7
 80036c4:	687f      	ldr	r7, [r7, #4]
 80036c6:	e7b6      	b.n	8003636 <_malloc_r+0x4a>
 80036c8:	461a      	mov	r2, r3
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	42a3      	cmp	r3, r4
 80036ce:	d1fb      	bne.n	80036c8 <_malloc_r+0xdc>
 80036d0:	2300      	movs	r3, #0
 80036d2:	6053      	str	r3, [r2, #4]
 80036d4:	e7de      	b.n	8003694 <_malloc_r+0xa8>
 80036d6:	230c      	movs	r3, #12
 80036d8:	4630      	mov	r0, r6
 80036da:	6033      	str	r3, [r6, #0]
 80036dc:	f000 f80c 	bl	80036f8 <__malloc_unlock>
 80036e0:	e794      	b.n	800360c <_malloc_r+0x20>
 80036e2:	6005      	str	r5, [r0, #0]
 80036e4:	e7d6      	b.n	8003694 <_malloc_r+0xa8>
 80036e6:	bf00      	nop
 80036e8:	200002f4 	.word	0x200002f4

080036ec <__malloc_lock>:
 80036ec:	4801      	ldr	r0, [pc, #4]	@ (80036f4 <__malloc_lock+0x8>)
 80036ee:	f7ff bf11 	b.w	8003514 <__retarget_lock_acquire_recursive>
 80036f2:	bf00      	nop
 80036f4:	200002ec 	.word	0x200002ec

080036f8 <__malloc_unlock>:
 80036f8:	4801      	ldr	r0, [pc, #4]	@ (8003700 <__malloc_unlock+0x8>)
 80036fa:	f7ff bf0c 	b.w	8003516 <__retarget_lock_release_recursive>
 80036fe:	bf00      	nop
 8003700:	200002ec 	.word	0x200002ec

08003704 <__ssputs_r>:
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	461f      	mov	r7, r3
 800370a:	688e      	ldr	r6, [r1, #8]
 800370c:	4682      	mov	sl, r0
 800370e:	42be      	cmp	r6, r7
 8003710:	460c      	mov	r4, r1
 8003712:	4690      	mov	r8, r2
 8003714:	680b      	ldr	r3, [r1, #0]
 8003716:	d82d      	bhi.n	8003774 <__ssputs_r+0x70>
 8003718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800371c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003720:	d026      	beq.n	8003770 <__ssputs_r+0x6c>
 8003722:	6965      	ldr	r5, [r4, #20]
 8003724:	6909      	ldr	r1, [r1, #16]
 8003726:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800372a:	eba3 0901 	sub.w	r9, r3, r1
 800372e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003732:	1c7b      	adds	r3, r7, #1
 8003734:	444b      	add	r3, r9
 8003736:	106d      	asrs	r5, r5, #1
 8003738:	429d      	cmp	r5, r3
 800373a:	bf38      	it	cc
 800373c:	461d      	movcc	r5, r3
 800373e:	0553      	lsls	r3, r2, #21
 8003740:	d527      	bpl.n	8003792 <__ssputs_r+0x8e>
 8003742:	4629      	mov	r1, r5
 8003744:	f7ff ff52 	bl	80035ec <_malloc_r>
 8003748:	4606      	mov	r6, r0
 800374a:	b360      	cbz	r0, 80037a6 <__ssputs_r+0xa2>
 800374c:	464a      	mov	r2, r9
 800374e:	6921      	ldr	r1, [r4, #16]
 8003750:	f000 fafa 	bl	8003d48 <memcpy>
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800375a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800375e:	81a3      	strh	r3, [r4, #12]
 8003760:	6126      	str	r6, [r4, #16]
 8003762:	444e      	add	r6, r9
 8003764:	6026      	str	r6, [r4, #0]
 8003766:	463e      	mov	r6, r7
 8003768:	6165      	str	r5, [r4, #20]
 800376a:	eba5 0509 	sub.w	r5, r5, r9
 800376e:	60a5      	str	r5, [r4, #8]
 8003770:	42be      	cmp	r6, r7
 8003772:	d900      	bls.n	8003776 <__ssputs_r+0x72>
 8003774:	463e      	mov	r6, r7
 8003776:	4632      	mov	r2, r6
 8003778:	4641      	mov	r1, r8
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	f000 faac 	bl	8003cd8 <memmove>
 8003780:	2000      	movs	r0, #0
 8003782:	68a3      	ldr	r3, [r4, #8]
 8003784:	1b9b      	subs	r3, r3, r6
 8003786:	60a3      	str	r3, [r4, #8]
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	4433      	add	r3, r6
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003792:	462a      	mov	r2, r5
 8003794:	f000 fae6 	bl	8003d64 <_realloc_r>
 8003798:	4606      	mov	r6, r0
 800379a:	2800      	cmp	r0, #0
 800379c:	d1e0      	bne.n	8003760 <__ssputs_r+0x5c>
 800379e:	4650      	mov	r0, sl
 80037a0:	6921      	ldr	r1, [r4, #16]
 80037a2:	f7ff feb9 	bl	8003518 <_free_r>
 80037a6:	230c      	movs	r3, #12
 80037a8:	f8ca 3000 	str.w	r3, [sl]
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f04f 30ff 	mov.w	r0, #4294967295
 80037b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037b6:	81a3      	strh	r3, [r4, #12]
 80037b8:	e7e9      	b.n	800378e <__ssputs_r+0x8a>
	...

080037bc <_svfiprintf_r>:
 80037bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c0:	4698      	mov	r8, r3
 80037c2:	898b      	ldrh	r3, [r1, #12]
 80037c4:	4607      	mov	r7, r0
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	460d      	mov	r5, r1
 80037ca:	4614      	mov	r4, r2
 80037cc:	b09d      	sub	sp, #116	@ 0x74
 80037ce:	d510      	bpl.n	80037f2 <_svfiprintf_r+0x36>
 80037d0:	690b      	ldr	r3, [r1, #16]
 80037d2:	b973      	cbnz	r3, 80037f2 <_svfiprintf_r+0x36>
 80037d4:	2140      	movs	r1, #64	@ 0x40
 80037d6:	f7ff ff09 	bl	80035ec <_malloc_r>
 80037da:	6028      	str	r0, [r5, #0]
 80037dc:	6128      	str	r0, [r5, #16]
 80037de:	b930      	cbnz	r0, 80037ee <_svfiprintf_r+0x32>
 80037e0:	230c      	movs	r3, #12
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	b01d      	add	sp, #116	@ 0x74
 80037ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ee:	2340      	movs	r3, #64	@ 0x40
 80037f0:	616b      	str	r3, [r5, #20]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80037f6:	2320      	movs	r3, #32
 80037f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037fc:	2330      	movs	r3, #48	@ 0x30
 80037fe:	f04f 0901 	mov.w	r9, #1
 8003802:	f8cd 800c 	str.w	r8, [sp, #12]
 8003806:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80039a0 <_svfiprintf_r+0x1e4>
 800380a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800380e:	4623      	mov	r3, r4
 8003810:	469a      	mov	sl, r3
 8003812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003816:	b10a      	cbz	r2, 800381c <_svfiprintf_r+0x60>
 8003818:	2a25      	cmp	r2, #37	@ 0x25
 800381a:	d1f9      	bne.n	8003810 <_svfiprintf_r+0x54>
 800381c:	ebba 0b04 	subs.w	fp, sl, r4
 8003820:	d00b      	beq.n	800383a <_svfiprintf_r+0x7e>
 8003822:	465b      	mov	r3, fp
 8003824:	4622      	mov	r2, r4
 8003826:	4629      	mov	r1, r5
 8003828:	4638      	mov	r0, r7
 800382a:	f7ff ff6b 	bl	8003704 <__ssputs_r>
 800382e:	3001      	adds	r0, #1
 8003830:	f000 80a7 	beq.w	8003982 <_svfiprintf_r+0x1c6>
 8003834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003836:	445a      	add	r2, fp
 8003838:	9209      	str	r2, [sp, #36]	@ 0x24
 800383a:	f89a 3000 	ldrb.w	r3, [sl]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 809f 	beq.w	8003982 <_svfiprintf_r+0x1c6>
 8003844:	2300      	movs	r3, #0
 8003846:	f04f 32ff 	mov.w	r2, #4294967295
 800384a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800384e:	f10a 0a01 	add.w	sl, sl, #1
 8003852:	9304      	str	r3, [sp, #16]
 8003854:	9307      	str	r3, [sp, #28]
 8003856:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800385a:	931a      	str	r3, [sp, #104]	@ 0x68
 800385c:	4654      	mov	r4, sl
 800385e:	2205      	movs	r2, #5
 8003860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003864:	484e      	ldr	r0, [pc, #312]	@ (80039a0 <_svfiprintf_r+0x1e4>)
 8003866:	f000 fa61 	bl	8003d2c <memchr>
 800386a:	9a04      	ldr	r2, [sp, #16]
 800386c:	b9d8      	cbnz	r0, 80038a6 <_svfiprintf_r+0xea>
 800386e:	06d0      	lsls	r0, r2, #27
 8003870:	bf44      	itt	mi
 8003872:	2320      	movmi	r3, #32
 8003874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003878:	0711      	lsls	r1, r2, #28
 800387a:	bf44      	itt	mi
 800387c:	232b      	movmi	r3, #43	@ 0x2b
 800387e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003882:	f89a 3000 	ldrb.w	r3, [sl]
 8003886:	2b2a      	cmp	r3, #42	@ 0x2a
 8003888:	d015      	beq.n	80038b6 <_svfiprintf_r+0xfa>
 800388a:	4654      	mov	r4, sl
 800388c:	2000      	movs	r0, #0
 800388e:	f04f 0c0a 	mov.w	ip, #10
 8003892:	9a07      	ldr	r2, [sp, #28]
 8003894:	4621      	mov	r1, r4
 8003896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800389a:	3b30      	subs	r3, #48	@ 0x30
 800389c:	2b09      	cmp	r3, #9
 800389e:	d94b      	bls.n	8003938 <_svfiprintf_r+0x17c>
 80038a0:	b1b0      	cbz	r0, 80038d0 <_svfiprintf_r+0x114>
 80038a2:	9207      	str	r2, [sp, #28]
 80038a4:	e014      	b.n	80038d0 <_svfiprintf_r+0x114>
 80038a6:	eba0 0308 	sub.w	r3, r0, r8
 80038aa:	fa09 f303 	lsl.w	r3, r9, r3
 80038ae:	4313      	orrs	r3, r2
 80038b0:	46a2      	mov	sl, r4
 80038b2:	9304      	str	r3, [sp, #16]
 80038b4:	e7d2      	b.n	800385c <_svfiprintf_r+0xa0>
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	1d19      	adds	r1, r3, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	9103      	str	r1, [sp, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bfbb      	ittet	lt
 80038c2:	425b      	neglt	r3, r3
 80038c4:	f042 0202 	orrlt.w	r2, r2, #2
 80038c8:	9307      	strge	r3, [sp, #28]
 80038ca:	9307      	strlt	r3, [sp, #28]
 80038cc:	bfb8      	it	lt
 80038ce:	9204      	strlt	r2, [sp, #16]
 80038d0:	7823      	ldrb	r3, [r4, #0]
 80038d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80038d4:	d10a      	bne.n	80038ec <_svfiprintf_r+0x130>
 80038d6:	7863      	ldrb	r3, [r4, #1]
 80038d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80038da:	d132      	bne.n	8003942 <_svfiprintf_r+0x186>
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	3402      	adds	r4, #2
 80038e0:	1d1a      	adds	r2, r3, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	9203      	str	r2, [sp, #12]
 80038e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038ea:	9305      	str	r3, [sp, #20]
 80038ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80039a4 <_svfiprintf_r+0x1e8>
 80038f0:	2203      	movs	r2, #3
 80038f2:	4650      	mov	r0, sl
 80038f4:	7821      	ldrb	r1, [r4, #0]
 80038f6:	f000 fa19 	bl	8003d2c <memchr>
 80038fa:	b138      	cbz	r0, 800390c <_svfiprintf_r+0x150>
 80038fc:	2240      	movs	r2, #64	@ 0x40
 80038fe:	9b04      	ldr	r3, [sp, #16]
 8003900:	eba0 000a 	sub.w	r0, r0, sl
 8003904:	4082      	lsls	r2, r0
 8003906:	4313      	orrs	r3, r2
 8003908:	3401      	adds	r4, #1
 800390a:	9304      	str	r3, [sp, #16]
 800390c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003910:	2206      	movs	r2, #6
 8003912:	4825      	ldr	r0, [pc, #148]	@ (80039a8 <_svfiprintf_r+0x1ec>)
 8003914:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003918:	f000 fa08 	bl	8003d2c <memchr>
 800391c:	2800      	cmp	r0, #0
 800391e:	d036      	beq.n	800398e <_svfiprintf_r+0x1d2>
 8003920:	4b22      	ldr	r3, [pc, #136]	@ (80039ac <_svfiprintf_r+0x1f0>)
 8003922:	bb1b      	cbnz	r3, 800396c <_svfiprintf_r+0x1b0>
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	3307      	adds	r3, #7
 8003928:	f023 0307 	bic.w	r3, r3, #7
 800392c:	3308      	adds	r3, #8
 800392e:	9303      	str	r3, [sp, #12]
 8003930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003932:	4433      	add	r3, r6
 8003934:	9309      	str	r3, [sp, #36]	@ 0x24
 8003936:	e76a      	b.n	800380e <_svfiprintf_r+0x52>
 8003938:	460c      	mov	r4, r1
 800393a:	2001      	movs	r0, #1
 800393c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003940:	e7a8      	b.n	8003894 <_svfiprintf_r+0xd8>
 8003942:	2300      	movs	r3, #0
 8003944:	f04f 0c0a 	mov.w	ip, #10
 8003948:	4619      	mov	r1, r3
 800394a:	3401      	adds	r4, #1
 800394c:	9305      	str	r3, [sp, #20]
 800394e:	4620      	mov	r0, r4
 8003950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003954:	3a30      	subs	r2, #48	@ 0x30
 8003956:	2a09      	cmp	r2, #9
 8003958:	d903      	bls.n	8003962 <_svfiprintf_r+0x1a6>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0c6      	beq.n	80038ec <_svfiprintf_r+0x130>
 800395e:	9105      	str	r1, [sp, #20]
 8003960:	e7c4      	b.n	80038ec <_svfiprintf_r+0x130>
 8003962:	4604      	mov	r4, r0
 8003964:	2301      	movs	r3, #1
 8003966:	fb0c 2101 	mla	r1, ip, r1, r2
 800396a:	e7f0      	b.n	800394e <_svfiprintf_r+0x192>
 800396c:	ab03      	add	r3, sp, #12
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	462a      	mov	r2, r5
 8003972:	4638      	mov	r0, r7
 8003974:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <_svfiprintf_r+0x1f4>)
 8003976:	a904      	add	r1, sp, #16
 8003978:	f3af 8000 	nop.w
 800397c:	1c42      	adds	r2, r0, #1
 800397e:	4606      	mov	r6, r0
 8003980:	d1d6      	bne.n	8003930 <_svfiprintf_r+0x174>
 8003982:	89ab      	ldrh	r3, [r5, #12]
 8003984:	065b      	lsls	r3, r3, #25
 8003986:	f53f af2d 	bmi.w	80037e4 <_svfiprintf_r+0x28>
 800398a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800398c:	e72c      	b.n	80037e8 <_svfiprintf_r+0x2c>
 800398e:	ab03      	add	r3, sp, #12
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	462a      	mov	r2, r5
 8003994:	4638      	mov	r0, r7
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <_svfiprintf_r+0x1f4>)
 8003998:	a904      	add	r1, sp, #16
 800399a:	f000 f87d 	bl	8003a98 <_printf_i>
 800399e:	e7ed      	b.n	800397c <_svfiprintf_r+0x1c0>
 80039a0:	08003e22 	.word	0x08003e22
 80039a4:	08003e28 	.word	0x08003e28
 80039a8:	08003e2c 	.word	0x08003e2c
 80039ac:	00000000 	.word	0x00000000
 80039b0:	08003705 	.word	0x08003705

080039b4 <_printf_common>:
 80039b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b8:	4616      	mov	r6, r2
 80039ba:	4698      	mov	r8, r3
 80039bc:	688a      	ldr	r2, [r1, #8]
 80039be:	690b      	ldr	r3, [r1, #16]
 80039c0:	4607      	mov	r7, r0
 80039c2:	4293      	cmp	r3, r2
 80039c4:	bfb8      	it	lt
 80039c6:	4613      	movlt	r3, r2
 80039c8:	6033      	str	r3, [r6, #0]
 80039ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039ce:	460c      	mov	r4, r1
 80039d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039d4:	b10a      	cbz	r2, 80039da <_printf_common+0x26>
 80039d6:	3301      	adds	r3, #1
 80039d8:	6033      	str	r3, [r6, #0]
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	0699      	lsls	r1, r3, #26
 80039de:	bf42      	ittt	mi
 80039e0:	6833      	ldrmi	r3, [r6, #0]
 80039e2:	3302      	addmi	r3, #2
 80039e4:	6033      	strmi	r3, [r6, #0]
 80039e6:	6825      	ldr	r5, [r4, #0]
 80039e8:	f015 0506 	ands.w	r5, r5, #6
 80039ec:	d106      	bne.n	80039fc <_printf_common+0x48>
 80039ee:	f104 0a19 	add.w	sl, r4, #25
 80039f2:	68e3      	ldr	r3, [r4, #12]
 80039f4:	6832      	ldr	r2, [r6, #0]
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	42ab      	cmp	r3, r5
 80039fa:	dc2b      	bgt.n	8003a54 <_printf_common+0xa0>
 80039fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	3b00      	subs	r3, #0
 8003a04:	bf18      	it	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	0692      	lsls	r2, r2, #26
 8003a0a:	d430      	bmi.n	8003a6e <_printf_common+0xba>
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a14:	47c8      	blx	r9
 8003a16:	3001      	adds	r0, #1
 8003a18:	d023      	beq.n	8003a62 <_printf_common+0xae>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	6922      	ldr	r2, [r4, #16]
 8003a1e:	f003 0306 	and.w	r3, r3, #6
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	bf14      	ite	ne
 8003a26:	2500      	movne	r5, #0
 8003a28:	6833      	ldreq	r3, [r6, #0]
 8003a2a:	f04f 0600 	mov.w	r6, #0
 8003a2e:	bf08      	it	eq
 8003a30:	68e5      	ldreq	r5, [r4, #12]
 8003a32:	f104 041a 	add.w	r4, r4, #26
 8003a36:	bf08      	it	eq
 8003a38:	1aed      	subeq	r5, r5, r3
 8003a3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003a3e:	bf08      	it	eq
 8003a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bfc4      	itt	gt
 8003a48:	1a9b      	subgt	r3, r3, r2
 8003a4a:	18ed      	addgt	r5, r5, r3
 8003a4c:	42b5      	cmp	r5, r6
 8003a4e:	d11a      	bne.n	8003a86 <_printf_common+0xd2>
 8003a50:	2000      	movs	r0, #0
 8003a52:	e008      	b.n	8003a66 <_printf_common+0xb2>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4652      	mov	r2, sl
 8003a58:	4641      	mov	r1, r8
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	47c8      	blx	r9
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d103      	bne.n	8003a6a <_printf_common+0xb6>
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6a:	3501      	adds	r5, #1
 8003a6c:	e7c1      	b.n	80039f2 <_printf_common+0x3e>
 8003a6e:	2030      	movs	r0, #48	@ 0x30
 8003a70:	18e1      	adds	r1, r4, r3
 8003a72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a7c:	4422      	add	r2, r4
 8003a7e:	3302      	adds	r3, #2
 8003a80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a84:	e7c2      	b.n	8003a0c <_printf_common+0x58>
 8003a86:	2301      	movs	r3, #1
 8003a88:	4622      	mov	r2, r4
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	47c8      	blx	r9
 8003a90:	3001      	adds	r0, #1
 8003a92:	d0e6      	beq.n	8003a62 <_printf_common+0xae>
 8003a94:	3601      	adds	r6, #1
 8003a96:	e7d9      	b.n	8003a4c <_printf_common+0x98>

08003a98 <_printf_i>:
 8003a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	7e0f      	ldrb	r7, [r1, #24]
 8003a9e:	4691      	mov	r9, r2
 8003aa0:	2f78      	cmp	r7, #120	@ 0x78
 8003aa2:	4680      	mov	r8, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	469a      	mov	sl, r3
 8003aa8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003aaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003aae:	d807      	bhi.n	8003ac0 <_printf_i+0x28>
 8003ab0:	2f62      	cmp	r7, #98	@ 0x62
 8003ab2:	d80a      	bhi.n	8003aca <_printf_i+0x32>
 8003ab4:	2f00      	cmp	r7, #0
 8003ab6:	f000 80d3 	beq.w	8003c60 <_printf_i+0x1c8>
 8003aba:	2f58      	cmp	r7, #88	@ 0x58
 8003abc:	f000 80ba 	beq.w	8003c34 <_printf_i+0x19c>
 8003ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ac8:	e03a      	b.n	8003b40 <_printf_i+0xa8>
 8003aca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ace:	2b15      	cmp	r3, #21
 8003ad0:	d8f6      	bhi.n	8003ac0 <_printf_i+0x28>
 8003ad2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ad8 <_printf_i+0x40>)
 8003ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ad8:	08003b31 	.word	0x08003b31
 8003adc:	08003b45 	.word	0x08003b45
 8003ae0:	08003ac1 	.word	0x08003ac1
 8003ae4:	08003ac1 	.word	0x08003ac1
 8003ae8:	08003ac1 	.word	0x08003ac1
 8003aec:	08003ac1 	.word	0x08003ac1
 8003af0:	08003b45 	.word	0x08003b45
 8003af4:	08003ac1 	.word	0x08003ac1
 8003af8:	08003ac1 	.word	0x08003ac1
 8003afc:	08003ac1 	.word	0x08003ac1
 8003b00:	08003ac1 	.word	0x08003ac1
 8003b04:	08003c47 	.word	0x08003c47
 8003b08:	08003b6f 	.word	0x08003b6f
 8003b0c:	08003c01 	.word	0x08003c01
 8003b10:	08003ac1 	.word	0x08003ac1
 8003b14:	08003ac1 	.word	0x08003ac1
 8003b18:	08003c69 	.word	0x08003c69
 8003b1c:	08003ac1 	.word	0x08003ac1
 8003b20:	08003b6f 	.word	0x08003b6f
 8003b24:	08003ac1 	.word	0x08003ac1
 8003b28:	08003ac1 	.word	0x08003ac1
 8003b2c:	08003c09 	.word	0x08003c09
 8003b30:	6833      	ldr	r3, [r6, #0]
 8003b32:	1d1a      	adds	r2, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6032      	str	r2, [r6, #0]
 8003b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b40:	2301      	movs	r3, #1
 8003b42:	e09e      	b.n	8003c82 <_printf_i+0x1ea>
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	6820      	ldr	r0, [r4, #0]
 8003b48:	1d19      	adds	r1, r3, #4
 8003b4a:	6031      	str	r1, [r6, #0]
 8003b4c:	0606      	lsls	r6, r0, #24
 8003b4e:	d501      	bpl.n	8003b54 <_printf_i+0xbc>
 8003b50:	681d      	ldr	r5, [r3, #0]
 8003b52:	e003      	b.n	8003b5c <_printf_i+0xc4>
 8003b54:	0645      	lsls	r5, r0, #25
 8003b56:	d5fb      	bpl.n	8003b50 <_printf_i+0xb8>
 8003b58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	da03      	bge.n	8003b68 <_printf_i+0xd0>
 8003b60:	232d      	movs	r3, #45	@ 0x2d
 8003b62:	426d      	negs	r5, r5
 8003b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b68:	230a      	movs	r3, #10
 8003b6a:	4859      	ldr	r0, [pc, #356]	@ (8003cd0 <_printf_i+0x238>)
 8003b6c:	e011      	b.n	8003b92 <_printf_i+0xfa>
 8003b6e:	6821      	ldr	r1, [r4, #0]
 8003b70:	6833      	ldr	r3, [r6, #0]
 8003b72:	0608      	lsls	r0, r1, #24
 8003b74:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b78:	d402      	bmi.n	8003b80 <_printf_i+0xe8>
 8003b7a:	0649      	lsls	r1, r1, #25
 8003b7c:	bf48      	it	mi
 8003b7e:	b2ad      	uxthmi	r5, r5
 8003b80:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b82:	6033      	str	r3, [r6, #0]
 8003b84:	bf14      	ite	ne
 8003b86:	230a      	movne	r3, #10
 8003b88:	2308      	moveq	r3, #8
 8003b8a:	4851      	ldr	r0, [pc, #324]	@ (8003cd0 <_printf_i+0x238>)
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b92:	6866      	ldr	r6, [r4, #4]
 8003b94:	2e00      	cmp	r6, #0
 8003b96:	bfa8      	it	ge
 8003b98:	6821      	ldrge	r1, [r4, #0]
 8003b9a:	60a6      	str	r6, [r4, #8]
 8003b9c:	bfa4      	itt	ge
 8003b9e:	f021 0104 	bicge.w	r1, r1, #4
 8003ba2:	6021      	strge	r1, [r4, #0]
 8003ba4:	b90d      	cbnz	r5, 8003baa <_printf_i+0x112>
 8003ba6:	2e00      	cmp	r6, #0
 8003ba8:	d04b      	beq.n	8003c42 <_printf_i+0x1aa>
 8003baa:	4616      	mov	r6, r2
 8003bac:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bb0:	fb03 5711 	mls	r7, r3, r1, r5
 8003bb4:	5dc7      	ldrb	r7, [r0, r7]
 8003bb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bba:	462f      	mov	r7, r5
 8003bbc:	42bb      	cmp	r3, r7
 8003bbe:	460d      	mov	r5, r1
 8003bc0:	d9f4      	bls.n	8003bac <_printf_i+0x114>
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d10b      	bne.n	8003bde <_printf_i+0x146>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	07df      	lsls	r7, r3, #31
 8003bca:	d508      	bpl.n	8003bde <_printf_i+0x146>
 8003bcc:	6923      	ldr	r3, [r4, #16]
 8003bce:	6861      	ldr	r1, [r4, #4]
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	bfde      	ittt	le
 8003bd4:	2330      	movle	r3, #48	@ 0x30
 8003bd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bde:	1b92      	subs	r2, r2, r6
 8003be0:	6122      	str	r2, [r4, #16]
 8003be2:	464b      	mov	r3, r9
 8003be4:	4621      	mov	r1, r4
 8003be6:	4640      	mov	r0, r8
 8003be8:	f8cd a000 	str.w	sl, [sp]
 8003bec:	aa03      	add	r2, sp, #12
 8003bee:	f7ff fee1 	bl	80039b4 <_printf_common>
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d14a      	bne.n	8003c8c <_printf_i+0x1f4>
 8003bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfa:	b004      	add	sp, #16
 8003bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	f043 0320 	orr.w	r3, r3, #32
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	2778      	movs	r7, #120	@ 0x78
 8003c0a:	4832      	ldr	r0, [pc, #200]	@ (8003cd4 <_printf_i+0x23c>)
 8003c0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	6831      	ldr	r1, [r6, #0]
 8003c14:	061f      	lsls	r7, r3, #24
 8003c16:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c1a:	d402      	bmi.n	8003c22 <_printf_i+0x18a>
 8003c1c:	065f      	lsls	r7, r3, #25
 8003c1e:	bf48      	it	mi
 8003c20:	b2ad      	uxthmi	r5, r5
 8003c22:	6031      	str	r1, [r6, #0]
 8003c24:	07d9      	lsls	r1, r3, #31
 8003c26:	bf44      	itt	mi
 8003c28:	f043 0320 	orrmi.w	r3, r3, #32
 8003c2c:	6023      	strmi	r3, [r4, #0]
 8003c2e:	b11d      	cbz	r5, 8003c38 <_printf_i+0x1a0>
 8003c30:	2310      	movs	r3, #16
 8003c32:	e7ab      	b.n	8003b8c <_printf_i+0xf4>
 8003c34:	4826      	ldr	r0, [pc, #152]	@ (8003cd0 <_printf_i+0x238>)
 8003c36:	e7e9      	b.n	8003c0c <_printf_i+0x174>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	f023 0320 	bic.w	r3, r3, #32
 8003c3e:	6023      	str	r3, [r4, #0]
 8003c40:	e7f6      	b.n	8003c30 <_printf_i+0x198>
 8003c42:	4616      	mov	r6, r2
 8003c44:	e7bd      	b.n	8003bc2 <_printf_i+0x12a>
 8003c46:	6833      	ldr	r3, [r6, #0]
 8003c48:	6825      	ldr	r5, [r4, #0]
 8003c4a:	1d18      	adds	r0, r3, #4
 8003c4c:	6961      	ldr	r1, [r4, #20]
 8003c4e:	6030      	str	r0, [r6, #0]
 8003c50:	062e      	lsls	r6, r5, #24
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	d501      	bpl.n	8003c5a <_printf_i+0x1c2>
 8003c56:	6019      	str	r1, [r3, #0]
 8003c58:	e002      	b.n	8003c60 <_printf_i+0x1c8>
 8003c5a:	0668      	lsls	r0, r5, #25
 8003c5c:	d5fb      	bpl.n	8003c56 <_printf_i+0x1be>
 8003c5e:	8019      	strh	r1, [r3, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	4616      	mov	r6, r2
 8003c64:	6123      	str	r3, [r4, #16]
 8003c66:	e7bc      	b.n	8003be2 <_printf_i+0x14a>
 8003c68:	6833      	ldr	r3, [r6, #0]
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	1d1a      	adds	r2, r3, #4
 8003c6e:	6032      	str	r2, [r6, #0]
 8003c70:	681e      	ldr	r6, [r3, #0]
 8003c72:	6862      	ldr	r2, [r4, #4]
 8003c74:	4630      	mov	r0, r6
 8003c76:	f000 f859 	bl	8003d2c <memchr>
 8003c7a:	b108      	cbz	r0, 8003c80 <_printf_i+0x1e8>
 8003c7c:	1b80      	subs	r0, r0, r6
 8003c7e:	6060      	str	r0, [r4, #4]
 8003c80:	6863      	ldr	r3, [r4, #4]
 8003c82:	6123      	str	r3, [r4, #16]
 8003c84:	2300      	movs	r3, #0
 8003c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c8a:	e7aa      	b.n	8003be2 <_printf_i+0x14a>
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	4649      	mov	r1, r9
 8003c90:	4640      	mov	r0, r8
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	47d0      	blx	sl
 8003c96:	3001      	adds	r0, #1
 8003c98:	d0ad      	beq.n	8003bf6 <_printf_i+0x15e>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	079b      	lsls	r3, r3, #30
 8003c9e:	d413      	bmi.n	8003cc8 <_printf_i+0x230>
 8003ca0:	68e0      	ldr	r0, [r4, #12]
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	4298      	cmp	r0, r3
 8003ca6:	bfb8      	it	lt
 8003ca8:	4618      	movlt	r0, r3
 8003caa:	e7a6      	b.n	8003bfa <_printf_i+0x162>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4632      	mov	r2, r6
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	47d0      	blx	sl
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d09d      	beq.n	8003bf6 <_printf_i+0x15e>
 8003cba:	3501      	adds	r5, #1
 8003cbc:	68e3      	ldr	r3, [r4, #12]
 8003cbe:	9903      	ldr	r1, [sp, #12]
 8003cc0:	1a5b      	subs	r3, r3, r1
 8003cc2:	42ab      	cmp	r3, r5
 8003cc4:	dcf2      	bgt.n	8003cac <_printf_i+0x214>
 8003cc6:	e7eb      	b.n	8003ca0 <_printf_i+0x208>
 8003cc8:	2500      	movs	r5, #0
 8003cca:	f104 0619 	add.w	r6, r4, #25
 8003cce:	e7f5      	b.n	8003cbc <_printf_i+0x224>
 8003cd0:	08003e33 	.word	0x08003e33
 8003cd4:	08003e44 	.word	0x08003e44

08003cd8 <memmove>:
 8003cd8:	4288      	cmp	r0, r1
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	eb01 0402 	add.w	r4, r1, r2
 8003ce0:	d902      	bls.n	8003ce8 <memmove+0x10>
 8003ce2:	4284      	cmp	r4, r0
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	d807      	bhi.n	8003cf8 <memmove+0x20>
 8003ce8:	1e43      	subs	r3, r0, #1
 8003cea:	42a1      	cmp	r1, r4
 8003cec:	d008      	beq.n	8003d00 <memmove+0x28>
 8003cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cf6:	e7f8      	b.n	8003cea <memmove+0x12>
 8003cf8:	4601      	mov	r1, r0
 8003cfa:	4402      	add	r2, r0
 8003cfc:	428a      	cmp	r2, r1
 8003cfe:	d100      	bne.n	8003d02 <memmove+0x2a>
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d0a:	e7f7      	b.n	8003cfc <memmove+0x24>

08003d0c <_sbrk_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4d05      	ldr	r5, [pc, #20]	@ (8003d28 <_sbrk_r+0x1c>)
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fd f910 	bl	8000f3c <_sbrk>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_sbrk_r+0x1a>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_sbrk_r+0x1a>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	200002e8 	.word	0x200002e8

08003d2c <memchr>:
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	b2c9      	uxtb	r1, r1
 8003d32:	4402      	add	r2, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	d101      	bne.n	8003d3e <memchr+0x12>
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e003      	b.n	8003d46 <memchr+0x1a>
 8003d3e:	7804      	ldrb	r4, [r0, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	428c      	cmp	r4, r1
 8003d44:	d1f6      	bne.n	8003d34 <memchr+0x8>
 8003d46:	bd10      	pop	{r4, pc}

08003d48 <memcpy>:
 8003d48:	440a      	add	r2, r1
 8003d4a:	4291      	cmp	r1, r2
 8003d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d50:	d100      	bne.n	8003d54 <memcpy+0xc>
 8003d52:	4770      	bx	lr
 8003d54:	b510      	push	{r4, lr}
 8003d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d5a:	4291      	cmp	r1, r2
 8003d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d60:	d1f9      	bne.n	8003d56 <memcpy+0xe>
 8003d62:	bd10      	pop	{r4, pc}

08003d64 <_realloc_r>:
 8003d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	4680      	mov	r8, r0
 8003d6a:	4615      	mov	r5, r2
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	b921      	cbnz	r1, 8003d7a <_realloc_r+0x16>
 8003d70:	4611      	mov	r1, r2
 8003d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d76:	f7ff bc39 	b.w	80035ec <_malloc_r>
 8003d7a:	b92a      	cbnz	r2, 8003d88 <_realloc_r+0x24>
 8003d7c:	f7ff fbcc 	bl	8003518 <_free_r>
 8003d80:	2400      	movs	r4, #0
 8003d82:	4620      	mov	r0, r4
 8003d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d88:	f000 f81a 	bl	8003dc0 <_malloc_usable_size_r>
 8003d8c:	4285      	cmp	r5, r0
 8003d8e:	4606      	mov	r6, r0
 8003d90:	d802      	bhi.n	8003d98 <_realloc_r+0x34>
 8003d92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d96:	d8f4      	bhi.n	8003d82 <_realloc_r+0x1e>
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	f7ff fc26 	bl	80035ec <_malloc_r>
 8003da0:	4607      	mov	r7, r0
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d0ec      	beq.n	8003d80 <_realloc_r+0x1c>
 8003da6:	42b5      	cmp	r5, r6
 8003da8:	462a      	mov	r2, r5
 8003daa:	4621      	mov	r1, r4
 8003dac:	bf28      	it	cs
 8003dae:	4632      	movcs	r2, r6
 8003db0:	f7ff ffca 	bl	8003d48 <memcpy>
 8003db4:	4621      	mov	r1, r4
 8003db6:	4640      	mov	r0, r8
 8003db8:	f7ff fbae 	bl	8003518 <_free_r>
 8003dbc:	463c      	mov	r4, r7
 8003dbe:	e7e0      	b.n	8003d82 <_realloc_r+0x1e>

08003dc0 <_malloc_usable_size_r>:
 8003dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc4:	1f18      	subs	r0, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bfbc      	itt	lt
 8003dca:	580b      	ldrlt	r3, [r1, r0]
 8003dcc:	18c0      	addlt	r0, r0, r3
 8003dce:	4770      	bx	lr

08003dd0 <_init>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr

08003ddc <_fini>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr
