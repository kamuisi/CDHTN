
sensor_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003cbc  08003cbc  00004cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d54  08003d54  000050a0  2**0
                  CONTENTS
  4 .ARM          00000000  08003d54  08003d54  000050a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d54  08003d54  000050a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08003d5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200000a0  08003dfc  000050a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003dfc  00005318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d01d  00000000  00000000  000050c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2f  00000000  00000000  000120e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00013e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3e  00000000  00000000  00014b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eb4  00000000  00000000  0001556e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e06d  00000000  00000000  0002d422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cea4  00000000  00000000  0003b48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  000c8378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000cbfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ca4 	.word	0x08003ca4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08003ca4 	.word	0x08003ca4

0800014c <Send_SF_Read>:
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void Send_SF_Read(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	TxData[0] = (SF << 4) | 0x3;
 8000150:	4b09      	ldr	r3, [pc, #36]	@ (8000178 <Send_SF_Read+0x2c>)
 8000152:	2203      	movs	r2, #3
 8000154:	701a      	strb	r2, [r3, #0]
	TxData[1] = ReadDataByLocalIdentifier_Request_SID;
 8000156:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <Send_SF_Read+0x2c>)
 8000158:	2222      	movs	r2, #34	@ 0x22
 800015a:	705a      	strb	r2, [r3, #1]
	TxData[2] = RecordDataIdentifier_High_Byte;
 800015c:	4b06      	ldr	r3, [pc, #24]	@ (8000178 <Send_SF_Read+0x2c>)
 800015e:	2201      	movs	r2, #1
 8000160:	709a      	strb	r2, [r3, #2]
	TxData[3] = RecordDataIdentifier_Low_Byte;
 8000162:	4b05      	ldr	r3, [pc, #20]	@ (8000178 <Send_SF_Read+0x2c>)
 8000164:	2223      	movs	r2, #35	@ 0x23
 8000166:	70da      	strb	r2, [r3, #3]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <Send_SF_Read+0x30>)
 800016a:	4a03      	ldr	r2, [pc, #12]	@ (8000178 <Send_SF_Read+0x2c>)
 800016c:	4904      	ldr	r1, [pc, #16]	@ (8000180 <Send_SF_Read+0x34>)
 800016e:	4805      	ldr	r0, [pc, #20]	@ (8000184 <Send_SF_Read+0x38>)
 8000170:	f000 ffca 	bl	8001108 <HAL_CAN_AddTxMessage>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	20000198 	.word	0x20000198
 800017c:	200001a0 	.word	0x200001a0
 8000180:	20000000 	.word	0x20000000
 8000184:	200000bc 	.word	0x200000bc

08000188 <Read_Service_Handler>:

void Read_Service_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	if(RxData[2] == RecordDataIdentifier_High_Byte && RxData[3] == RecordDataIdentifier_Low_Byte)
 800018e:	4b0f      	ldr	r3, [pc, #60]	@ (80001cc <Read_Service_Handler+0x44>)
 8000190:	789b      	ldrb	r3, [r3, #2]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d115      	bne.n	80001c2 <Read_Service_Handler+0x3a>
 8000196:	4b0d      	ldr	r3, [pc, #52]	@ (80001cc <Read_Service_Handler+0x44>)
 8000198:	78db      	ldrb	r3, [r3, #3]
 800019a:	2b23      	cmp	r3, #35	@ 0x23
 800019c:	d111      	bne.n	80001c2 <Read_Service_Handler+0x3a>
	{
		uint8_t data[4] = {RxData[4], RxData[5], RxData[6], RxData[7]};
 800019e:	4b0b      	ldr	r3, [pc, #44]	@ (80001cc <Read_Service_Handler+0x44>)
 80001a0:	791b      	ldrb	r3, [r3, #4]
 80001a2:	713b      	strb	r3, [r7, #4]
 80001a4:	4b09      	ldr	r3, [pc, #36]	@ (80001cc <Read_Service_Handler+0x44>)
 80001a6:	795b      	ldrb	r3, [r3, #5]
 80001a8:	717b      	strb	r3, [r7, #5]
 80001aa:	4b08      	ldr	r3, [pc, #32]	@ (80001cc <Read_Service_Handler+0x44>)
 80001ac:	799b      	ldrb	r3, [r3, #6]
 80001ae:	71bb      	strb	r3, [r7, #6]
 80001b0:	4b06      	ldr	r3, [pc, #24]	@ (80001cc <Read_Service_Handler+0x44>)
 80001b2:	79db      	ldrb	r3, [r3, #7]
 80001b4:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart1, data, 5, 100);
 80001b6:	1d39      	adds	r1, r7, #4
 80001b8:	2364      	movs	r3, #100	@ 0x64
 80001ba:	2205      	movs	r2, #5
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <Read_Service_Handler+0x48>)
 80001be:	f002 feed 	bl	8002f9c <HAL_UART_Transmit>
	}
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000190 	.word	0x20000190
 80001d0:	2000012c 	.word	0x2000012c

080001d4 <Send_SF_Write>:

void Send_SF_Write(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	if(Access_flag)
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <Send_SF_Write+0x3c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d011      	beq.n	8000204 <Send_SF_Write+0x30>
	{
		TxData[0] = (SF << 4) | 0x3;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <Send_SF_Write+0x40>)
 80001e2:	2203      	movs	r2, #3
 80001e4:	701a      	strb	r2, [r3, #0]
		TxData[1] = WriteDataByLocalIdentifier_Request_SID;
 80001e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000214 <Send_SF_Write+0x40>)
 80001e8:	222e      	movs	r2, #46	@ 0x2e
 80001ea:	705a      	strb	r2, [r3, #1]
		TxData[2] = RecordDataIdentifier_High_Byte;
 80001ec:	4b09      	ldr	r3, [pc, #36]	@ (8000214 <Send_SF_Write+0x40>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	709a      	strb	r2, [r3, #2]
		TxData[3] = RecordDataIdentifier_Low_Byte;
 80001f2:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <Send_SF_Write+0x40>)
 80001f4:	2223      	movs	r2, #35	@ 0x23
 80001f6:	70da      	strb	r2, [r3, #3]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80001f8:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <Send_SF_Write+0x44>)
 80001fa:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <Send_SF_Write+0x40>)
 80001fc:	4907      	ldr	r1, [pc, #28]	@ (800021c <Send_SF_Write+0x48>)
 80001fe:	4808      	ldr	r0, [pc, #32]	@ (8000220 <Send_SF_Write+0x4c>)
 8000200:	f000 ff82 	bl	8001108 <HAL_CAN_AddTxMessage>
	}
	Access_flag = 0;
 8000204:	4b02      	ldr	r3, [pc, #8]	@ (8000210 <Send_SF_Write+0x3c>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	200001c4 	.word	0x200001c4
 8000214:	20000198 	.word	0x20000198
 8000218:	200001a0 	.word	0x200001a0
 800021c:	20000000 	.word	0x20000000
 8000220:	200000bc 	.word	0x200000bc

08000224 <Write_Service_Handler>:

void Write_Service_Handler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)"Write ok", 9, 100);
 8000228:	2364      	movs	r3, #100	@ 0x64
 800022a:	2209      	movs	r2, #9
 800022c:	4902      	ldr	r1, [pc, #8]	@ (8000238 <Write_Service_Handler+0x14>)
 800022e:	4803      	ldr	r0, [pc, #12]	@ (800023c <Write_Service_Handler+0x18>)
 8000230:	f002 feb4 	bl	8002f9c <HAL_UART_Transmit>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	08003cbc 	.word	0x08003cbc
 800023c:	2000012c 	.word	0x2000012c

08000240 <Send_SF_Security>:

void Send_SF_Security(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	TxData[0] = (SF << 4) | 0x2;
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <Send_SF_Security+0x28>)
 8000246:	2202      	movs	r2, #2
 8000248:	701a      	strb	r2, [r3, #0]
	TxData[1] = SecurityAccess_Request_SID;
 800024a:	4b07      	ldr	r3, [pc, #28]	@ (8000268 <Send_SF_Security+0x28>)
 800024c:	2227      	movs	r2, #39	@ 0x27
 800024e:	705a      	strb	r2, [r3, #1]
	TxData[2] = Security_SEED_level;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <Send_SF_Security+0x28>)
 8000252:	2201      	movs	r2, #1
 8000254:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000256:	4b05      	ldr	r3, [pc, #20]	@ (800026c <Send_SF_Security+0x2c>)
 8000258:	4a03      	ldr	r2, [pc, #12]	@ (8000268 <Send_SF_Security+0x28>)
 800025a:	4905      	ldr	r1, [pc, #20]	@ (8000270 <Send_SF_Security+0x30>)
 800025c:	4805      	ldr	r0, [pc, #20]	@ (8000274 <Send_SF_Security+0x34>)
 800025e:	f000 ff53 	bl	8001108 <HAL_CAN_AddTxMessage>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000198 	.word	0x20000198
 800026c:	200001a0 	.word	0x200001a0
 8000270:	20000000 	.word	0x20000000
 8000274:	200000bc 	.word	0x200000bc

08000278 <Send_CF_Security>:
	KEY_REMAIN = MAX_KEY - NEXT_KEY;

}

void Send_CF_Security(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
	TxData[0] = (CF << 4) | SN;
 800027e:	4b1d      	ldr	r3, [pc, #116]	@ (80002f4 <Send_CF_Security+0x7c>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <Send_CF_Security+0x80>)
 800028a:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < KEY_REMAIN || i < 8; i++)
 800028c:	2301      	movs	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	e010      	b.n	80002b4 <Send_CF_Security+0x3c>
	{
		TxData[i] = KEY[NEXT_KEY];
 8000292:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <Send_CF_Security+0x84>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a1a      	ldr	r2, [pc, #104]	@ (8000300 <Send_CF_Security+0x88>)
 8000298:	5cd1      	ldrb	r1, [r2, r3]
 800029a:	4a17      	ldr	r2, [pc, #92]	@ (80002f8 <Send_CF_Security+0x80>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4413      	add	r3, r2
 80002a0:	460a      	mov	r2, r1
 80002a2:	701a      	strb	r2, [r3, #0]
		NEXT_KEY++;
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <Send_CF_Security+0x84>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <Send_CF_Security+0x84>)
 80002ac:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < KEY_REMAIN || i < 8; i++)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <Send_CF_Security+0x8c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	dbe9      	blt.n	8000292 <Send_CF_Security+0x1a>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b07      	cmp	r3, #7
 80002c2:	dde6      	ble.n	8000292 <Send_CF_Security+0x1a>
	}
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80002c4:	4b10      	ldr	r3, [pc, #64]	@ (8000308 <Send_CF_Security+0x90>)
 80002c6:	4a0c      	ldr	r2, [pc, #48]	@ (80002f8 <Send_CF_Security+0x80>)
 80002c8:	4910      	ldr	r1, [pc, #64]	@ (800030c <Send_CF_Security+0x94>)
 80002ca:	4811      	ldr	r0, [pc, #68]	@ (8000310 <Send_CF_Security+0x98>)
 80002cc:	f000 ff1c 	bl	8001108 <HAL_CAN_AddTxMessage>
	SN += 1;
 80002d0:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <Send_CF_Security+0x7c>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <Send_CF_Security+0x7c>)
 80002da:	701a      	strb	r2, [r3, #0]
	KEY_REMAIN = MAX_KEY - NEXT_KEY;
 80002dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <Send_CF_Security+0x9c>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <Send_CF_Security+0x84>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a07      	ldr	r2, [pc, #28]	@ (8000304 <Send_CF_Security+0x8c>)
 80002e8:	6013      	str	r3, [r2, #0]
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	200001b8 	.word	0x200001b8
 80002f8:	20000198 	.word	0x20000198
 80002fc:	200001bc 	.word	0x200001bc
 8000300:	200001a8 	.word	0x200001a8
 8000304:	200001c0 	.word	0x200001c0
 8000308:	200001a0 	.word	0x200001a0
 800030c:	20000000 	.word	0x20000000
 8000310:	200000bc 	.word	0x200000bc
 8000314:	20000040 	.word	0x20000040

08000318 <Security_Handler>:

void Security_Handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	if(RxData[2] == Security_SEED_level)
 800031c:	4b52      	ldr	r3, [pc, #328]	@ (8000468 <Security_Handler+0x150>)
 800031e:	789b      	ldrb	r3, [r3, #2]
 8000320:	2b01      	cmp	r3, #1
 8000322:	f040 8091 	bne.w	8000448 <Security_Handler+0x130>
	{
		SEED[0] = RxData[3];
 8000326:	4b50      	ldr	r3, [pc, #320]	@ (8000468 <Security_Handler+0x150>)
 8000328:	78da      	ldrb	r2, [r3, #3]
 800032a:	4b50      	ldr	r3, [pc, #320]	@ (800046c <Security_Handler+0x154>)
 800032c:	701a      	strb	r2, [r3, #0]
		SEED[1] = RxData[4];
 800032e:	4b4e      	ldr	r3, [pc, #312]	@ (8000468 <Security_Handler+0x150>)
 8000330:	791a      	ldrb	r2, [r3, #4]
 8000332:	4b4e      	ldr	r3, [pc, #312]	@ (800046c <Security_Handler+0x154>)
 8000334:	705a      	strb	r2, [r3, #1]
		SEED[2] = RxData[5];
 8000336:	4b4c      	ldr	r3, [pc, #304]	@ (8000468 <Security_Handler+0x150>)
 8000338:	795a      	ldrb	r2, [r3, #5]
 800033a:	4b4c      	ldr	r3, [pc, #304]	@ (800046c <Security_Handler+0x154>)
 800033c:	709a      	strb	r2, [r3, #2]
		SEED[3] = RxData[6];
 800033e:	4b4a      	ldr	r3, [pc, #296]	@ (8000468 <Security_Handler+0x150>)
 8000340:	799a      	ldrb	r2, [r3, #6]
 8000342:	4b4a      	ldr	r3, [pc, #296]	@ (800046c <Security_Handler+0x154>)
 8000344:	70da      	strb	r2, [r3, #3]
		KEY[0] = SEED[0] ^ SEED[1];
 8000346:	4b49      	ldr	r3, [pc, #292]	@ (800046c <Security_Handler+0x154>)
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	4b48      	ldr	r3, [pc, #288]	@ (800046c <Security_Handler+0x154>)
 800034c:	785b      	ldrb	r3, [r3, #1]
 800034e:	4053      	eors	r3, r2
 8000350:	b2da      	uxtb	r2, r3
 8000352:	4b47      	ldr	r3, [pc, #284]	@ (8000470 <Security_Handler+0x158>)
 8000354:	701a      	strb	r2, [r3, #0]
		KEY[1] = SEED[1] + SEED[2];
 8000356:	4b45      	ldr	r3, [pc, #276]	@ (800046c <Security_Handler+0x154>)
 8000358:	785a      	ldrb	r2, [r3, #1]
 800035a:	4b44      	ldr	r3, [pc, #272]	@ (800046c <Security_Handler+0x154>)
 800035c:	789b      	ldrb	r3, [r3, #2]
 800035e:	4413      	add	r3, r2
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b43      	ldr	r3, [pc, #268]	@ (8000470 <Security_Handler+0x158>)
 8000364:	705a      	strb	r2, [r3, #1]
		KEY[2] = SEED[2] ^ SEED[3];
 8000366:	4b41      	ldr	r3, [pc, #260]	@ (800046c <Security_Handler+0x154>)
 8000368:	789a      	ldrb	r2, [r3, #2]
 800036a:	4b40      	ldr	r3, [pc, #256]	@ (800046c <Security_Handler+0x154>)
 800036c:	78db      	ldrb	r3, [r3, #3]
 800036e:	4053      	eors	r3, r2
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4b3f      	ldr	r3, [pc, #252]	@ (8000470 <Security_Handler+0x158>)
 8000374:	709a      	strb	r2, [r3, #2]
		KEY[3] = SEED[3] + SEED[0];
 8000376:	4b3d      	ldr	r3, [pc, #244]	@ (800046c <Security_Handler+0x154>)
 8000378:	78da      	ldrb	r2, [r3, #3]
 800037a:	4b3c      	ldr	r3, [pc, #240]	@ (800046c <Security_Handler+0x154>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	4413      	add	r3, r2
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b3b      	ldr	r3, [pc, #236]	@ (8000470 <Security_Handler+0x158>)
 8000384:	70da      	strb	r2, [r3, #3]
		KEY[4] = SEED[0] | SEED[1];
 8000386:	4b39      	ldr	r3, [pc, #228]	@ (800046c <Security_Handler+0x154>)
 8000388:	781a      	ldrb	r2, [r3, #0]
 800038a:	4b38      	ldr	r3, [pc, #224]	@ (800046c <Security_Handler+0x154>)
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	4313      	orrs	r3, r2
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b37      	ldr	r3, [pc, #220]	@ (8000470 <Security_Handler+0x158>)
 8000394:	711a      	strb	r2, [r3, #4]
		KEY[5] = SEED[1] + SEED[2];
 8000396:	4b35      	ldr	r3, [pc, #212]	@ (800046c <Security_Handler+0x154>)
 8000398:	785a      	ldrb	r2, [r3, #1]
 800039a:	4b34      	ldr	r3, [pc, #208]	@ (800046c <Security_Handler+0x154>)
 800039c:	789b      	ldrb	r3, [r3, #2]
 800039e:	4413      	add	r3, r2
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b33      	ldr	r3, [pc, #204]	@ (8000470 <Security_Handler+0x158>)
 80003a4:	715a      	strb	r2, [r3, #5]
		KEY[6] = SEED[2] | SEED[3];
 80003a6:	4b31      	ldr	r3, [pc, #196]	@ (800046c <Security_Handler+0x154>)
 80003a8:	789a      	ldrb	r2, [r3, #2]
 80003aa:	4b30      	ldr	r3, [pc, #192]	@ (800046c <Security_Handler+0x154>)
 80003ac:	78db      	ldrb	r3, [r3, #3]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000470 <Security_Handler+0x158>)
 80003b4:	719a      	strb	r2, [r3, #6]
		KEY[7] = SEED[3] + SEED[0];
 80003b6:	4b2d      	ldr	r3, [pc, #180]	@ (800046c <Security_Handler+0x154>)
 80003b8:	78da      	ldrb	r2, [r3, #3]
 80003ba:	4b2c      	ldr	r3, [pc, #176]	@ (800046c <Security_Handler+0x154>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	4413      	add	r3, r2
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000470 <Security_Handler+0x158>)
 80003c4:	71da      	strb	r2, [r3, #7]
		KEY[8] = SEED[0] & SEED[1];
 80003c6:	4b29      	ldr	r3, [pc, #164]	@ (800046c <Security_Handler+0x154>)
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	4b28      	ldr	r3, [pc, #160]	@ (800046c <Security_Handler+0x154>)
 80003cc:	785b      	ldrb	r3, [r3, #1]
 80003ce:	4013      	ands	r3, r2
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <Security_Handler+0x158>)
 80003d4:	721a      	strb	r2, [r3, #8]
		KEY[9] = SEED[1] + SEED[2];
 80003d6:	4b25      	ldr	r3, [pc, #148]	@ (800046c <Security_Handler+0x154>)
 80003d8:	785a      	ldrb	r2, [r3, #1]
 80003da:	4b24      	ldr	r3, [pc, #144]	@ (800046c <Security_Handler+0x154>)
 80003dc:	789b      	ldrb	r3, [r3, #2]
 80003de:	4413      	add	r3, r2
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b23      	ldr	r3, [pc, #140]	@ (8000470 <Security_Handler+0x158>)
 80003e4:	725a      	strb	r2, [r3, #9]
		KEY[10] = SEED[2] & SEED[3];
 80003e6:	4b21      	ldr	r3, [pc, #132]	@ (800046c <Security_Handler+0x154>)
 80003e8:	789a      	ldrb	r2, [r3, #2]
 80003ea:	4b20      	ldr	r3, [pc, #128]	@ (800046c <Security_Handler+0x154>)
 80003ec:	78db      	ldrb	r3, [r3, #3]
 80003ee:	4013      	ands	r3, r2
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000470 <Security_Handler+0x158>)
 80003f4:	729a      	strb	r2, [r3, #10]
		KEY[11] = SEED[3] + SEED[0];
 80003f6:	4b1d      	ldr	r3, [pc, #116]	@ (800046c <Security_Handler+0x154>)
 80003f8:	78da      	ldrb	r2, [r3, #3]
 80003fa:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <Security_Handler+0x154>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	4413      	add	r3, r2
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <Security_Handler+0x158>)
 8000404:	72da      	strb	r2, [r3, #11]
		KEY[12] = SEED[0] - SEED[1];
 8000406:	4b19      	ldr	r3, [pc, #100]	@ (800046c <Security_Handler+0x154>)
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <Security_Handler+0x154>)
 800040c:	785b      	ldrb	r3, [r3, #1]
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	b2da      	uxtb	r2, r3
 8000412:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <Security_Handler+0x158>)
 8000414:	731a      	strb	r2, [r3, #12]
		KEY[13] = SEED[1] + SEED[2];
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <Security_Handler+0x154>)
 8000418:	785a      	ldrb	r2, [r3, #1]
 800041a:	4b14      	ldr	r3, [pc, #80]	@ (800046c <Security_Handler+0x154>)
 800041c:	789b      	ldrb	r3, [r3, #2]
 800041e:	4413      	add	r3, r2
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <Security_Handler+0x158>)
 8000424:	735a      	strb	r2, [r3, #13]
		KEY[14] = SEED[2] - SEED[3];
 8000426:	4b11      	ldr	r3, [pc, #68]	@ (800046c <Security_Handler+0x154>)
 8000428:	789a      	ldrb	r2, [r3, #2]
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <Security_Handler+0x154>)
 800042c:	78db      	ldrb	r3, [r3, #3]
 800042e:	1ad3      	subs	r3, r2, r3
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <Security_Handler+0x158>)
 8000434:	739a      	strb	r2, [r3, #14]
		KEY[15] = SEED[3] + SEED[0];
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <Security_Handler+0x154>)
 8000438:	78da      	ldrb	r2, [r3, #3]
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <Security_Handler+0x154>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	4413      	add	r3, r2
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <Security_Handler+0x158>)
 8000444:	73da      	strb	r2, [r3, #15]
	else if(RxData[2] == Security_KEY_level)
	{
		Access_flag = 1;
		HAL_UART_Transmit(&huart1, (uint8_t*)"Key accept", 11, 100);
	}
}
 8000446:	e00c      	b.n	8000462 <Security_Handler+0x14a>
	else if(RxData[2] == Security_KEY_level)
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <Security_Handler+0x150>)
 800044a:	789b      	ldrb	r3, [r3, #2]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d108      	bne.n	8000462 <Security_Handler+0x14a>
		Access_flag = 1;
 8000450:	4b08      	ldr	r3, [pc, #32]	@ (8000474 <Security_Handler+0x15c>)
 8000452:	2201      	movs	r2, #1
 8000454:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)"Key accept", 11, 100);
 8000456:	2364      	movs	r3, #100	@ 0x64
 8000458:	220b      	movs	r2, #11
 800045a:	4907      	ldr	r1, [pc, #28]	@ (8000478 <Security_Handler+0x160>)
 800045c:	4807      	ldr	r0, [pc, #28]	@ (800047c <Security_Handler+0x164>)
 800045e:	f002 fd9d 	bl	8002f9c <HAL_UART_Transmit>
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000190 	.word	0x20000190
 800046c:	200001a4 	.word	0x200001a4
 8000470:	200001a8 	.word	0x200001a8
 8000474:	200001c4 	.word	0x200001c4
 8000478:	08003cc8 	.word	0x08003cc8
 800047c:	2000012c 	.word	0x2000012c

08000480 <CAN_Error_Handler>:

void CAN_Error_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
	char text[31];
	sprintf(text, "Ma loi 0x%u\n\rtu service 0x%u", RxData[3], RxData[2]);
 8000486:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <CAN_Error_Handler+0x2c>)
 8000488:	78db      	ldrb	r3, [r3, #3]
 800048a:	461a      	mov	r2, r3
 800048c:	4b07      	ldr	r3, [pc, #28]	@ (80004ac <CAN_Error_Handler+0x2c>)
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	4638      	mov	r0, r7
 8000492:	4907      	ldr	r1, [pc, #28]	@ (80004b0 <CAN_Error_Handler+0x30>)
 8000494:	f002 ff56 	bl	8003344 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)text, 31, 100);
 8000498:	4639      	mov	r1, r7
 800049a:	2364      	movs	r3, #100	@ 0x64
 800049c:	221f      	movs	r2, #31
 800049e:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <CAN_Error_Handler+0x34>)
 80004a0:	f002 fd7c 	bl	8002f9c <HAL_UART_Transmit>
}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000190 	.word	0x20000190
 80004b0:	08003cd4 	.word	0x08003cd4
 80004b4:	2000012c 	.word	0x2000012c

080004b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if(KEY_REMAIN > 0)
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dd02      	ble.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		Send_CF_Security();
 80004c8:	f7ff fed6 	bl	8000278 <Send_CF_Security>
	}
	else
	{
		HAL_TIM_Base_Stop_IT(&htim2);
	}
}
 80004cc:	e002      	b.n	80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_Base_Stop_IT(&htim2);
 80004ce:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004d0:	f002 f996 	bl	8002800 <HAL_TIM_Base_Stop_IT>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200001c0 	.word	0x200001c0
 80004e0:	200000e4 	.word	0x200000e4

080004e4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK)
 80004ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 80004ee:	4a4b      	ldr	r2, [pc, #300]	@ (800061c <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 fed7 	bl	80012a6 <HAL_CAN_GetRxMessage>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8087 	bne.w	800060e <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
		  {
			  if ((RxHeader.StdId == CAN_Response_ID))
 8000500:	4b46      	ldr	r3, [pc, #280]	@ (800061c <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f240 72a2 	movw	r2, #1954	@ 0x7a2
 8000508:	4293      	cmp	r3, r2
 800050a:	f040 8080 	bne.w	800060e <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
			   {
				  switch(RxData[0] >> 4)
 800050e:	4b42      	ldr	r3, [pc, #264]	@ (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b03      	cmp	r3, #3
 8000518:	d879      	bhi.n	800060e <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
 800051a:	a201      	add	r2, pc, #4	@ (adr r2, 8000520 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 800051c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000520:	08000531 	.word	0x08000531
 8000524:	08000605 	.word	0x08000605
 8000528:	08000605 	.word	0x08000605
 800052c:	080005d3 	.word	0x080005d3
				  {
				  case SF:
					  switch(RxData[1])
 8000530:	4b39      	ldr	r3, [pc, #228]	@ (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8000532:	785b      	ldrb	r3, [r3, #1]
 8000534:	3b62      	subs	r3, #98	@ 0x62
 8000536:	2b1d      	cmp	r3, #29
 8000538:	d866      	bhi.n	8000608 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>
 800053a:	a201      	add	r2, pc, #4	@ (adr r2, 8000540 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	080005b9 	.word	0x080005b9
 8000544:	08000609 	.word	0x08000609
 8000548:	08000609 	.word	0x08000609
 800054c:	08000609 	.word	0x08000609
 8000550:	08000609 	.word	0x08000609
 8000554:	080005bf 	.word	0x080005bf
 8000558:	08000609 	.word	0x08000609
 800055c:	08000609 	.word	0x08000609
 8000560:	08000609 	.word	0x08000609
 8000564:	08000609 	.word	0x08000609
 8000568:	08000609 	.word	0x08000609
 800056c:	08000609 	.word	0x08000609
 8000570:	080005c5 	.word	0x080005c5
 8000574:	08000609 	.word	0x08000609
 8000578:	08000609 	.word	0x08000609
 800057c:	08000609 	.word	0x08000609
 8000580:	08000609 	.word	0x08000609
 8000584:	08000609 	.word	0x08000609
 8000588:	08000609 	.word	0x08000609
 800058c:	08000609 	.word	0x08000609
 8000590:	08000609 	.word	0x08000609
 8000594:	08000609 	.word	0x08000609
 8000598:	08000609 	.word	0x08000609
 800059c:	08000609 	.word	0x08000609
 80005a0:	08000609 	.word	0x08000609
 80005a4:	08000609 	.word	0x08000609
 80005a8:	08000609 	.word	0x08000609
 80005ac:	08000609 	.word	0x08000609
 80005b0:	08000609 	.word	0x08000609
 80005b4:	080005cb 	.word	0x080005cb
					  {
					  case ReadDataByLocalIdentifier_Response_SID:
						  Read_Service_Handler();
 80005b8:	f7ff fde6 	bl	8000188 <Read_Service_Handler>
						  break;
 80005bc:	e008      	b.n	80005d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>
					  case SecurityAccess_Response_SID:
						  Security_Handler();
 80005be:	f7ff feab 	bl	8000318 <Security_Handler>
						  break;
 80005c2:	e005      	b.n	80005d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>
					  case WriteDataByLocalIdentifier_Response_SID:
						  Write_Service_Handler();
 80005c4:	f7ff fe2e 	bl	8000224 <Write_Service_Handler>
						  break;
 80005c8:	e002      	b.n	80005d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xec>
					  case Identifier_Negative_Response:
						  CAN_Error_Handler();
 80005ca:	f7ff ff59 	bl	8000480 <CAN_Error_Handler>
						  break;
 80005ce:	bf00      	nop
					  }
					  break;
 80005d0:	e01a      	b.n	8000608 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>
				  case FF:
					  break;
				  case CF:
					  break;
				  case FC:
					  if((RxData[0] & 0b00001111) == Countinue_State)
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	f003 030f 	and.w	r3, r3, #15
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d116      	bne.n	800060c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
					  {
						  TxHeader.DLC = (int)RxData[1];
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 80005e6:	611a      	str	r2, [r3, #16]
						  __HAL_TIM_SET_AUTORELOAD(&htim2, (int)RxData[2]);
 80005e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 80005ea:	789a      	ldrb	r2, [r3, #2]
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80005fa:	60da      	str	r2, [r3, #12]
						  HAL_TIM_Base_Start_IT(&htim2);
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80005fe:	f002 f8ad 	bl	800275c <HAL_TIM_Base_Start_IT>
					  }
					  break;
 8000602:	e003      	b.n	800060c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
					  break;
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
					  break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <HAL_CAN_RxFifo1MsgPendingCallback+0x12a>
					  break;
 800060c:	bf00      	nop
				  }
			   }
		  }
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000190 	.word	0x20000190
 800061c:	20000174 	.word	0x20000174
 8000620:	20000000 	.word	0x20000000
 8000624:	200000e4 	.word	0x200000e4

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fade 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f828 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f91a 	bl	800086c <MX_GPIO_Init>
  MX_CAN_Init();
 8000638:	f000 f86a 	bl	8000710 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f8ec 	bl	8000818 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000640:	f000 f89c 	bl	800077c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <main+0x54>)
 8000646:	f000 fd1b 	bl	8001080 <HAL_CAN_Start>
  HAL_CAN_ConfigFilter(&hcan, &Filter);
 800064a:	490d      	ldr	r1, [pc, #52]	@ (8000680 <main+0x58>)
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <main+0x54>)
 800064e:	f000 fc4e 	bl	8000eee <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000652:	2110      	movs	r1, #16
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <main+0x54>)
 8000656:	f000 ff47 	bl	80014e8 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Send_SF_Read();
 800065a:	f7ff fd77 	bl	800014c <Send_SF_Read>
	  HAL_Delay(2000);
 800065e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000662:	f000 fb25 	bl	8000cb0 <HAL_Delay>
	  Send_SF_Security();
 8000666:	f7ff fdeb 	bl	8000240 <Send_SF_Security>
	  HAL_Delay(2000);
 800066a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800066e:	f000 fb1f 	bl	8000cb0 <HAL_Delay>
	  Send_SF_Write();
 8000672:	f7ff fdaf 	bl	80001d4 <Send_SF_Write>
	  Send_SF_Read();
 8000676:	bf00      	nop
 8000678:	e7ef      	b.n	800065a <main+0x32>
 800067a:	bf00      	nop
 800067c:	200000bc 	.word	0x200000bc
 8000680:	20000018 	.word	0x20000018

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b090      	sub	sp, #64	@ 0x40
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	2228      	movs	r2, #40	@ 0x28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fe76 	bl	8003384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fbe5 	bl	8001e9c <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006d8:	f000 f8ea 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fe52 	bl	80023a0 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000702:	f000 f8d5 	bl	80008b0 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3740      	adds	r7, #64	@ 0x40
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_CAN_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_CAN_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_CAN_Init+0x64>)
 800071c:	2209      	movs	r2, #9
 800071e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_CAN_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_CAN_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_CAN_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_CAN_Init+0x64>)
 8000734:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000738:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_CAN_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_CAN_Init+0x64>)
 8000742:	2201      	movs	r2, #1
 8000744:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_CAN_Init+0x64>)
 8000748:	2201      	movs	r2, #1
 800074a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_CAN_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_CAN_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_CAN_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_CAN_Init+0x64>)
 8000760:	f000 faca 	bl	8000cf8 <HAL_CAN_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800076a:	f000 f8a1 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000bc 	.word	0x200000bc
 8000778:	40006400 	.word	0x40006400

0800077c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <MX_TIM2_Init+0x98>)
 800079a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800079e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007a2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80007a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c2:	4814      	ldr	r0, [pc, #80]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007c4:	f001 ff7a 	bl	80026bc <HAL_TIM_Base_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007ce:	f000 f86f 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4619      	mov	r1, r3
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007e0:	f002 f92c 	bl	8002a3c <HAL_TIM_ConfigClockSource>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007ea:	f000 f861 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <MX_TIM2_Init+0x98>)
 80007fc:	f002 fb0e 	bl	8002e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000806:	f000 f853 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000e4 	.word	0x200000e4

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f002 fb54 	bl	8002efc <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f829 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000012c 	.word	0x2000012c
 8000868:	40013800 	.word	0x40013800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000878:	f043 0320 	orr.w	r3, r3, #32
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_GPIO_Init+0x40>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <MX_GPIO_Init+0x40>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_MspInit+0x5c>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <HAL_MspInit+0x5c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_MspInit+0x5c>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x5c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <HAL_MspInit+0x5c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_MspInit+0x5c>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008f2:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <HAL_MspInit+0x60>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <HAL_MspInit+0x60>)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40021000 	.word	0x40021000
 800091c:	40010000 	.word	0x40010000

08000920 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a20      	ldr	r2, [pc, #128]	@ (80009bc <HAL_CAN_MspInit+0x9c>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d139      	bne.n	80009b4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <HAL_CAN_MspInit+0xa0>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	4a1e      	ldr	r2, [pc, #120]	@ (80009c0 <HAL_CAN_MspInit+0xa0>)
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800094a:	61d3      	str	r3, [r2, #28]
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <HAL_CAN_MspInit+0xa0>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <HAL_CAN_MspInit+0xa0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <HAL_CAN_MspInit+0xa0>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <HAL_CAN_MspInit+0xa0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000970:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480f      	ldr	r0, [pc, #60]	@ (80009c4 <HAL_CAN_MspInit+0xa4>)
 8000986:	f001 f905 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800098a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <HAL_CAN_MspInit+0xa4>)
 80009a0:	f001 f8f8 	bl	8001b94 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2015      	movs	r0, #21
 80009aa:	f001 f8bc 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009ae:	2015      	movs	r0, #21
 80009b0:	f001 f8d5 	bl	8001b5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40006400 	.word	0x40006400
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009d8:	d113      	bne.n	8000a02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_TIM_Base_MspInit+0x44>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <HAL_TIM_Base_MspInit+0x44>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_TIM_Base_MspInit+0x44>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	201c      	movs	r0, #28
 80009f8:	f001 f895 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009fc:	201c      	movs	r0, #28
 80009fe:	f001 f8ae 	bl	8001b5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <HAL_UART_MspInit+0x8c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d131      	bne.n	8000a94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a30:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_UART_MspInit+0x90>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <HAL_UART_MspInit+0x94>)
 8000a76:	f001 f88d 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_UART_MspInit+0x94>)
 8000a90:	f001 f880 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f8be 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <CAN1_RX1_IRQHandler+0x10>)
 8000b06:	f000 fd14 	bl	8001532 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000bc 	.word	0x200000bc

08000b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM2_IRQHandler+0x10>)
 8000b1a:	f001 fe9f 	bl	800285c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000e4 	.word	0x200000e4

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f002 fc1c 	bl	8003394 <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20005000 	.word	0x20005000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	200001c8 	.word	0x200001c8
 8000b90:	20000318 	.word	0x20000318

08000b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff fff8 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ba6:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bbc:	4c09      	ldr	r4, [pc, #36]	@ (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f002 fbe9 	bl	80033a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fd2b 	bl	8000628 <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000bdc:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000be0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000be4:	20000318 	.word	0x20000318

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_Init+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <HAL_Init+0x28>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 ff87 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fe58 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 ff9f 	bl	8001b7a <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 ff67 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000044 	.word	0x20000044
 8000c70:	2000004c 	.word	0x2000004c
 8000c74:	20000048 	.word	0x20000048

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a03      	ldr	r2, [pc, #12]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	2000004c 	.word	0x2000004c
 8000c98:	200001cc 	.word	0x200001cc

08000c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	@ (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	200001cc 	.word	0x200001cc

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff fff0 	bl	8000c9c <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffe0 	bl	8000c9c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000004c 	.word	0x2000004c

08000cf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e0ed      	b.n	8000ee6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fe02 	bl	8000920 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0201 	orr.w	r2, r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d2c:	f7ff ffb6 	bl	8000c9c <HAL_GetTick>
 8000d30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d32:	e012      	b.n	8000d5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d34:	f7ff ffb2 	bl	8000c9c <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b0a      	cmp	r3, #10
 8000d40:	d90b      	bls.n	8000d5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2205      	movs	r2, #5
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e0c5      	b.n	8000ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0e5      	beq.n	8000d34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0202 	bic.w	r2, r2, #2
 8000d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d78:	f7ff ff90 	bl	8000c9c <HAL_GetTick>
 8000d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d7e:	e012      	b.n	8000da6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d80:	f7ff ff8c 	bl	8000c9c <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d90b      	bls.n	8000da6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2205      	movs	r2, #5
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e09f      	b.n	8000ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1e5      	bne.n	8000d80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7e1b      	ldrb	r3, [r3, #24]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e007      	b.n	8000dde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7e5b      	ldrb	r3, [r3, #25]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e007      	b.n	8000e08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7e9b      	ldrb	r3, [r3, #26]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d108      	bne.n	8000e22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0220 	orr.w	r2, r2, #32
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e007      	b.n	8000e32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0220 	bic.w	r2, r2, #32
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7edb      	ldrb	r3, [r3, #27]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d108      	bne.n	8000e4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0210 	bic.w	r2, r2, #16
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0210 	orr.w	r2, r2, #16
 8000e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7f1b      	ldrb	r3, [r3, #28]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d108      	bne.n	8000e76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0208 	orr.w	r2, r2, #8
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e007      	b.n	8000e86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0208 	bic.w	r2, r2, #8
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7f5b      	ldrb	r3, [r3, #29]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d108      	bne.n	8000ea0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0204 	orr.w	r2, r2, #4
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e007      	b.n	8000eb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0204 	bic.w	r2, r2, #4
 8000eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	ea42 0103 	orr.w	r1, r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b087      	sub	sp, #28
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f06:	7cfb      	ldrb	r3, [r7, #19]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d003      	beq.n	8000f14 <HAL_CAN_ConfigFilter+0x26>
 8000f0c:	7cfb      	ldrb	r3, [r7, #19]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f040 80aa 	bne.w	8001068 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f1a:	f043 0201 	orr.w	r2, r3, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d123      	bne.n	8000f96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	401a      	ands	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3248      	adds	r2, #72	@ 0x48
 8000f76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f8c:	6979      	ldr	r1, [r7, #20]
 8000f8e:	3348      	adds	r3, #72	@ 0x48
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d122      	bne.n	8000fe4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3248      	adds	r2, #72	@ 0x48
 8000fc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fda:	6979      	ldr	r1, [r7, #20]
 8000fdc:	3348      	adds	r3, #72	@ 0x48
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d109      	bne.n	8001000 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ffe:	e007      	b.n	8001010 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d109      	bne.n	800102c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800102a:	e007      	b.n	800103c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	431a      	orrs	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d107      	bne.n	8001054 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800105a:	f023 0201 	bic.w	r2, r3, #1
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	e006      	b.n	8001076 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
  }
}
 8001076:	4618      	mov	r0, r3
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b01      	cmp	r3, #1
 8001092:	d12e      	bne.n	80010f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2202      	movs	r2, #2
 8001098:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010ac:	f7ff fdf6 	bl	8000c9c <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b2:	e012      	b.n	80010da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b4:	f7ff fdf2 	bl	8000c9c <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e012      	b.n	8001100 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1e5      	bne.n	80010b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e006      	b.n	8001100 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
  }
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d003      	beq.n	8001134 <HAL_CAN_AddTxMessage+0x2c>
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	2b02      	cmp	r3, #2
 8001130:	f040 80ad 	bne.w	800128e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10a      	bne.n	8001154 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001144:	2b00      	cmp	r3, #0
 8001146:	d105      	bne.n	8001154 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8095 	beq.w	800127e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	0e1b      	lsrs	r3, r3, #24
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800115e:	2201      	movs	r2, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10d      	bne.n	800118c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	6809      	ldr	r1, [r1, #0]
 800117e:	431a      	orrs	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3318      	adds	r3, #24
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	440b      	add	r3, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e00f      	b.n	80011ac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001196:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3318      	adds	r3, #24
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	440b      	add	r3, r1
 80011aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3318      	adds	r3, #24
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	440b      	add	r3, r1
 80011bc:	3304      	adds	r3, #4
 80011be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	7d1b      	ldrb	r3, [r3, #20]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d111      	bne.n	80011ec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3318      	adds	r3, #24
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	3304      	adds	r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	6811      	ldr	r1, [r2, #0]
 80011dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3318      	adds	r3, #24
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	440b      	add	r3, r1
 80011e8:	3304      	adds	r3, #4
 80011ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3307      	adds	r3, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	061a      	lsls	r2, r3, #24
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3306      	adds	r3, #6
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3305      	adds	r3, #5
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	4313      	orrs	r3, r2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	3204      	adds	r2, #4
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	4610      	mov	r0, r2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6811      	ldr	r1, [r2, #0]
 8001214:	ea43 0200 	orr.w	r2, r3, r0
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	440b      	add	r3, r1
 800121e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001222:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3303      	adds	r3, #3
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	061a      	lsls	r2, r3, #24
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3302      	adds	r3, #2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	041b      	lsls	r3, r3, #16
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3301      	adds	r3, #1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4313      	orrs	r3, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	4610      	mov	r0, r2
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	6811      	ldr	r1, [r2, #0]
 800124a:	ea43 0200 	orr.w	r2, r3, r0
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	440b      	add	r3, r1
 8001254:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001258:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3318      	adds	r3, #24
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	6811      	ldr	r1, [r2, #0]
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3318      	adds	r3, #24
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	440b      	add	r3, r1
 8001278:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e00e      	b.n	800129c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e006      	b.n	800129c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3724      	adds	r7, #36	@ 0x24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012a6:	b480      	push	{r7}
 80012a8:	b087      	sub	sp, #28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d003      	beq.n	80012ca <HAL_CAN_GetRxMessage+0x24>
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	f040 8103 	bne.w	80014d0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10e      	bne.n	80012ee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d116      	bne.n	800130c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0f7      	b.n	80014de <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d107      	bne.n	800130c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001300:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e0e8      	b.n	80014de <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	331b      	adds	r3, #27
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0204 	and.w	r2, r3, #4
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	331b      	adds	r3, #27
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0d5b      	lsrs	r3, r3, #21
 800133a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e00b      	b.n	800135c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	331b      	adds	r3, #27
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	4413      	add	r3, r2
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	331b      	adds	r3, #27
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0202 	and.w	r2, r3, #2
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	331b      	adds	r3, #27
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	4413      	add	r3, r2
 800137e:	3304      	adds	r3, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2208      	movs	r2, #8
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	e00b      	b.n	80013aa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	331b      	adds	r3, #27
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	4413      	add	r3, r2
 800139e:	3304      	adds	r3, #4
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 020f 	and.w	r2, r3, #15
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	331b      	adds	r3, #27
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	3304      	adds	r3, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	331b      	adds	r3, #27
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	3304      	adds	r3, #4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	0c1b      	lsrs	r3, r3, #16
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	0a1a      	lsrs	r2, r3, #8
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4413      	add	r3, r2
 8001414:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0c1a      	lsrs	r2, r3, #16
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3302      	adds	r3, #2
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4413      	add	r3, r2
 800142e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0e1a      	lsrs	r2, r3, #24
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3303      	adds	r3, #3
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	3304      	adds	r3, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	0a1a      	lsrs	r2, r3, #8
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3305      	adds	r3, #5
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0c1a      	lsrs	r2, r3, #16
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3306      	adds	r3, #6
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0e1a      	lsrs	r2, r3, #24
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3307      	adds	r3, #7
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0220 	orr.w	r2, r2, #32
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	e007      	b.n	80014cc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0220 	orr.w	r2, r2, #32
 80014ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e006      	b.n	80014de <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d002      	beq.n	8001506 <HAL_CAN_ActivateNotification+0x1e>
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d109      	bne.n	800151a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6959      	ldr	r1, [r3, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e006      	b.n	8001528 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b08a      	sub	sp, #40	@ 0x28
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d07c      	beq.n	8001672 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d023      	beq.n	80015ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f983 	bl	80018a0 <HAL_CAN_TxMailbox0CompleteCallback>
 800159a:	e016      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ae:	e00c      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c2:	e002      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f986 	bl	80018d6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d024      	beq.n	800161e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f962 	bl	80018b2 <HAL_CAN_TxMailbox1CompleteCallback>
 80015ee:	e016      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
 8001602:	e00c      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
 8001616:	e002      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f965 	bl	80018e8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d024      	beq.n	8001672 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001630:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f941 	bl	80018c4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001642:	e016      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
 8001656:	e00c      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
 800166a:	e002      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f944 	bl	80018fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2210      	movs	r2, #16
 8001694:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f933 	bl	800191e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f91b 	bl	800190c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00c      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2210      	movs	r2, #16
 80016f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2208      	movs	r2, #8
 8001714:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f90a 	bl	8001930 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7fe fed5 	bl	80004e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8f3 	bl	8001942 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2208      	movs	r2, #8
 8001776:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f8eb 	bl	8001954 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d07b      	beq.n	8001880 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d072      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d043      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d03e      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001800:	2b60      	cmp	r3, #96	@ 0x60
 8001802:	d02b      	beq.n	800185c <HAL_CAN_IRQHandler+0x32a>
 8001804:	2b60      	cmp	r3, #96	@ 0x60
 8001806:	d82e      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001808:	2b50      	cmp	r3, #80	@ 0x50
 800180a:	d022      	beq.n	8001852 <HAL_CAN_IRQHandler+0x320>
 800180c:	2b50      	cmp	r3, #80	@ 0x50
 800180e:	d82a      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001810:	2b40      	cmp	r3, #64	@ 0x40
 8001812:	d019      	beq.n	8001848 <HAL_CAN_IRQHandler+0x316>
 8001814:	2b40      	cmp	r3, #64	@ 0x40
 8001816:	d826      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001818:	2b30      	cmp	r3, #48	@ 0x30
 800181a:	d010      	beq.n	800183e <HAL_CAN_IRQHandler+0x30c>
 800181c:	2b30      	cmp	r3, #48	@ 0x30
 800181e:	d822      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001820:	2b10      	cmp	r3, #16
 8001822:	d002      	beq.n	800182a <HAL_CAN_IRQHandler+0x2f8>
 8001824:	2b20      	cmp	r3, #32
 8001826:	d005      	beq.n	8001834 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001828:	e01d      	b.n	8001866 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001832:	e019      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800183c:	e014      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001846:	e00f      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001850:	e00a      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800185a:	e005      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001864:	e000      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            break;
 8001866:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001876:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2204      	movs	r2, #4
 800187e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f867 	bl	8001966 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	@ 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4906      	ldr	r1, [pc, #24]	@ (8001a10 <__NVIC_EnableIRQ+0x34>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	@ (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	@ (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	@ 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	@ 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff90 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff2d 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff42 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff90 	bl	8001a68 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5f 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff35 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b08b      	sub	sp, #44	@ 0x2c
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e169      	b.n	8001e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8158 	bne.w	8001e76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a9a      	ldr	r2, [pc, #616]	@ (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d05e      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bd0:	4a98      	ldr	r2, [pc, #608]	@ (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d875      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bd6:	4a98      	ldr	r2, [pc, #608]	@ (8001e38 <HAL_GPIO_Init+0x2a4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d058      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bdc:	4a96      	ldr	r2, [pc, #600]	@ (8001e38 <HAL_GPIO_Init+0x2a4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d86f      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001be2:	4a96      	ldr	r2, [pc, #600]	@ (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d052      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001be8:	4a94      	ldr	r2, [pc, #592]	@ (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d869      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bee:	4a94      	ldr	r2, [pc, #592]	@ (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04c      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bf4:	4a92      	ldr	r2, [pc, #584]	@ (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d863      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a92      	ldr	r2, [pc, #584]	@ (8001e44 <HAL_GPIO_Init+0x2b0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d046      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001c00:	4a90      	ldr	r2, [pc, #576]	@ (8001e44 <HAL_GPIO_Init+0x2b0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d85d      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d82a      	bhi.n	8001c60 <HAL_GPIO_Init+0xcc>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d859      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <HAL_GPIO_Init+0x80>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c69 	.word	0x08001c69
 8001c1c:	08001c7b 	.word	0x08001c7b
 8001c20:	08001cbd 	.word	0x08001cbd
 8001c24:	08001cc3 	.word	0x08001cc3
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cc3 	.word	0x08001cc3
 8001c30:	08001cc3 	.word	0x08001cc3
 8001c34:	08001cc3 	.word	0x08001cc3
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001cc3 	.word	0x08001cc3
 8001c40:	08001cc3 	.word	0x08001cc3
 8001c44:	08001cc3 	.word	0x08001cc3
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001cc3 	.word	0x08001cc3
 8001c50:	08001cc3 	.word	0x08001cc3
 8001c54:	08001cc3 	.word	0x08001cc3
 8001c58:	08001c71 	.word	0x08001c71
 8001c5c:	08001c85 	.word	0x08001c85
 8001c60:	4a79      	ldr	r2, [pc, #484]	@ (8001e48 <HAL_GPIO_Init+0x2b4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c66:	e02c      	b.n	8001cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e029      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e024      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e01f      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e01a      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c96:	2304      	movs	r3, #4
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e013      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	611a      	str	r2, [r3, #16]
          break;
 8001cae:	e009      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
          break;
 8001cba:	e003      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          break;
 8001cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	@ 0xff
 8001cc8:	d801      	bhi.n	8001cce <HAL_GPIO_Init+0x13a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_Init+0x13e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	@ 0xff
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_GPIO_Init+0x14c>
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x152>
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	3b08      	subs	r3, #8
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	210f      	movs	r1, #15
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80b1 	beq.w	8001e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d14:	4b4d      	ldr	r3, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a4c      	ldr	r2, [pc, #304]	@ (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b4a      	ldr	r3, [pc, #296]	@ (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d2c:	4a48      	ldr	r2, [pc, #288]	@ (8001e50 <HAL_GPIO_Init+0x2bc>)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a40      	ldr	r2, [pc, #256]	@ (8001e54 <HAL_GPIO_Init+0x2c0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1ec>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e58 <HAL_GPIO_Init+0x2c4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1e8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3e      	ldr	r2, [pc, #248]	@ (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e60 <HAL_GPIO_Init+0x2cc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1e0>
 8001d70:	2303      	movs	r3, #3
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d80:	2300      	movs	r3, #0
 8001d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d92:	492f      	ldr	r1, [pc, #188]	@ (8001e50 <HAL_GPIO_Init+0x2bc>)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dac:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	492c      	ldr	r1, [pc, #176]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4928      	ldr	r1, [pc, #160]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4922      	ldr	r1, [pc, #136]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	491e      	ldr	r1, [pc, #120]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4918      	ldr	r1, [pc, #96]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4914      	ldr	r1, [pc, #80]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d021      	beq.n	8001e68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	490e      	ldr	r1, [pc, #56]	@ (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e021      	b.n	8001e76 <HAL_GPIO_Init+0x2e2>
 8001e32:	bf00      	nop
 8001e34:	10320000 	.word	0x10320000
 8001e38:	10310000 	.word	0x10310000
 8001e3c:	10220000 	.word	0x10220000
 8001e40:	10210000 	.word	0x10210000
 8001e44:	10120000 	.word	0x10120000
 8001e48:	10110000 	.word	0x10110000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40011400 	.word	0x40011400
 8001e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4909      	ldr	r1, [pc, #36]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	3301      	adds	r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae8e 	bne.w	8001ba8 <HAL_GPIO_Init+0x14>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	372c      	adds	r7, #44	@ 0x2c
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e272      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ebc:	4b92      	ldr	r3, [pc, #584]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d112      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
 8001ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4b89      	ldr	r3, [pc, #548]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d06c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d168      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e24c      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x76>
 8001f04:	4b80      	ldr	r3, [pc, #512]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a7f      	ldr	r2, [pc, #508]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e02e      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7a      	ldr	r2, [pc, #488]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b78      	ldr	r3, [pc, #480]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a77      	ldr	r2, [pc, #476]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0xbc>
 8001f3e:	4b72      	ldr	r3, [pc, #456]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a71      	ldr	r2, [pc, #452]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f58:	4b6b      	ldr	r3, [pc, #428]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b68      	ldr	r3, [pc, #416]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a67      	ldr	r2, [pc, #412]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fe90 	bl	8000c9c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe fe8c 	bl	8000c9c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e200      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5d      	ldr	r3, [pc, #372]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe4>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fe7c 	bl	8000c9c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe fe78 	bl	8000c9c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1ec      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b53      	ldr	r3, [pc, #332]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x10c>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fe2:	4b49      	ldr	r3, [pc, #292]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
 8001fee:	4b46      	ldr	r3, [pc, #280]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b43      	ldr	r3, [pc, #268]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1c0      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4939      	ldr	r1, [pc, #228]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b36      	ldr	r3, [pc, #216]	@ (800210c <HAL_RCC_OscConfig+0x270>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe fe31 	bl	8000c9c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7fe fe2d 	bl	8000c9c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1a1      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4927      	ldr	r1, [pc, #156]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b26      	ldr	r3, [pc, #152]	@ (800210c <HAL_RCC_OscConfig+0x270>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe fe10 	bl	8000c9c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7fe fe0c 	bl	8000c9c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e180      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03a      	beq.n	8002120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <HAL_RCC_OscConfig+0x274>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7fe fdf0 	bl	8000c9c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7fe fdec 	bl	8000c9c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e160      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 face 	bl	8002680 <RCC_Delay>
 80020e4:	e01c      	b.n	8002120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <HAL_RCC_OscConfig+0x274>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7fe fdd6 	bl	8000c9c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f2:	e00f      	b.n	8002114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7fe fdd2 	bl	8000c9c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d908      	bls.n	8002114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e146      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	42420000 	.word	0x42420000
 8002110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b92      	ldr	r3, [pc, #584]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e9      	bne.n	80020f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a6 	beq.w	800227a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b8b      	ldr	r3, [pc, #556]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b88      	ldr	r3, [pc, #544]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a87      	ldr	r2, [pc, #540]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b85      	ldr	r3, [pc, #532]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b82      	ldr	r3, [pc, #520]	@ (8002364 <HAL_RCC_OscConfig+0x4c8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b7f      	ldr	r3, [pc, #508]	@ (8002364 <HAL_RCC_OscConfig+0x4c8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7e      	ldr	r2, [pc, #504]	@ (8002364 <HAL_RCC_OscConfig+0x4c8>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7fe fd93 	bl	8000c9c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217a:	f7fe fd8f 	bl	8000c9c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	@ 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e103      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b75      	ldr	r3, [pc, #468]	@ (8002364 <HAL_RCC_OscConfig+0x4c8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x312>
 80021a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e02d      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a69      	ldr	r2, [pc, #420]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b67      	ldr	r3, [pc, #412]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a66      	ldr	r2, [pc, #408]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	e01c      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x356>
 80021d8:	4b61      	ldr	r3, [pc, #388]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a60      	ldr	r2, [pc, #384]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4b58      	ldr	r3, [pc, #352]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a57      	ldr	r2, [pc, #348]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7fe fd43 	bl	8000c9c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe fd3f 	bl	8000c9c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0b1      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCC_OscConfig+0x37e>
 800223c:	e014      	b.n	8002268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe fd2d 	bl	8000c9c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fd29 	bl	8000c9c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e09b      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	4b40      	ldr	r3, [pc, #256]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a3b      	ldr	r2, [pc, #236]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002284:	4b36      	ldr	r3, [pc, #216]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d061      	beq.n	8002354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d146      	bne.n	8002326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b33      	ldr	r3, [pc, #204]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe fcfd 	bl	8000c9c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7fe fcf9 	bl	8000c9c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e06d      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	4b29      	ldr	r3, [pc, #164]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022cc:	d108      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ce:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4921      	ldr	r1, [pc, #132]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a19      	ldr	r1, [r3, #32]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	430b      	orrs	r3, r1
 80022f2:	491b      	ldr	r1, [pc, #108]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fccd 	bl	8000c9c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe fcc9 	bl	8000c9c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e03d      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x46a>
 8002324:	e035      	b.n	8002392 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fcb6 	bl	8000c9c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fcb2 	bl	8000c9c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e026      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x498>
 8002352:	e01e      	b.n	8002392 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d107      	bne.n	800236c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e019      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
 8002368:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_RCC_OscConfig+0x500>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d0      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d910      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 0207 	bic.w	r2, r3, #7
 80023ca:	4965      	ldr	r1, [pc, #404]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a58      	ldr	r2, [pc, #352]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002406:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a52      	ldr	r2, [pc, #328]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800241e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d040      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d115      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e073      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06b      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4936      	ldr	r1, [pc, #216]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe fc04 	bl	8000c9c <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fc00 	bl	8000c9c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e053      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d210      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4922      	ldr	r1, [pc, #136]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800251a:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490a      	ldr	r1, [pc, #40]	@ (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	@ (800256c <HAL_RCC_ClockConfig+0x1cc>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_ClockConfig+0x1d0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fb62 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	08003cf4 	.word	0x08003cf4
 800256c:	20000044 	.word	0x20000044
 8002570:	20000048 	.word	0x20000048

08002574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x94>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x30>
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x36>
 80025a2:	e027      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_RCC_GetSysClockFreq+0x98>)
 80025a6:	613b      	str	r3, [r7, #16]
      break;
 80025a8:	e027      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	0c9b      	lsrs	r3, r3, #18
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a17      	ldr	r2, [pc, #92]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d010      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x94>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	0c5b      	lsrs	r3, r3, #17
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	4a11      	ldr	r2, [pc, #68]	@ (8002614 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ce:	5cd3      	ldrb	r3, [r2, r3]
 80025d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	@ (800260c <HAL_RCC_GetSysClockFreq+0x98>)
 80025d6:	fb03 f202 	mul.w	r2, r3, r2
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e004      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002618 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	613b      	str	r3, [r7, #16]
      break;
 80025f2:	e002      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_GetSysClockFreq+0x98>)
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fa:	693b      	ldr	r3, [r7, #16]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	007a1200 	.word	0x007a1200
 8002610:	08003d0c 	.word	0x08003d0c
 8002614:	08003d1c 	.word	0x08003d1c
 8002618:	003d0900 	.word	0x003d0900

0800261c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002620:	4b02      	ldr	r3, [pc, #8]	@ (800262c <HAL_RCC_GetHCLKFreq+0x10>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000044 	.word	0x20000044

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002634:	f7ff fff2 	bl	800261c <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	@ (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	08003d04 	.word	0x08003d04

08002658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800265c:	f7ff ffde 	bl	800261c <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0adb      	lsrs	r3, r3, #11
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4903      	ldr	r1, [pc, #12]	@ (800267c <HAL_RCC_GetPCLK2Freq+0x24>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	08003d04 	.word	0x08003d04

08002680 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <RCC_Delay+0x34>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <RCC_Delay+0x38>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0a5b      	lsrs	r3, r3, #9
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800269c:	bf00      	nop
  }
  while (Delay --);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	60fa      	str	r2, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f9      	bne.n	800269c <RCC_Delay+0x1c>
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	20000044 	.word	0x20000044
 80026b8:	10624dd3 	.word	0x10624dd3

080026bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e041      	b.n	8002752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe f970 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f000 fa8a 	bl	8002c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d001      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e03a      	b.n	80027ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00e      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x58>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279e:	d009      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x58>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x58>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <HAL_TIM_Base_Start_IT+0xa0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d010      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d6:	e007      	b.n	80027e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40000800 	.word	0x40000800

08002800 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a1a      	ldr	r2, [r3, #32]
 800281e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10f      	bne.n	8002848 <HAL_TIM_Base_Stop_IT+0x48>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_TIM_Base_Stop_IT+0x48>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d020      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01b      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0202 	mvn.w	r2, #2
 8002890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f998 	bl	8002bdc <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f98b 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f99a 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d020      	beq.n	800290c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0204 	mvn.w	r2, #4
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f972 	bl	8002bdc <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f965 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f974 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0208 	mvn.w	r2, #8
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f94c 	bl	8002bdc <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f93f 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f94e 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0210 	mvn.w	r2, #16
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2208      	movs	r2, #8
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f926 	bl	8002bdc <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f919 	bl	8002bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f928 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0201 	mvn.w	r2, #1
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fd fd78 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa7f 	bl	8002eea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8f8 	bl	8002c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0220 	mvn.w	r2, #32
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa52 	bl	8002ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_TIM_ConfigClockSource+0x1c>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e0b4      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x186>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a90:	d03e      	beq.n	8002b10 <HAL_TIM_ConfigClockSource+0xd4>
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a96:	f200 8087 	bhi.w	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_TIM_ConfigClockSource+0x172>
 8002aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa6:	d87f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b70      	cmp	r3, #112	@ 0x70
 8002aaa:	d01a      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8002aac:	2b70      	cmp	r3, #112	@ 0x70
 8002aae:	d87b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b60      	cmp	r3, #96	@ 0x60
 8002ab2:	d050      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x11a>
 8002ab4:	2b60      	cmp	r3, #96	@ 0x60
 8002ab6:	d877      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b50      	cmp	r3, #80	@ 0x50
 8002aba:	d03c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0xfa>
 8002abc:	2b50      	cmp	r3, #80	@ 0x50
 8002abe:	d873      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d058      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x13a>
 8002ac4:	2b40      	cmp	r3, #64	@ 0x40
 8002ac6:	d86f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b30      	cmp	r3, #48	@ 0x30
 8002aca:	d064      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002acc:	2b30      	cmp	r3, #48	@ 0x30
 8002ace:	d86b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d060      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d867      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d05c      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d05a      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae0:	e062      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002af2:	f000 f974 	bl	8002dde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
      break;
 8002b0e:	e04f      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b20:	f000 f95d 	bl	8002dde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b32:	609a      	str	r2, [r3, #8]
      break;
 8002b34:	e03c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 f8d4 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2150      	movs	r1, #80	@ 0x50
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f92b 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b54:	e02c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 f8f2 	bl	8002d4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2160      	movs	r1, #96	@ 0x60
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f91b 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b74:	e01c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	461a      	mov	r2, r3
 8002b84:	f000 f8b4 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2140      	movs	r1, #64	@ 0x40
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f90b 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b94:	e00c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f000 f902 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002ba6:	e003      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e000      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
	...

08002c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c32:	d007      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce8 <TIM_Base_SetConfig+0xd4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_Base_SetConfig+0x30>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cec <TIM_Base_SetConfig+0xd8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d108      	bne.n	8002c56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a22      	ldr	r2, [pc, #136]	@ (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce8 <TIM_Base_SetConfig+0xd4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0x62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <TIM_Base_SetConfig+0xd8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d103      	bne.n	8002cbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800

08002cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 030a 	bic.w	r3, r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0210 	bic.w	r2, r3, #16
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	031b      	lsls	r3, r3, #12
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	609a      	str	r2, [r3, #8]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e046      	b.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e80:	d009      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a12      	ldr	r2, [pc, #72]	@ (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10c      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800

08002ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e042      	b.n	8002f94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fd74 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f971 	bl	8003228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	@ 0x28
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d175      	bne.n	80030a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_UART_Transmit+0x2c>
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e06e      	b.n	80030aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2221      	movs	r2, #33	@ 0x21
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fda:	f7fd fe5f 	bl	8000c9c <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff4:	d108      	bne.n	8003008 <HAL_UART_Transmit+0x6c>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003010:	e02e      	b.n	8003070 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	@ 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f848 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e03a      	b.n	80030aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10b      	bne.n	8003052 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	3302      	adds	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e007      	b.n	8003062 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1cb      	bne.n	8003012 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	@ 0x40
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f814 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e006      	b.n	80030aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c2:	e03b      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d037      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7fd fde6 	bl	8000c9c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	6a3a      	ldr	r2, [r7, #32]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e03a      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d023      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x8a>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b80      	cmp	r3, #128	@ 0x80
 80030f8:	d020      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x8a>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b40      	cmp	r3, #64	@ 0x40
 80030fe:	d01d      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b08      	cmp	r3, #8
 800310c:	d116      	bne.n	800313c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f81d 	bl	8003164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2208      	movs	r2, #8
 800312e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e00f      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	429a      	cmp	r2, r3
 8003158:	d0b4      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b095      	sub	sp, #84	@ 0x54
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800318c:	643a      	str	r2, [r7, #64]	@ 0x40
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e5      	bne.n	80031a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d119      	bne.n	8003210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031fc:	61ba      	str	r2, [r7, #24]
 80031fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	613b      	str	r3, [r7, #16]
   return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800321e:	bf00      	nop
 8003220:	3754      	adds	r7, #84	@ 0x54
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003262:	f023 030c 	bic.w	r3, r3, #12
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	430b      	orrs	r3, r1
 800326e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2c      	ldr	r2, [pc, #176]	@ (800333c <UART_SetConfig+0x114>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d103      	bne.n	8003298 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7ff f9e2 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	e002      	b.n	800329e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003298:	f7ff f9ca 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 800329c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	0119      	lsls	r1, r3, #4
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <UART_SetConfig+0x118>)
 80032d6:	fba3 0302 	umull	r0, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2064      	movs	r0, #100	@ 0x64
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	@ 0x32
 80032e8:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <UART_SetConfig+0x118>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f4:	4419      	add	r1, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009a      	lsls	r2, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fbb2 f2f3 	udiv	r2, r2, r3
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <UART_SetConfig+0x118>)
 800330e:	fba3 0302 	umull	r0, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2064      	movs	r0, #100	@ 0x64
 8003316:	fb00 f303 	mul.w	r3, r0, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	@ 0x32
 8003320:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <UART_SetConfig+0x118>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	440a      	add	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40013800 	.word	0x40013800
 8003340:	51eb851f 	.word	0x51eb851f

08003344 <siprintf>:
 8003344:	b40e      	push	{r1, r2, r3}
 8003346:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800334a:	b500      	push	{lr}
 800334c:	b09c      	sub	sp, #112	@ 0x70
 800334e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003350:	9002      	str	r0, [sp, #8]
 8003352:	9006      	str	r0, [sp, #24]
 8003354:	9107      	str	r1, [sp, #28]
 8003356:	9104      	str	r1, [sp, #16]
 8003358:	4808      	ldr	r0, [pc, #32]	@ (800337c <siprintf+0x38>)
 800335a:	4909      	ldr	r1, [pc, #36]	@ (8003380 <siprintf+0x3c>)
 800335c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003360:	9105      	str	r1, [sp, #20]
 8003362:	6800      	ldr	r0, [r0, #0]
 8003364:	a902      	add	r1, sp, #8
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	f000 f992 	bl	8003690 <_svfiprintf_r>
 800336c:	2200      	movs	r2, #0
 800336e:	9b02      	ldr	r3, [sp, #8]
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	b01c      	add	sp, #112	@ 0x70
 8003374:	f85d eb04 	ldr.w	lr, [sp], #4
 8003378:	b003      	add	sp, #12
 800337a:	4770      	bx	lr
 800337c:	20000050 	.word	0x20000050
 8003380:	ffff0208 	.word	0xffff0208

08003384 <memset>:
 8003384:	4603      	mov	r3, r0
 8003386:	4402      	add	r2, r0
 8003388:	4293      	cmp	r3, r2
 800338a:	d100      	bne.n	800338e <memset+0xa>
 800338c:	4770      	bx	lr
 800338e:	f803 1b01 	strb.w	r1, [r3], #1
 8003392:	e7f9      	b.n	8003388 <memset+0x4>

08003394 <__errno>:
 8003394:	4b01      	ldr	r3, [pc, #4]	@ (800339c <__errno+0x8>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000050 	.word	0x20000050

080033a0 <__libc_init_array>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	2600      	movs	r6, #0
 80033a4:	4d0c      	ldr	r5, [pc, #48]	@ (80033d8 <__libc_init_array+0x38>)
 80033a6:	4c0d      	ldr	r4, [pc, #52]	@ (80033dc <__libc_init_array+0x3c>)
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	42a6      	cmp	r6, r4
 80033ae:	d109      	bne.n	80033c4 <__libc_init_array+0x24>
 80033b0:	f000 fc78 	bl	8003ca4 <_init>
 80033b4:	2600      	movs	r6, #0
 80033b6:	4d0a      	ldr	r5, [pc, #40]	@ (80033e0 <__libc_init_array+0x40>)
 80033b8:	4c0a      	ldr	r4, [pc, #40]	@ (80033e4 <__libc_init_array+0x44>)
 80033ba:	1b64      	subs	r4, r4, r5
 80033bc:	10a4      	asrs	r4, r4, #2
 80033be:	42a6      	cmp	r6, r4
 80033c0:	d105      	bne.n	80033ce <__libc_init_array+0x2e>
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c8:	4798      	blx	r3
 80033ca:	3601      	adds	r6, #1
 80033cc:	e7ee      	b.n	80033ac <__libc_init_array+0xc>
 80033ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d2:	4798      	blx	r3
 80033d4:	3601      	adds	r6, #1
 80033d6:	e7f2      	b.n	80033be <__libc_init_array+0x1e>
 80033d8:	08003d54 	.word	0x08003d54
 80033dc:	08003d54 	.word	0x08003d54
 80033e0:	08003d54 	.word	0x08003d54
 80033e4:	08003d58 	.word	0x08003d58

080033e8 <__retarget_lock_acquire_recursive>:
 80033e8:	4770      	bx	lr

080033ea <__retarget_lock_release_recursive>:
 80033ea:	4770      	bx	lr

080033ec <_free_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4605      	mov	r5, r0
 80033f0:	2900      	cmp	r1, #0
 80033f2:	d040      	beq.n	8003476 <_free_r+0x8a>
 80033f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f8:	1f0c      	subs	r4, r1, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bfb8      	it	lt
 80033fe:	18e4      	addlt	r4, r4, r3
 8003400:	f000 f8de 	bl	80035c0 <__malloc_lock>
 8003404:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <_free_r+0x8c>)
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	b933      	cbnz	r3, 8003418 <_free_r+0x2c>
 800340a:	6063      	str	r3, [r4, #4]
 800340c:	6014      	str	r4, [r2, #0]
 800340e:	4628      	mov	r0, r5
 8003410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003414:	f000 b8da 	b.w	80035cc <__malloc_unlock>
 8003418:	42a3      	cmp	r3, r4
 800341a:	d908      	bls.n	800342e <_free_r+0x42>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	1821      	adds	r1, r4, r0
 8003420:	428b      	cmp	r3, r1
 8003422:	bf01      	itttt	eq
 8003424:	6819      	ldreq	r1, [r3, #0]
 8003426:	685b      	ldreq	r3, [r3, #4]
 8003428:	1809      	addeq	r1, r1, r0
 800342a:	6021      	streq	r1, [r4, #0]
 800342c:	e7ed      	b.n	800340a <_free_r+0x1e>
 800342e:	461a      	mov	r2, r3
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	b10b      	cbz	r3, 8003438 <_free_r+0x4c>
 8003434:	42a3      	cmp	r3, r4
 8003436:	d9fa      	bls.n	800342e <_free_r+0x42>
 8003438:	6811      	ldr	r1, [r2, #0]
 800343a:	1850      	adds	r0, r2, r1
 800343c:	42a0      	cmp	r0, r4
 800343e:	d10b      	bne.n	8003458 <_free_r+0x6c>
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	4401      	add	r1, r0
 8003444:	1850      	adds	r0, r2, r1
 8003446:	4283      	cmp	r3, r0
 8003448:	6011      	str	r1, [r2, #0]
 800344a:	d1e0      	bne.n	800340e <_free_r+0x22>
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4408      	add	r0, r1
 8003452:	6010      	str	r0, [r2, #0]
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	e7da      	b.n	800340e <_free_r+0x22>
 8003458:	d902      	bls.n	8003460 <_free_r+0x74>
 800345a:	230c      	movs	r3, #12
 800345c:	602b      	str	r3, [r5, #0]
 800345e:	e7d6      	b.n	800340e <_free_r+0x22>
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	1821      	adds	r1, r4, r0
 8003464:	428b      	cmp	r3, r1
 8003466:	bf01      	itttt	eq
 8003468:	6819      	ldreq	r1, [r3, #0]
 800346a:	685b      	ldreq	r3, [r3, #4]
 800346c:	1809      	addeq	r1, r1, r0
 800346e:	6021      	streq	r1, [r4, #0]
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	6054      	str	r4, [r2, #4]
 8003474:	e7cb      	b.n	800340e <_free_r+0x22>
 8003476:	bd38      	pop	{r3, r4, r5, pc}
 8003478:	20000314 	.word	0x20000314

0800347c <sbrk_aligned>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4e0f      	ldr	r6, [pc, #60]	@ (80034bc <sbrk_aligned+0x40>)
 8003480:	460c      	mov	r4, r1
 8003482:	6831      	ldr	r1, [r6, #0]
 8003484:	4605      	mov	r5, r0
 8003486:	b911      	cbnz	r1, 800348e <sbrk_aligned+0x12>
 8003488:	f000 fbaa 	bl	8003be0 <_sbrk_r>
 800348c:	6030      	str	r0, [r6, #0]
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	f000 fba5 	bl	8003be0 <_sbrk_r>
 8003496:	1c43      	adds	r3, r0, #1
 8003498:	d103      	bne.n	80034a2 <sbrk_aligned+0x26>
 800349a:	f04f 34ff 	mov.w	r4, #4294967295
 800349e:	4620      	mov	r0, r4
 80034a0:	bd70      	pop	{r4, r5, r6, pc}
 80034a2:	1cc4      	adds	r4, r0, #3
 80034a4:	f024 0403 	bic.w	r4, r4, #3
 80034a8:	42a0      	cmp	r0, r4
 80034aa:	d0f8      	beq.n	800349e <sbrk_aligned+0x22>
 80034ac:	1a21      	subs	r1, r4, r0
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 fb96 	bl	8003be0 <_sbrk_r>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d1f2      	bne.n	800349e <sbrk_aligned+0x22>
 80034b8:	e7ef      	b.n	800349a <sbrk_aligned+0x1e>
 80034ba:	bf00      	nop
 80034bc:	20000310 	.word	0x20000310

080034c0 <_malloc_r>:
 80034c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c4:	1ccd      	adds	r5, r1, #3
 80034c6:	f025 0503 	bic.w	r5, r5, #3
 80034ca:	3508      	adds	r5, #8
 80034cc:	2d0c      	cmp	r5, #12
 80034ce:	bf38      	it	cc
 80034d0:	250c      	movcc	r5, #12
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	4606      	mov	r6, r0
 80034d6:	db01      	blt.n	80034dc <_malloc_r+0x1c>
 80034d8:	42a9      	cmp	r1, r5
 80034da:	d904      	bls.n	80034e6 <_malloc_r+0x26>
 80034dc:	230c      	movs	r3, #12
 80034de:	6033      	str	r3, [r6, #0]
 80034e0:	2000      	movs	r0, #0
 80034e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035bc <_malloc_r+0xfc>
 80034ea:	f000 f869 	bl	80035c0 <__malloc_lock>
 80034ee:	f8d8 3000 	ldr.w	r3, [r8]
 80034f2:	461c      	mov	r4, r3
 80034f4:	bb44      	cbnz	r4, 8003548 <_malloc_r+0x88>
 80034f6:	4629      	mov	r1, r5
 80034f8:	4630      	mov	r0, r6
 80034fa:	f7ff ffbf 	bl	800347c <sbrk_aligned>
 80034fe:	1c43      	adds	r3, r0, #1
 8003500:	4604      	mov	r4, r0
 8003502:	d158      	bne.n	80035b6 <_malloc_r+0xf6>
 8003504:	f8d8 4000 	ldr.w	r4, [r8]
 8003508:	4627      	mov	r7, r4
 800350a:	2f00      	cmp	r7, #0
 800350c:	d143      	bne.n	8003596 <_malloc_r+0xd6>
 800350e:	2c00      	cmp	r4, #0
 8003510:	d04b      	beq.n	80035aa <_malloc_r+0xea>
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	4639      	mov	r1, r7
 8003516:	4630      	mov	r0, r6
 8003518:	eb04 0903 	add.w	r9, r4, r3
 800351c:	f000 fb60 	bl	8003be0 <_sbrk_r>
 8003520:	4581      	cmp	r9, r0
 8003522:	d142      	bne.n	80035aa <_malloc_r+0xea>
 8003524:	6821      	ldr	r1, [r4, #0]
 8003526:	4630      	mov	r0, r6
 8003528:	1a6d      	subs	r5, r5, r1
 800352a:	4629      	mov	r1, r5
 800352c:	f7ff ffa6 	bl	800347c <sbrk_aligned>
 8003530:	3001      	adds	r0, #1
 8003532:	d03a      	beq.n	80035aa <_malloc_r+0xea>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	442b      	add	r3, r5
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	f8d8 3000 	ldr.w	r3, [r8]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	bb62      	cbnz	r2, 800359c <_malloc_r+0xdc>
 8003542:	f8c8 7000 	str.w	r7, [r8]
 8003546:	e00f      	b.n	8003568 <_malloc_r+0xa8>
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	1b52      	subs	r2, r2, r5
 800354c:	d420      	bmi.n	8003590 <_malloc_r+0xd0>
 800354e:	2a0b      	cmp	r2, #11
 8003550:	d917      	bls.n	8003582 <_malloc_r+0xc2>
 8003552:	1961      	adds	r1, r4, r5
 8003554:	42a3      	cmp	r3, r4
 8003556:	6025      	str	r5, [r4, #0]
 8003558:	bf18      	it	ne
 800355a:	6059      	strne	r1, [r3, #4]
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	bf08      	it	eq
 8003560:	f8c8 1000 	streq.w	r1, [r8]
 8003564:	5162      	str	r2, [r4, r5]
 8003566:	604b      	str	r3, [r1, #4]
 8003568:	4630      	mov	r0, r6
 800356a:	f000 f82f 	bl	80035cc <__malloc_unlock>
 800356e:	f104 000b 	add.w	r0, r4, #11
 8003572:	1d23      	adds	r3, r4, #4
 8003574:	f020 0007 	bic.w	r0, r0, #7
 8003578:	1ac2      	subs	r2, r0, r3
 800357a:	bf1c      	itt	ne
 800357c:	1a1b      	subne	r3, r3, r0
 800357e:	50a3      	strne	r3, [r4, r2]
 8003580:	e7af      	b.n	80034e2 <_malloc_r+0x22>
 8003582:	6862      	ldr	r2, [r4, #4]
 8003584:	42a3      	cmp	r3, r4
 8003586:	bf0c      	ite	eq
 8003588:	f8c8 2000 	streq.w	r2, [r8]
 800358c:	605a      	strne	r2, [r3, #4]
 800358e:	e7eb      	b.n	8003568 <_malloc_r+0xa8>
 8003590:	4623      	mov	r3, r4
 8003592:	6864      	ldr	r4, [r4, #4]
 8003594:	e7ae      	b.n	80034f4 <_malloc_r+0x34>
 8003596:	463c      	mov	r4, r7
 8003598:	687f      	ldr	r7, [r7, #4]
 800359a:	e7b6      	b.n	800350a <_malloc_r+0x4a>
 800359c:	461a      	mov	r2, r3
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	d1fb      	bne.n	800359c <_malloc_r+0xdc>
 80035a4:	2300      	movs	r3, #0
 80035a6:	6053      	str	r3, [r2, #4]
 80035a8:	e7de      	b.n	8003568 <_malloc_r+0xa8>
 80035aa:	230c      	movs	r3, #12
 80035ac:	4630      	mov	r0, r6
 80035ae:	6033      	str	r3, [r6, #0]
 80035b0:	f000 f80c 	bl	80035cc <__malloc_unlock>
 80035b4:	e794      	b.n	80034e0 <_malloc_r+0x20>
 80035b6:	6005      	str	r5, [r0, #0]
 80035b8:	e7d6      	b.n	8003568 <_malloc_r+0xa8>
 80035ba:	bf00      	nop
 80035bc:	20000314 	.word	0x20000314

080035c0 <__malloc_lock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	@ (80035c8 <__malloc_lock+0x8>)
 80035c2:	f7ff bf11 	b.w	80033e8 <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	2000030c 	.word	0x2000030c

080035cc <__malloc_unlock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	@ (80035d4 <__malloc_unlock+0x8>)
 80035ce:	f7ff bf0c 	b.w	80033ea <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	2000030c 	.word	0x2000030c

080035d8 <__ssputs_r>:
 80035d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035dc:	461f      	mov	r7, r3
 80035de:	688e      	ldr	r6, [r1, #8]
 80035e0:	4682      	mov	sl, r0
 80035e2:	42be      	cmp	r6, r7
 80035e4:	460c      	mov	r4, r1
 80035e6:	4690      	mov	r8, r2
 80035e8:	680b      	ldr	r3, [r1, #0]
 80035ea:	d82d      	bhi.n	8003648 <__ssputs_r+0x70>
 80035ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035f4:	d026      	beq.n	8003644 <__ssputs_r+0x6c>
 80035f6:	6965      	ldr	r5, [r4, #20]
 80035f8:	6909      	ldr	r1, [r1, #16]
 80035fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035fe:	eba3 0901 	sub.w	r9, r3, r1
 8003602:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003606:	1c7b      	adds	r3, r7, #1
 8003608:	444b      	add	r3, r9
 800360a:	106d      	asrs	r5, r5, #1
 800360c:	429d      	cmp	r5, r3
 800360e:	bf38      	it	cc
 8003610:	461d      	movcc	r5, r3
 8003612:	0553      	lsls	r3, r2, #21
 8003614:	d527      	bpl.n	8003666 <__ssputs_r+0x8e>
 8003616:	4629      	mov	r1, r5
 8003618:	f7ff ff52 	bl	80034c0 <_malloc_r>
 800361c:	4606      	mov	r6, r0
 800361e:	b360      	cbz	r0, 800367a <__ssputs_r+0xa2>
 8003620:	464a      	mov	r2, r9
 8003622:	6921      	ldr	r1, [r4, #16]
 8003624:	f000 fafa 	bl	8003c1c <memcpy>
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800362e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	6126      	str	r6, [r4, #16]
 8003636:	444e      	add	r6, r9
 8003638:	6026      	str	r6, [r4, #0]
 800363a:	463e      	mov	r6, r7
 800363c:	6165      	str	r5, [r4, #20]
 800363e:	eba5 0509 	sub.w	r5, r5, r9
 8003642:	60a5      	str	r5, [r4, #8]
 8003644:	42be      	cmp	r6, r7
 8003646:	d900      	bls.n	800364a <__ssputs_r+0x72>
 8003648:	463e      	mov	r6, r7
 800364a:	4632      	mov	r2, r6
 800364c:	4641      	mov	r1, r8
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	f000 faac 	bl	8003bac <memmove>
 8003654:	2000      	movs	r0, #0
 8003656:	68a3      	ldr	r3, [r4, #8]
 8003658:	1b9b      	subs	r3, r3, r6
 800365a:	60a3      	str	r3, [r4, #8]
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	4433      	add	r3, r6
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003666:	462a      	mov	r2, r5
 8003668:	f000 fae6 	bl	8003c38 <_realloc_r>
 800366c:	4606      	mov	r6, r0
 800366e:	2800      	cmp	r0, #0
 8003670:	d1e0      	bne.n	8003634 <__ssputs_r+0x5c>
 8003672:	4650      	mov	r0, sl
 8003674:	6921      	ldr	r1, [r4, #16]
 8003676:	f7ff feb9 	bl	80033ec <_free_r>
 800367a:	230c      	movs	r3, #12
 800367c:	f8ca 3000 	str.w	r3, [sl]
 8003680:	89a3      	ldrh	r3, [r4, #12]
 8003682:	f04f 30ff 	mov.w	r0, #4294967295
 8003686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	e7e9      	b.n	8003662 <__ssputs_r+0x8a>
	...

08003690 <_svfiprintf_r>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	4698      	mov	r8, r3
 8003696:	898b      	ldrh	r3, [r1, #12]
 8003698:	4607      	mov	r7, r0
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	460d      	mov	r5, r1
 800369e:	4614      	mov	r4, r2
 80036a0:	b09d      	sub	sp, #116	@ 0x74
 80036a2:	d510      	bpl.n	80036c6 <_svfiprintf_r+0x36>
 80036a4:	690b      	ldr	r3, [r1, #16]
 80036a6:	b973      	cbnz	r3, 80036c6 <_svfiprintf_r+0x36>
 80036a8:	2140      	movs	r1, #64	@ 0x40
 80036aa:	f7ff ff09 	bl	80034c0 <_malloc_r>
 80036ae:	6028      	str	r0, [r5, #0]
 80036b0:	6128      	str	r0, [r5, #16]
 80036b2:	b930      	cbnz	r0, 80036c2 <_svfiprintf_r+0x32>
 80036b4:	230c      	movs	r3, #12
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	b01d      	add	sp, #116	@ 0x74
 80036be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c2:	2340      	movs	r3, #64	@ 0x40
 80036c4:	616b      	str	r3, [r5, #20]
 80036c6:	2300      	movs	r3, #0
 80036c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ca:	2320      	movs	r3, #32
 80036cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036d0:	2330      	movs	r3, #48	@ 0x30
 80036d2:	f04f 0901 	mov.w	r9, #1
 80036d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80036da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003874 <_svfiprintf_r+0x1e4>
 80036de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036e2:	4623      	mov	r3, r4
 80036e4:	469a      	mov	sl, r3
 80036e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ea:	b10a      	cbz	r2, 80036f0 <_svfiprintf_r+0x60>
 80036ec:	2a25      	cmp	r2, #37	@ 0x25
 80036ee:	d1f9      	bne.n	80036e4 <_svfiprintf_r+0x54>
 80036f0:	ebba 0b04 	subs.w	fp, sl, r4
 80036f4:	d00b      	beq.n	800370e <_svfiprintf_r+0x7e>
 80036f6:	465b      	mov	r3, fp
 80036f8:	4622      	mov	r2, r4
 80036fa:	4629      	mov	r1, r5
 80036fc:	4638      	mov	r0, r7
 80036fe:	f7ff ff6b 	bl	80035d8 <__ssputs_r>
 8003702:	3001      	adds	r0, #1
 8003704:	f000 80a7 	beq.w	8003856 <_svfiprintf_r+0x1c6>
 8003708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800370a:	445a      	add	r2, fp
 800370c:	9209      	str	r2, [sp, #36]	@ 0x24
 800370e:	f89a 3000 	ldrb.w	r3, [sl]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 809f 	beq.w	8003856 <_svfiprintf_r+0x1c6>
 8003718:	2300      	movs	r3, #0
 800371a:	f04f 32ff 	mov.w	r2, #4294967295
 800371e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003722:	f10a 0a01 	add.w	sl, sl, #1
 8003726:	9304      	str	r3, [sp, #16]
 8003728:	9307      	str	r3, [sp, #28]
 800372a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800372e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003730:	4654      	mov	r4, sl
 8003732:	2205      	movs	r2, #5
 8003734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003738:	484e      	ldr	r0, [pc, #312]	@ (8003874 <_svfiprintf_r+0x1e4>)
 800373a:	f000 fa61 	bl	8003c00 <memchr>
 800373e:	9a04      	ldr	r2, [sp, #16]
 8003740:	b9d8      	cbnz	r0, 800377a <_svfiprintf_r+0xea>
 8003742:	06d0      	lsls	r0, r2, #27
 8003744:	bf44      	itt	mi
 8003746:	2320      	movmi	r3, #32
 8003748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800374c:	0711      	lsls	r1, r2, #28
 800374e:	bf44      	itt	mi
 8003750:	232b      	movmi	r3, #43	@ 0x2b
 8003752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003756:	f89a 3000 	ldrb.w	r3, [sl]
 800375a:	2b2a      	cmp	r3, #42	@ 0x2a
 800375c:	d015      	beq.n	800378a <_svfiprintf_r+0xfa>
 800375e:	4654      	mov	r4, sl
 8003760:	2000      	movs	r0, #0
 8003762:	f04f 0c0a 	mov.w	ip, #10
 8003766:	9a07      	ldr	r2, [sp, #28]
 8003768:	4621      	mov	r1, r4
 800376a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800376e:	3b30      	subs	r3, #48	@ 0x30
 8003770:	2b09      	cmp	r3, #9
 8003772:	d94b      	bls.n	800380c <_svfiprintf_r+0x17c>
 8003774:	b1b0      	cbz	r0, 80037a4 <_svfiprintf_r+0x114>
 8003776:	9207      	str	r2, [sp, #28]
 8003778:	e014      	b.n	80037a4 <_svfiprintf_r+0x114>
 800377a:	eba0 0308 	sub.w	r3, r0, r8
 800377e:	fa09 f303 	lsl.w	r3, r9, r3
 8003782:	4313      	orrs	r3, r2
 8003784:	46a2      	mov	sl, r4
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	e7d2      	b.n	8003730 <_svfiprintf_r+0xa0>
 800378a:	9b03      	ldr	r3, [sp, #12]
 800378c:	1d19      	adds	r1, r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	9103      	str	r1, [sp, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	bfbb      	ittet	lt
 8003796:	425b      	neglt	r3, r3
 8003798:	f042 0202 	orrlt.w	r2, r2, #2
 800379c:	9307      	strge	r3, [sp, #28]
 800379e:	9307      	strlt	r3, [sp, #28]
 80037a0:	bfb8      	it	lt
 80037a2:	9204      	strlt	r2, [sp, #16]
 80037a4:	7823      	ldrb	r3, [r4, #0]
 80037a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80037a8:	d10a      	bne.n	80037c0 <_svfiprintf_r+0x130>
 80037aa:	7863      	ldrb	r3, [r4, #1]
 80037ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80037ae:	d132      	bne.n	8003816 <_svfiprintf_r+0x186>
 80037b0:	9b03      	ldr	r3, [sp, #12]
 80037b2:	3402      	adds	r4, #2
 80037b4:	1d1a      	adds	r2, r3, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	9203      	str	r2, [sp, #12]
 80037ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037be:	9305      	str	r3, [sp, #20]
 80037c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003878 <_svfiprintf_r+0x1e8>
 80037c4:	2203      	movs	r2, #3
 80037c6:	4650      	mov	r0, sl
 80037c8:	7821      	ldrb	r1, [r4, #0]
 80037ca:	f000 fa19 	bl	8003c00 <memchr>
 80037ce:	b138      	cbz	r0, 80037e0 <_svfiprintf_r+0x150>
 80037d0:	2240      	movs	r2, #64	@ 0x40
 80037d2:	9b04      	ldr	r3, [sp, #16]
 80037d4:	eba0 000a 	sub.w	r0, r0, sl
 80037d8:	4082      	lsls	r2, r0
 80037da:	4313      	orrs	r3, r2
 80037dc:	3401      	adds	r4, #1
 80037de:	9304      	str	r3, [sp, #16]
 80037e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e4:	2206      	movs	r2, #6
 80037e6:	4825      	ldr	r0, [pc, #148]	@ (800387c <_svfiprintf_r+0x1ec>)
 80037e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037ec:	f000 fa08 	bl	8003c00 <memchr>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d036      	beq.n	8003862 <_svfiprintf_r+0x1d2>
 80037f4:	4b22      	ldr	r3, [pc, #136]	@ (8003880 <_svfiprintf_r+0x1f0>)
 80037f6:	bb1b      	cbnz	r3, 8003840 <_svfiprintf_r+0x1b0>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	3307      	adds	r3, #7
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	3308      	adds	r3, #8
 8003802:	9303      	str	r3, [sp, #12]
 8003804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003806:	4433      	add	r3, r6
 8003808:	9309      	str	r3, [sp, #36]	@ 0x24
 800380a:	e76a      	b.n	80036e2 <_svfiprintf_r+0x52>
 800380c:	460c      	mov	r4, r1
 800380e:	2001      	movs	r0, #1
 8003810:	fb0c 3202 	mla	r2, ip, r2, r3
 8003814:	e7a8      	b.n	8003768 <_svfiprintf_r+0xd8>
 8003816:	2300      	movs	r3, #0
 8003818:	f04f 0c0a 	mov.w	ip, #10
 800381c:	4619      	mov	r1, r3
 800381e:	3401      	adds	r4, #1
 8003820:	9305      	str	r3, [sp, #20]
 8003822:	4620      	mov	r0, r4
 8003824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003828:	3a30      	subs	r2, #48	@ 0x30
 800382a:	2a09      	cmp	r2, #9
 800382c:	d903      	bls.n	8003836 <_svfiprintf_r+0x1a6>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0c6      	beq.n	80037c0 <_svfiprintf_r+0x130>
 8003832:	9105      	str	r1, [sp, #20]
 8003834:	e7c4      	b.n	80037c0 <_svfiprintf_r+0x130>
 8003836:	4604      	mov	r4, r0
 8003838:	2301      	movs	r3, #1
 800383a:	fb0c 2101 	mla	r1, ip, r1, r2
 800383e:	e7f0      	b.n	8003822 <_svfiprintf_r+0x192>
 8003840:	ab03      	add	r3, sp, #12
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	462a      	mov	r2, r5
 8003846:	4638      	mov	r0, r7
 8003848:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <_svfiprintf_r+0x1f4>)
 800384a:	a904      	add	r1, sp, #16
 800384c:	f3af 8000 	nop.w
 8003850:	1c42      	adds	r2, r0, #1
 8003852:	4606      	mov	r6, r0
 8003854:	d1d6      	bne.n	8003804 <_svfiprintf_r+0x174>
 8003856:	89ab      	ldrh	r3, [r5, #12]
 8003858:	065b      	lsls	r3, r3, #25
 800385a:	f53f af2d 	bmi.w	80036b8 <_svfiprintf_r+0x28>
 800385e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003860:	e72c      	b.n	80036bc <_svfiprintf_r+0x2c>
 8003862:	ab03      	add	r3, sp, #12
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	462a      	mov	r2, r5
 8003868:	4638      	mov	r0, r7
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <_svfiprintf_r+0x1f4>)
 800386c:	a904      	add	r1, sp, #16
 800386e:	f000 f87d 	bl	800396c <_printf_i>
 8003872:	e7ed      	b.n	8003850 <_svfiprintf_r+0x1c0>
 8003874:	08003d1e 	.word	0x08003d1e
 8003878:	08003d24 	.word	0x08003d24
 800387c:	08003d28 	.word	0x08003d28
 8003880:	00000000 	.word	0x00000000
 8003884:	080035d9 	.word	0x080035d9

08003888 <_printf_common>:
 8003888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	4616      	mov	r6, r2
 800388e:	4698      	mov	r8, r3
 8003890:	688a      	ldr	r2, [r1, #8]
 8003892:	690b      	ldr	r3, [r1, #16]
 8003894:	4607      	mov	r7, r0
 8003896:	4293      	cmp	r3, r2
 8003898:	bfb8      	it	lt
 800389a:	4613      	movlt	r3, r2
 800389c:	6033      	str	r3, [r6, #0]
 800389e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038a2:	460c      	mov	r4, r1
 80038a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038a8:	b10a      	cbz	r2, 80038ae <_printf_common+0x26>
 80038aa:	3301      	adds	r3, #1
 80038ac:	6033      	str	r3, [r6, #0]
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	0699      	lsls	r1, r3, #26
 80038b2:	bf42      	ittt	mi
 80038b4:	6833      	ldrmi	r3, [r6, #0]
 80038b6:	3302      	addmi	r3, #2
 80038b8:	6033      	strmi	r3, [r6, #0]
 80038ba:	6825      	ldr	r5, [r4, #0]
 80038bc:	f015 0506 	ands.w	r5, r5, #6
 80038c0:	d106      	bne.n	80038d0 <_printf_common+0x48>
 80038c2:	f104 0a19 	add.w	sl, r4, #25
 80038c6:	68e3      	ldr	r3, [r4, #12]
 80038c8:	6832      	ldr	r2, [r6, #0]
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	42ab      	cmp	r3, r5
 80038ce:	dc2b      	bgt.n	8003928 <_printf_common+0xa0>
 80038d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	3b00      	subs	r3, #0
 80038d8:	bf18      	it	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	0692      	lsls	r2, r2, #26
 80038de:	d430      	bmi.n	8003942 <_printf_common+0xba>
 80038e0:	4641      	mov	r1, r8
 80038e2:	4638      	mov	r0, r7
 80038e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038e8:	47c8      	blx	r9
 80038ea:	3001      	adds	r0, #1
 80038ec:	d023      	beq.n	8003936 <_printf_common+0xae>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	6922      	ldr	r2, [r4, #16]
 80038f2:	f003 0306 	and.w	r3, r3, #6
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	bf14      	ite	ne
 80038fa:	2500      	movne	r5, #0
 80038fc:	6833      	ldreq	r3, [r6, #0]
 80038fe:	f04f 0600 	mov.w	r6, #0
 8003902:	bf08      	it	eq
 8003904:	68e5      	ldreq	r5, [r4, #12]
 8003906:	f104 041a 	add.w	r4, r4, #26
 800390a:	bf08      	it	eq
 800390c:	1aed      	subeq	r5, r5, r3
 800390e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003912:	bf08      	it	eq
 8003914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003918:	4293      	cmp	r3, r2
 800391a:	bfc4      	itt	gt
 800391c:	1a9b      	subgt	r3, r3, r2
 800391e:	18ed      	addgt	r5, r5, r3
 8003920:	42b5      	cmp	r5, r6
 8003922:	d11a      	bne.n	800395a <_printf_common+0xd2>
 8003924:	2000      	movs	r0, #0
 8003926:	e008      	b.n	800393a <_printf_common+0xb2>
 8003928:	2301      	movs	r3, #1
 800392a:	4652      	mov	r2, sl
 800392c:	4641      	mov	r1, r8
 800392e:	4638      	mov	r0, r7
 8003930:	47c8      	blx	r9
 8003932:	3001      	adds	r0, #1
 8003934:	d103      	bne.n	800393e <_printf_common+0xb6>
 8003936:	f04f 30ff 	mov.w	r0, #4294967295
 800393a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393e:	3501      	adds	r5, #1
 8003940:	e7c1      	b.n	80038c6 <_printf_common+0x3e>
 8003942:	2030      	movs	r0, #48	@ 0x30
 8003944:	18e1      	adds	r1, r4, r3
 8003946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003950:	4422      	add	r2, r4
 8003952:	3302      	adds	r3, #2
 8003954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003958:	e7c2      	b.n	80038e0 <_printf_common+0x58>
 800395a:	2301      	movs	r3, #1
 800395c:	4622      	mov	r2, r4
 800395e:	4641      	mov	r1, r8
 8003960:	4638      	mov	r0, r7
 8003962:	47c8      	blx	r9
 8003964:	3001      	adds	r0, #1
 8003966:	d0e6      	beq.n	8003936 <_printf_common+0xae>
 8003968:	3601      	adds	r6, #1
 800396a:	e7d9      	b.n	8003920 <_printf_common+0x98>

0800396c <_printf_i>:
 800396c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003970:	7e0f      	ldrb	r7, [r1, #24]
 8003972:	4691      	mov	r9, r2
 8003974:	2f78      	cmp	r7, #120	@ 0x78
 8003976:	4680      	mov	r8, r0
 8003978:	460c      	mov	r4, r1
 800397a:	469a      	mov	sl, r3
 800397c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800397e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003982:	d807      	bhi.n	8003994 <_printf_i+0x28>
 8003984:	2f62      	cmp	r7, #98	@ 0x62
 8003986:	d80a      	bhi.n	800399e <_printf_i+0x32>
 8003988:	2f00      	cmp	r7, #0
 800398a:	f000 80d3 	beq.w	8003b34 <_printf_i+0x1c8>
 800398e:	2f58      	cmp	r7, #88	@ 0x58
 8003990:	f000 80ba 	beq.w	8003b08 <_printf_i+0x19c>
 8003994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800399c:	e03a      	b.n	8003a14 <_printf_i+0xa8>
 800399e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039a2:	2b15      	cmp	r3, #21
 80039a4:	d8f6      	bhi.n	8003994 <_printf_i+0x28>
 80039a6:	a101      	add	r1, pc, #4	@ (adr r1, 80039ac <_printf_i+0x40>)
 80039a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039ac:	08003a05 	.word	0x08003a05
 80039b0:	08003a19 	.word	0x08003a19
 80039b4:	08003995 	.word	0x08003995
 80039b8:	08003995 	.word	0x08003995
 80039bc:	08003995 	.word	0x08003995
 80039c0:	08003995 	.word	0x08003995
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003995 	.word	0x08003995
 80039cc:	08003995 	.word	0x08003995
 80039d0:	08003995 	.word	0x08003995
 80039d4:	08003995 	.word	0x08003995
 80039d8:	08003b1b 	.word	0x08003b1b
 80039dc:	08003a43 	.word	0x08003a43
 80039e0:	08003ad5 	.word	0x08003ad5
 80039e4:	08003995 	.word	0x08003995
 80039e8:	08003995 	.word	0x08003995
 80039ec:	08003b3d 	.word	0x08003b3d
 80039f0:	08003995 	.word	0x08003995
 80039f4:	08003a43 	.word	0x08003a43
 80039f8:	08003995 	.word	0x08003995
 80039fc:	08003995 	.word	0x08003995
 8003a00:	08003add 	.word	0x08003add
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6032      	str	r2, [r6, #0]
 8003a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a14:	2301      	movs	r3, #1
 8003a16:	e09e      	b.n	8003b56 <_printf_i+0x1ea>
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	1d19      	adds	r1, r3, #4
 8003a1e:	6031      	str	r1, [r6, #0]
 8003a20:	0606      	lsls	r6, r0, #24
 8003a22:	d501      	bpl.n	8003a28 <_printf_i+0xbc>
 8003a24:	681d      	ldr	r5, [r3, #0]
 8003a26:	e003      	b.n	8003a30 <_printf_i+0xc4>
 8003a28:	0645      	lsls	r5, r0, #25
 8003a2a:	d5fb      	bpl.n	8003a24 <_printf_i+0xb8>
 8003a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	da03      	bge.n	8003a3c <_printf_i+0xd0>
 8003a34:	232d      	movs	r3, #45	@ 0x2d
 8003a36:	426d      	negs	r5, r5
 8003a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a3c:	230a      	movs	r3, #10
 8003a3e:	4859      	ldr	r0, [pc, #356]	@ (8003ba4 <_printf_i+0x238>)
 8003a40:	e011      	b.n	8003a66 <_printf_i+0xfa>
 8003a42:	6821      	ldr	r1, [r4, #0]
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	0608      	lsls	r0, r1, #24
 8003a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a4c:	d402      	bmi.n	8003a54 <_printf_i+0xe8>
 8003a4e:	0649      	lsls	r1, r1, #25
 8003a50:	bf48      	it	mi
 8003a52:	b2ad      	uxthmi	r5, r5
 8003a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a56:	6033      	str	r3, [r6, #0]
 8003a58:	bf14      	ite	ne
 8003a5a:	230a      	movne	r3, #10
 8003a5c:	2308      	moveq	r3, #8
 8003a5e:	4851      	ldr	r0, [pc, #324]	@ (8003ba4 <_printf_i+0x238>)
 8003a60:	2100      	movs	r1, #0
 8003a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a66:	6866      	ldr	r6, [r4, #4]
 8003a68:	2e00      	cmp	r6, #0
 8003a6a:	bfa8      	it	ge
 8003a6c:	6821      	ldrge	r1, [r4, #0]
 8003a6e:	60a6      	str	r6, [r4, #8]
 8003a70:	bfa4      	itt	ge
 8003a72:	f021 0104 	bicge.w	r1, r1, #4
 8003a76:	6021      	strge	r1, [r4, #0]
 8003a78:	b90d      	cbnz	r5, 8003a7e <_printf_i+0x112>
 8003a7a:	2e00      	cmp	r6, #0
 8003a7c:	d04b      	beq.n	8003b16 <_printf_i+0x1aa>
 8003a7e:	4616      	mov	r6, r2
 8003a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a84:	fb03 5711 	mls	r7, r3, r1, r5
 8003a88:	5dc7      	ldrb	r7, [r0, r7]
 8003a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a8e:	462f      	mov	r7, r5
 8003a90:	42bb      	cmp	r3, r7
 8003a92:	460d      	mov	r5, r1
 8003a94:	d9f4      	bls.n	8003a80 <_printf_i+0x114>
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d10b      	bne.n	8003ab2 <_printf_i+0x146>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	07df      	lsls	r7, r3, #31
 8003a9e:	d508      	bpl.n	8003ab2 <_printf_i+0x146>
 8003aa0:	6923      	ldr	r3, [r4, #16]
 8003aa2:	6861      	ldr	r1, [r4, #4]
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	bfde      	ittt	le
 8003aa8:	2330      	movle	r3, #48	@ 0x30
 8003aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ab2:	1b92      	subs	r2, r2, r6
 8003ab4:	6122      	str	r2, [r4, #16]
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4640      	mov	r0, r8
 8003abc:	f8cd a000 	str.w	sl, [sp]
 8003ac0:	aa03      	add	r2, sp, #12
 8003ac2:	f7ff fee1 	bl	8003888 <_printf_common>
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d14a      	bne.n	8003b60 <_printf_i+0x1f4>
 8003aca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ace:	b004      	add	sp, #16
 8003ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	f043 0320 	orr.w	r3, r3, #32
 8003ada:	6023      	str	r3, [r4, #0]
 8003adc:	2778      	movs	r7, #120	@ 0x78
 8003ade:	4832      	ldr	r0, [pc, #200]	@ (8003ba8 <_printf_i+0x23c>)
 8003ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	6831      	ldr	r1, [r6, #0]
 8003ae8:	061f      	lsls	r7, r3, #24
 8003aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aee:	d402      	bmi.n	8003af6 <_printf_i+0x18a>
 8003af0:	065f      	lsls	r7, r3, #25
 8003af2:	bf48      	it	mi
 8003af4:	b2ad      	uxthmi	r5, r5
 8003af6:	6031      	str	r1, [r6, #0]
 8003af8:	07d9      	lsls	r1, r3, #31
 8003afa:	bf44      	itt	mi
 8003afc:	f043 0320 	orrmi.w	r3, r3, #32
 8003b00:	6023      	strmi	r3, [r4, #0]
 8003b02:	b11d      	cbz	r5, 8003b0c <_printf_i+0x1a0>
 8003b04:	2310      	movs	r3, #16
 8003b06:	e7ab      	b.n	8003a60 <_printf_i+0xf4>
 8003b08:	4826      	ldr	r0, [pc, #152]	@ (8003ba4 <_printf_i+0x238>)
 8003b0a:	e7e9      	b.n	8003ae0 <_printf_i+0x174>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	f023 0320 	bic.w	r3, r3, #32
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	e7f6      	b.n	8003b04 <_printf_i+0x198>
 8003b16:	4616      	mov	r6, r2
 8003b18:	e7bd      	b.n	8003a96 <_printf_i+0x12a>
 8003b1a:	6833      	ldr	r3, [r6, #0]
 8003b1c:	6825      	ldr	r5, [r4, #0]
 8003b1e:	1d18      	adds	r0, r3, #4
 8003b20:	6961      	ldr	r1, [r4, #20]
 8003b22:	6030      	str	r0, [r6, #0]
 8003b24:	062e      	lsls	r6, r5, #24
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	d501      	bpl.n	8003b2e <_printf_i+0x1c2>
 8003b2a:	6019      	str	r1, [r3, #0]
 8003b2c:	e002      	b.n	8003b34 <_printf_i+0x1c8>
 8003b2e:	0668      	lsls	r0, r5, #25
 8003b30:	d5fb      	bpl.n	8003b2a <_printf_i+0x1be>
 8003b32:	8019      	strh	r1, [r3, #0]
 8003b34:	2300      	movs	r3, #0
 8003b36:	4616      	mov	r6, r2
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	e7bc      	b.n	8003ab6 <_printf_i+0x14a>
 8003b3c:	6833      	ldr	r3, [r6, #0]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	1d1a      	adds	r2, r3, #4
 8003b42:	6032      	str	r2, [r6, #0]
 8003b44:	681e      	ldr	r6, [r3, #0]
 8003b46:	6862      	ldr	r2, [r4, #4]
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 f859 	bl	8003c00 <memchr>
 8003b4e:	b108      	cbz	r0, 8003b54 <_printf_i+0x1e8>
 8003b50:	1b80      	subs	r0, r0, r6
 8003b52:	6060      	str	r0, [r4, #4]
 8003b54:	6863      	ldr	r3, [r4, #4]
 8003b56:	6123      	str	r3, [r4, #16]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b5e:	e7aa      	b.n	8003ab6 <_printf_i+0x14a>
 8003b60:	4632      	mov	r2, r6
 8003b62:	4649      	mov	r1, r9
 8003b64:	4640      	mov	r0, r8
 8003b66:	6923      	ldr	r3, [r4, #16]
 8003b68:	47d0      	blx	sl
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d0ad      	beq.n	8003aca <_printf_i+0x15e>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	079b      	lsls	r3, r3, #30
 8003b72:	d413      	bmi.n	8003b9c <_printf_i+0x230>
 8003b74:	68e0      	ldr	r0, [r4, #12]
 8003b76:	9b03      	ldr	r3, [sp, #12]
 8003b78:	4298      	cmp	r0, r3
 8003b7a:	bfb8      	it	lt
 8003b7c:	4618      	movlt	r0, r3
 8003b7e:	e7a6      	b.n	8003ace <_printf_i+0x162>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4632      	mov	r2, r6
 8003b84:	4649      	mov	r1, r9
 8003b86:	4640      	mov	r0, r8
 8003b88:	47d0      	blx	sl
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d09d      	beq.n	8003aca <_printf_i+0x15e>
 8003b8e:	3501      	adds	r5, #1
 8003b90:	68e3      	ldr	r3, [r4, #12]
 8003b92:	9903      	ldr	r1, [sp, #12]
 8003b94:	1a5b      	subs	r3, r3, r1
 8003b96:	42ab      	cmp	r3, r5
 8003b98:	dcf2      	bgt.n	8003b80 <_printf_i+0x214>
 8003b9a:	e7eb      	b.n	8003b74 <_printf_i+0x208>
 8003b9c:	2500      	movs	r5, #0
 8003b9e:	f104 0619 	add.w	r6, r4, #25
 8003ba2:	e7f5      	b.n	8003b90 <_printf_i+0x224>
 8003ba4:	08003d2f 	.word	0x08003d2f
 8003ba8:	08003d40 	.word	0x08003d40

08003bac <memmove>:
 8003bac:	4288      	cmp	r0, r1
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	eb01 0402 	add.w	r4, r1, r2
 8003bb4:	d902      	bls.n	8003bbc <memmove+0x10>
 8003bb6:	4284      	cmp	r4, r0
 8003bb8:	4623      	mov	r3, r4
 8003bba:	d807      	bhi.n	8003bcc <memmove+0x20>
 8003bbc:	1e43      	subs	r3, r0, #1
 8003bbe:	42a1      	cmp	r1, r4
 8003bc0:	d008      	beq.n	8003bd4 <memmove+0x28>
 8003bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bca:	e7f8      	b.n	8003bbe <memmove+0x12>
 8003bcc:	4601      	mov	r1, r0
 8003bce:	4402      	add	r2, r0
 8003bd0:	428a      	cmp	r2, r1
 8003bd2:	d100      	bne.n	8003bd6 <memmove+0x2a>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bde:	e7f7      	b.n	8003bd0 <memmove+0x24>

08003be0 <_sbrk_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	2300      	movs	r3, #0
 8003be4:	4d05      	ldr	r5, [pc, #20]	@ (8003bfc <_sbrk_r+0x1c>)
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	f7fc ff9c 	bl	8000b28 <_sbrk>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_sbrk_r+0x1a>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_sbrk_r+0x1a>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	20000308 	.word	0x20000308

08003c00 <memchr>:
 8003c00:	4603      	mov	r3, r0
 8003c02:	b510      	push	{r4, lr}
 8003c04:	b2c9      	uxtb	r1, r1
 8003c06:	4402      	add	r2, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	d101      	bne.n	8003c12 <memchr+0x12>
 8003c0e:	2000      	movs	r0, #0
 8003c10:	e003      	b.n	8003c1a <memchr+0x1a>
 8003c12:	7804      	ldrb	r4, [r0, #0]
 8003c14:	3301      	adds	r3, #1
 8003c16:	428c      	cmp	r4, r1
 8003c18:	d1f6      	bne.n	8003c08 <memchr+0x8>
 8003c1a:	bd10      	pop	{r4, pc}

08003c1c <memcpy>:
 8003c1c:	440a      	add	r2, r1
 8003c1e:	4291      	cmp	r1, r2
 8003c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c24:	d100      	bne.n	8003c28 <memcpy+0xc>
 8003c26:	4770      	bx	lr
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c2e:	4291      	cmp	r1, r2
 8003c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c34:	d1f9      	bne.n	8003c2a <memcpy+0xe>
 8003c36:	bd10      	pop	{r4, pc}

08003c38 <_realloc_r>:
 8003c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3c:	4680      	mov	r8, r0
 8003c3e:	4615      	mov	r5, r2
 8003c40:	460c      	mov	r4, r1
 8003c42:	b921      	cbnz	r1, 8003c4e <_realloc_r+0x16>
 8003c44:	4611      	mov	r1, r2
 8003c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4a:	f7ff bc39 	b.w	80034c0 <_malloc_r>
 8003c4e:	b92a      	cbnz	r2, 8003c5c <_realloc_r+0x24>
 8003c50:	f7ff fbcc 	bl	80033ec <_free_r>
 8003c54:	2400      	movs	r4, #0
 8003c56:	4620      	mov	r0, r4
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5c:	f000 f81a 	bl	8003c94 <_malloc_usable_size_r>
 8003c60:	4285      	cmp	r5, r0
 8003c62:	4606      	mov	r6, r0
 8003c64:	d802      	bhi.n	8003c6c <_realloc_r+0x34>
 8003c66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c6a:	d8f4      	bhi.n	8003c56 <_realloc_r+0x1e>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4640      	mov	r0, r8
 8003c70:	f7ff fc26 	bl	80034c0 <_malloc_r>
 8003c74:	4607      	mov	r7, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d0ec      	beq.n	8003c54 <_realloc_r+0x1c>
 8003c7a:	42b5      	cmp	r5, r6
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4621      	mov	r1, r4
 8003c80:	bf28      	it	cs
 8003c82:	4632      	movcs	r2, r6
 8003c84:	f7ff ffca 	bl	8003c1c <memcpy>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	f7ff fbae 	bl	80033ec <_free_r>
 8003c90:	463c      	mov	r4, r7
 8003c92:	e7e0      	b.n	8003c56 <_realloc_r+0x1e>

08003c94 <_malloc_usable_size_r>:
 8003c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c98:	1f18      	subs	r0, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfbc      	itt	lt
 8003c9e:	580b      	ldrlt	r3, [r1, r0]
 8003ca0:	18c0      	addlt	r0, r0, r3
 8003ca2:	4770      	bx	lr

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr
