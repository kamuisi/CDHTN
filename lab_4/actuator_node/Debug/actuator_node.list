
actuator_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004348  08004348  00005348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004450  08004450  000060b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004450  08004450  000060b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004450  08004450  000060b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004450  08004450  00005450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004454  08004454  00005454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08004458  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200000b0  08004508  000060b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08004508  00006328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d822  00000000  00000000  000060d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef0  00000000  00000000  000138fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000157f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abd  00000000  00000000  000165b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d55  00000000  00000000  00017075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea5b  00000000  00000000  0002fdca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb5e  00000000  00000000  0003e825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c4  00000000  00000000  000cd3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d178c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004330 	.word	0x08004330

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08004330 	.word	0x08004330

0800014c <Send_SF_Error_Code>:
static void MX_CAN_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void Send_SF_Error_Code(uint8_t SID, uint8_t error_code)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	TxData[0] = (SF << 4) | 0x2;
 800015c:	4b0a      	ldr	r3, [pc, #40]	@ (8000188 <Send_SF_Error_Code+0x3c>)
 800015e:	2202      	movs	r2, #2
 8000160:	701a      	strb	r2, [r3, #0]
	TxData[1] = Identifier_Negative_Response;
 8000162:	4b09      	ldr	r3, [pc, #36]	@ (8000188 <Send_SF_Error_Code+0x3c>)
 8000164:	227f      	movs	r2, #127	@ 0x7f
 8000166:	705a      	strb	r2, [r3, #1]
	TxData[2] = SID;
 8000168:	4a07      	ldr	r2, [pc, #28]	@ (8000188 <Send_SF_Error_Code+0x3c>)
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	7093      	strb	r3, [r2, #2]
	TxData[3] = error_code;
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <Send_SF_Error_Code+0x3c>)
 8000170:	79bb      	ldrb	r3, [r7, #6]
 8000172:	70d3      	strb	r3, [r2, #3]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000174:	4b05      	ldr	r3, [pc, #20]	@ (800018c <Send_SF_Error_Code+0x40>)
 8000176:	4a04      	ldr	r2, [pc, #16]	@ (8000188 <Send_SF_Error_Code+0x3c>)
 8000178:	4905      	ldr	r1, [pc, #20]	@ (8000190 <Send_SF_Error_Code+0x44>)
 800017a:	4806      	ldr	r0, [pc, #24]	@ (8000194 <Send_SF_Error_Code+0x48>)
 800017c:	f001 f89c 	bl	80012b8 <HAL_CAN_AddTxMessage>
}
 8000180:	bf00      	nop
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}
 8000188:	200001a8 	.word	0x200001a8
 800018c:	200001b0 	.word	0x200001b0
 8000190:	20000000 	.word	0x20000000
 8000194:	200000cc 	.word	0x200000cc

08000198 <Read_Service_Handler>:

void Read_Service_Handler(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	if(RxData[2] == RecordDataIdentifier_High_Byte && RxData[3] == RecordDataIdentifier_Low_Byte)
 800019c:	4b14      	ldr	r3, [pc, #80]	@ (80001f0 <Read_Service_Handler+0x58>)
 800019e:	789b      	ldrb	r3, [r3, #2]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d11d      	bne.n	80001e0 <Read_Service_Handler+0x48>
 80001a4:	4b12      	ldr	r3, [pc, #72]	@ (80001f0 <Read_Service_Handler+0x58>)
 80001a6:	78db      	ldrb	r3, [r3, #3]
 80001a8:	2b23      	cmp	r3, #35	@ 0x23
 80001aa:	d119      	bne.n	80001e0 <Read_Service_Handler+0x48>
	{
		TxData[0] = (SF << 4) | 0x4;
 80001ac:	4b11      	ldr	r3, [pc, #68]	@ (80001f4 <Read_Service_Handler+0x5c>)
 80001ae:	2204      	movs	r2, #4
 80001b0:	701a      	strb	r2, [r3, #0]
		TxData[1] = ReadDataByLocalIdentifier_Response_SID;
 80001b2:	4b10      	ldr	r3, [pc, #64]	@ (80001f4 <Read_Service_Handler+0x5c>)
 80001b4:	2262      	movs	r2, #98	@ 0x62
 80001b6:	705a      	strb	r2, [r3, #1]
		TxData[2] = RxData[2];
 80001b8:	4b0d      	ldr	r3, [pc, #52]	@ (80001f0 <Read_Service_Handler+0x58>)
 80001ba:	789a      	ldrb	r2, [r3, #2]
 80001bc:	4b0d      	ldr	r3, [pc, #52]	@ (80001f4 <Read_Service_Handler+0x5c>)
 80001be:	709a      	strb	r2, [r3, #2]
		TxData[3] = RxData[3];
 80001c0:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <Read_Service_Handler+0x58>)
 80001c2:	78da      	ldrb	r2, [r3, #3]
 80001c4:	4b0b      	ldr	r3, [pc, #44]	@ (80001f4 <Read_Service_Handler+0x5c>)
 80001c6:	70da      	strb	r2, [r3, #3]
		TxData[4] = RxHeader.StdId;
 80001c8:	4b0b      	ldr	r3, [pc, #44]	@ (80001f8 <Read_Service_Handler+0x60>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4b09      	ldr	r3, [pc, #36]	@ (80001f4 <Read_Service_Handler+0x5c>)
 80001d0:	711a      	strb	r2, [r3, #4]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80001d2:	4b0a      	ldr	r3, [pc, #40]	@ (80001fc <Read_Service_Handler+0x64>)
 80001d4:	4a07      	ldr	r2, [pc, #28]	@ (80001f4 <Read_Service_Handler+0x5c>)
 80001d6:	490a      	ldr	r1, [pc, #40]	@ (8000200 <Read_Service_Handler+0x68>)
 80001d8:	480a      	ldr	r0, [pc, #40]	@ (8000204 <Read_Service_Handler+0x6c>)
 80001da:	f001 f86d 	bl	80012b8 <HAL_CAN_AddTxMessage>
 80001de:	e004      	b.n	80001ea <Read_Service_Handler+0x52>
	}
	else
	{
		Send_SF_Error_Code(ReadDataByLocalIdentifier_Request_SID, Invalid_length_or_response_format);
 80001e0:	2113      	movs	r1, #19
 80001e2:	2022      	movs	r0, #34	@ 0x22
 80001e4:	f7ff ffb2 	bl	800014c <Send_SF_Error_Code>
	}
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	200001a8 	.word	0x200001a8
 80001f8:	20000184 	.word	0x20000184
 80001fc:	200001b0 	.word	0x200001b0
 8000200:	20000000 	.word	0x20000000
 8000204:	200000cc 	.word	0x200000cc

08000208 <Send_SF_Write>:

void Send_SF_Write(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	TxData[0] = (SF << 4) | 0x1;
 800020c:	4b06      	ldr	r3, [pc, #24]	@ (8000228 <Send_SF_Write+0x20>)
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
	TxData[1] = WriteDataByLocalIdentifier_Response_SID;
 8000212:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <Send_SF_Write+0x20>)
 8000214:	226e      	movs	r2, #110	@ 0x6e
 8000216:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000218:	4b04      	ldr	r3, [pc, #16]	@ (800022c <Send_SF_Write+0x24>)
 800021a:	4a03      	ldr	r2, [pc, #12]	@ (8000228 <Send_SF_Write+0x20>)
 800021c:	4904      	ldr	r1, [pc, #16]	@ (8000230 <Send_SF_Write+0x28>)
 800021e:	4805      	ldr	r0, [pc, #20]	@ (8000234 <Send_SF_Write+0x2c>)
 8000220:	f001 f84a 	bl	80012b8 <HAL_CAN_AddTxMessage>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	200001a8 	.word	0x200001a8
 800022c:	200001b0 	.word	0x200001b0
 8000230:	20000000 	.word	0x20000000
 8000234:	200000cc 	.word	0x200000cc

08000238 <Write_Service_Handler>:

void Write_Service_Handler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	if(Access_flag)
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <Write_Service_Handler+0x20>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d006      	beq.n	8000252 <Write_Service_Handler+0x1a>
	{
		CANID = RxHeader.StdId;
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <Write_Service_Handler+0x24>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <Write_Service_Handler+0x28>)
 800024c:	701a      	strb	r2, [r3, #0]
		Send_SF_Write();
 800024e:	f7ff ffdb 	bl	8000208 <Send_SF_Write>
	}
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000044 	.word	0x20000044
 800025c:	20000184 	.word	0x20000184
 8000260:	200001c8 	.word	0x200001c8

08000264 <Send_SF_Security>:

void Send_SF_Security(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	TxData[0] = (SF << 4) | 0x6;
 8000268:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <Send_SF_Security+0x48>)
 800026a:	2206      	movs	r2, #6
 800026c:	701a      	strb	r2, [r3, #0]
	TxData[1] = SecurityAccess_Response_SID;
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <Send_SF_Security+0x48>)
 8000270:	2267      	movs	r2, #103	@ 0x67
 8000272:	705a      	strb	r2, [r3, #1]
	TxData[2] = Security_SEED_level;
 8000274:	4b0d      	ldr	r3, [pc, #52]	@ (80002ac <Send_SF_Security+0x48>)
 8000276:	2201      	movs	r2, #1
 8000278:	709a      	strb	r2, [r3, #2]
	TxData[3] = SEED[0];
 800027a:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <Send_SF_Security+0x4c>)
 800027c:	781a      	ldrb	r2, [r3, #0]
 800027e:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <Send_SF_Security+0x48>)
 8000280:	70da      	strb	r2, [r3, #3]
	TxData[4] = SEED[1];
 8000282:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <Send_SF_Security+0x4c>)
 8000284:	785a      	ldrb	r2, [r3, #1]
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <Send_SF_Security+0x48>)
 8000288:	711a      	strb	r2, [r3, #4]
	TxData[5] = SEED[2];
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <Send_SF_Security+0x4c>)
 800028c:	789a      	ldrb	r2, [r3, #2]
 800028e:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <Send_SF_Security+0x48>)
 8000290:	715a      	strb	r2, [r3, #5]
	TxData[6] = SEED[3];
 8000292:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <Send_SF_Security+0x4c>)
 8000294:	78da      	ldrb	r2, [r3, #3]
 8000296:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <Send_SF_Security+0x48>)
 8000298:	719a      	strb	r2, [r3, #6]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <Send_SF_Security+0x50>)
 800029c:	4a03      	ldr	r2, [pc, #12]	@ (80002ac <Send_SF_Security+0x48>)
 800029e:	4906      	ldr	r1, [pc, #24]	@ (80002b8 <Send_SF_Security+0x54>)
 80002a0:	4806      	ldr	r0, [pc, #24]	@ (80002bc <Send_SF_Security+0x58>)
 80002a2:	f001 f809 	bl	80012b8 <HAL_CAN_AddTxMessage>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200001a8 	.word	0x200001a8
 80002b0:	200001b4 	.word	0x200001b4
 80002b4:	200001b0 	.word	0x200001b0
 80002b8:	20000000 	.word	0x20000000
 80002bc:	200000cc 	.word	0x200000cc

080002c0 <Send_FC_Security>:

void Send_FC_Security(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	TxData[0] = (FC << 4) | Countinue_State;
 80002c4:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <Send_FC_Security+0x28>)
 80002c6:	2230      	movs	r2, #48	@ 0x30
 80002c8:	701a      	strb	r2, [r3, #0]
	TxData[1] = Block_Size;
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <Send_FC_Security+0x28>)
 80002cc:	2208      	movs	r2, #8
 80002ce:	705a      	strb	r2, [r3, #1]
	TxData[2] = Separation_time;
 80002d0:	4b05      	ldr	r3, [pc, #20]	@ (80002e8 <Send_FC_Security+0x28>)
 80002d2:	22fa      	movs	r2, #250	@ 0xfa
 80002d4:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80002d6:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <Send_FC_Security+0x2c>)
 80002d8:	4a03      	ldr	r2, [pc, #12]	@ (80002e8 <Send_FC_Security+0x28>)
 80002da:	4905      	ldr	r1, [pc, #20]	@ (80002f0 <Send_FC_Security+0x30>)
 80002dc:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <Send_FC_Security+0x34>)
 80002de:	f000 ffeb 	bl	80012b8 <HAL_CAN_AddTxMessage>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200001a8 	.word	0x200001a8
 80002ec:	200001b0 	.word	0x200001b0
 80002f0:	20000000 	.word	0x20000000
 80002f4:	200000cc 	.word	0x200000cc

080002f8 <Send_SF_Security_Accept>:

void Send_SF_Security_Accept(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	TxData[0] = (SF << 4) | 0x2;
 80002fc:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <Send_SF_Security_Accept+0x28>)
 80002fe:	2202      	movs	r2, #2
 8000300:	701a      	strb	r2, [r3, #0]
	TxData[1] = SecurityAccess_Response_SID;
 8000302:	4b07      	ldr	r3, [pc, #28]	@ (8000320 <Send_SF_Security_Accept+0x28>)
 8000304:	2267      	movs	r2, #103	@ 0x67
 8000306:	705a      	strb	r2, [r3, #1]
	TxData[2] = Security_KEY_level;
 8000308:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <Send_SF_Security_Accept+0x28>)
 800030a:	2202      	movs	r2, #2
 800030c:	709a      	strb	r2, [r3, #2]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800030e:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <Send_SF_Security_Accept+0x2c>)
 8000310:	4a03      	ldr	r2, [pc, #12]	@ (8000320 <Send_SF_Security_Accept+0x28>)
 8000312:	4905      	ldr	r1, [pc, #20]	@ (8000328 <Send_SF_Security_Accept+0x30>)
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <Send_SF_Security_Accept+0x34>)
 8000316:	f000 ffcf 	bl	80012b8 <HAL_CAN_AddTxMessage>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200001a8 	.word	0x200001a8
 8000324:	200001b0 	.word	0x200001b0
 8000328:	20000000 	.word	0x20000000
 800032c:	200000cc 	.word	0x200000cc

08000330 <Security_Accept>:

void Security_Accept(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED_G_Pin, 1);
 8000334:	2201      	movs	r2, #1
 8000336:	2110      	movs	r1, #16
 8000338:	4804      	ldr	r0, [pc, #16]	@ (800034c <Security_Accept+0x1c>)
 800033a:	f001 fe87 	bl	800204c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 800033e:	4804      	ldr	r0, [pc, #16]	@ (8000350 <Security_Accept+0x20>)
 8000340:	f002 fafc 	bl	800293c <HAL_TIM_Base_Start_IT>
	Send_SF_Security_Accept();
 8000344:	f7ff ffd8 	bl	80002f8 <Send_SF_Security_Accept>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40010c00 	.word	0x40010c00
 8000350:	200000f4 	.word	0x200000f4

08000354 <Security_CF_Handler>:

void Security_CF_Handler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
	for(int i = 1; i < KEY_REMAIN || i < 8; i++)
 800035a:	2301      	movs	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	e014      	b.n	800038a <Security_CF_Handler+0x36>
	{
		if(KEY[NEXT_KEY] != RxData[i]) Access_flag = 0;
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <Security_CF_Handler+0x7c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a1b      	ldr	r2, [pc, #108]	@ (80003d4 <Security_CF_Handler+0x80>)
 8000366:	5cd2      	ldrb	r2, [r2, r3]
 8000368:	491b      	ldr	r1, [pc, #108]	@ (80003d8 <Security_CF_Handler+0x84>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	440b      	add	r3, r1
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	429a      	cmp	r2, r3
 8000372:	d002      	beq.n	800037a <Security_CF_Handler+0x26>
 8000374:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <Security_CF_Handler+0x88>)
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
		NEXT_KEY++;
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <Security_CF_Handler+0x7c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	3301      	adds	r3, #1
 8000380:	4a13      	ldr	r2, [pc, #76]	@ (80003d0 <Security_CF_Handler+0x7c>)
 8000382:	6013      	str	r3, [r2, #0]
	for(int i = 1; i < KEY_REMAIN || i < 8; i++)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <Security_CF_Handler+0x8c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	429a      	cmp	r2, r3
 8000392:	dbe5      	blt.n	8000360 <Security_CF_Handler+0xc>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b07      	cmp	r3, #7
 8000398:	dde2      	ble.n	8000360 <Security_CF_Handler+0xc>
	}
	KEY_REMAIN = MAX_KEY - NEXT_KEY;
 800039a:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <Security_CF_Handler+0x90>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <Security_CF_Handler+0x7c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <Security_CF_Handler+0x8c>)
 80003a6:	6013      	str	r3, [r2, #0]
	if(KEY_REMAIN == 0)
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <Security_CF_Handler+0x8c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d10a      	bne.n	80003c6 <Security_CF_Handler+0x72>
	{
		if(Access_flag)
 80003b0:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <Security_CF_Handler+0x88>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d002      	beq.n	80003be <Security_CF_Handler+0x6a>
		{
			Security_Accept();
 80003b8:	f7ff ffba 	bl	8000330 <Security_Accept>
		else
		{
			Send_SF_Error_Code(SecurityAccess_Request_SID ,Invalid_Keys);
		}
	}
}
 80003bc:	e003      	b.n	80003c6 <Security_CF_Handler+0x72>
			Send_SF_Error_Code(SecurityAccess_Request_SID ,Invalid_Keys);
 80003be:	2135      	movs	r1, #53	@ 0x35
 80003c0:	2027      	movs	r0, #39	@ 0x27
 80003c2:	f7ff fec3 	bl	800014c <Send_SF_Error_Code>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200001cc 	.word	0x200001cc
 80003d4:	200001b8 	.word	0x200001b8
 80003d8:	200001a0 	.word	0x200001a0
 80003dc:	20000044 	.word	0x20000044
 80003e0:	200001d0 	.word	0x200001d0
 80003e4:	20000040 	.word	0x20000040

080003e8 <Security_Handler>:

void Security_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if(RxData[3] == Security_SEED_level)
 80003ec:	4b72      	ldr	r3, [pc, #456]	@ (80005b8 <Security_Handler+0x1d0>)
 80003ee:	78db      	ldrb	r3, [r3, #3]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	f040 80a8 	bne.w	8000546 <Security_Handler+0x15e>
	{
		srand(time(NULL));
 80003f6:	2000      	movs	r0, #0
 80003f8:	f003 f8c8 	bl	800358c <time>
 80003fc:	4602      	mov	r2, r0
 80003fe:	460b      	mov	r3, r1
 8000400:	4613      	mov	r3, r2
 8000402:	4618      	mov	r0, r3
 8000404:	f002 ff48 	bl	8003298 <srand>
		SEED[0] = (uint8_t)(rand() & 0xFF);
 8000408:	f002 ff74 	bl	80032f4 <rand>
 800040c:	4603      	mov	r3, r0
 800040e:	b2da      	uxtb	r2, r3
 8000410:	4b6a      	ldr	r3, [pc, #424]	@ (80005bc <Security_Handler+0x1d4>)
 8000412:	701a      	strb	r2, [r3, #0]
		SEED[1] = (uint8_t)(rand() & 0xFF);
 8000414:	f002 ff6e 	bl	80032f4 <rand>
 8000418:	4603      	mov	r3, r0
 800041a:	b2da      	uxtb	r2, r3
 800041c:	4b67      	ldr	r3, [pc, #412]	@ (80005bc <Security_Handler+0x1d4>)
 800041e:	705a      	strb	r2, [r3, #1]
		SEED[2] = (uint8_t)(rand() & 0xFF);
 8000420:	f002 ff68 	bl	80032f4 <rand>
 8000424:	4603      	mov	r3, r0
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b64      	ldr	r3, [pc, #400]	@ (80005bc <Security_Handler+0x1d4>)
 800042a:	709a      	strb	r2, [r3, #2]
		SEED[3] = (uint8_t)(rand() & 0xFF);
 800042c:	f002 ff62 	bl	80032f4 <rand>
 8000430:	4603      	mov	r3, r0
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b61      	ldr	r3, [pc, #388]	@ (80005bc <Security_Handler+0x1d4>)
 8000436:	70da      	strb	r2, [r3, #3]
		KEY[0] = SEED[0] ^ SEED[1];
 8000438:	4b60      	ldr	r3, [pc, #384]	@ (80005bc <Security_Handler+0x1d4>)
 800043a:	781a      	ldrb	r2, [r3, #0]
 800043c:	4b5f      	ldr	r3, [pc, #380]	@ (80005bc <Security_Handler+0x1d4>)
 800043e:	785b      	ldrb	r3, [r3, #1]
 8000440:	4053      	eors	r3, r2
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	@ (80005c0 <Security_Handler+0x1d8>)
 8000446:	701a      	strb	r2, [r3, #0]
		KEY[1] = SEED[1] + SEED[2];
 8000448:	4b5c      	ldr	r3, [pc, #368]	@ (80005bc <Security_Handler+0x1d4>)
 800044a:	785a      	ldrb	r2, [r3, #1]
 800044c:	4b5b      	ldr	r3, [pc, #364]	@ (80005bc <Security_Handler+0x1d4>)
 800044e:	789b      	ldrb	r3, [r3, #2]
 8000450:	4413      	add	r3, r2
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b5a      	ldr	r3, [pc, #360]	@ (80005c0 <Security_Handler+0x1d8>)
 8000456:	705a      	strb	r2, [r3, #1]
		KEY[2] = SEED[2] ^ SEED[3];
 8000458:	4b58      	ldr	r3, [pc, #352]	@ (80005bc <Security_Handler+0x1d4>)
 800045a:	789a      	ldrb	r2, [r3, #2]
 800045c:	4b57      	ldr	r3, [pc, #348]	@ (80005bc <Security_Handler+0x1d4>)
 800045e:	78db      	ldrb	r3, [r3, #3]
 8000460:	4053      	eors	r3, r2
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b56      	ldr	r3, [pc, #344]	@ (80005c0 <Security_Handler+0x1d8>)
 8000466:	709a      	strb	r2, [r3, #2]
		KEY[3] = SEED[3] + SEED[0];
 8000468:	4b54      	ldr	r3, [pc, #336]	@ (80005bc <Security_Handler+0x1d4>)
 800046a:	78da      	ldrb	r2, [r3, #3]
 800046c:	4b53      	ldr	r3, [pc, #332]	@ (80005bc <Security_Handler+0x1d4>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	4413      	add	r3, r2
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b52      	ldr	r3, [pc, #328]	@ (80005c0 <Security_Handler+0x1d8>)
 8000476:	70da      	strb	r2, [r3, #3]
		KEY[4] = SEED[0] | SEED[1];
 8000478:	4b50      	ldr	r3, [pc, #320]	@ (80005bc <Security_Handler+0x1d4>)
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	4b4f      	ldr	r3, [pc, #316]	@ (80005bc <Security_Handler+0x1d4>)
 800047e:	785b      	ldrb	r3, [r3, #1]
 8000480:	4313      	orrs	r3, r2
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	@ (80005c0 <Security_Handler+0x1d8>)
 8000486:	711a      	strb	r2, [r3, #4]
		KEY[5] = SEED[1] + SEED[2];
 8000488:	4b4c      	ldr	r3, [pc, #304]	@ (80005bc <Security_Handler+0x1d4>)
 800048a:	785a      	ldrb	r2, [r3, #1]
 800048c:	4b4b      	ldr	r3, [pc, #300]	@ (80005bc <Security_Handler+0x1d4>)
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	4413      	add	r3, r2
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	@ (80005c0 <Security_Handler+0x1d8>)
 8000496:	715a      	strb	r2, [r3, #5]
		KEY[6] = SEED[2] | SEED[3];
 8000498:	4b48      	ldr	r3, [pc, #288]	@ (80005bc <Security_Handler+0x1d4>)
 800049a:	789a      	ldrb	r2, [r3, #2]
 800049c:	4b47      	ldr	r3, [pc, #284]	@ (80005bc <Security_Handler+0x1d4>)
 800049e:	78db      	ldrb	r3, [r3, #3]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b46      	ldr	r3, [pc, #280]	@ (80005c0 <Security_Handler+0x1d8>)
 80004a6:	719a      	strb	r2, [r3, #6]
		KEY[7] = SEED[3] + SEED[0];
 80004a8:	4b44      	ldr	r3, [pc, #272]	@ (80005bc <Security_Handler+0x1d4>)
 80004aa:	78da      	ldrb	r2, [r3, #3]
 80004ac:	4b43      	ldr	r3, [pc, #268]	@ (80005bc <Security_Handler+0x1d4>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4413      	add	r3, r2
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	4b42      	ldr	r3, [pc, #264]	@ (80005c0 <Security_Handler+0x1d8>)
 80004b6:	71da      	strb	r2, [r3, #7]
		KEY[8] = SEED[0] & SEED[1];
 80004b8:	4b40      	ldr	r3, [pc, #256]	@ (80005bc <Security_Handler+0x1d4>)
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	4b3f      	ldr	r3, [pc, #252]	@ (80005bc <Security_Handler+0x1d4>)
 80004be:	785b      	ldrb	r3, [r3, #1]
 80004c0:	4013      	ands	r3, r2
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	4b3e      	ldr	r3, [pc, #248]	@ (80005c0 <Security_Handler+0x1d8>)
 80004c6:	721a      	strb	r2, [r3, #8]
		KEY[9] = SEED[1] + SEED[2];
 80004c8:	4b3c      	ldr	r3, [pc, #240]	@ (80005bc <Security_Handler+0x1d4>)
 80004ca:	785a      	ldrb	r2, [r3, #1]
 80004cc:	4b3b      	ldr	r3, [pc, #236]	@ (80005bc <Security_Handler+0x1d4>)
 80004ce:	789b      	ldrb	r3, [r3, #2]
 80004d0:	4413      	add	r3, r2
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	4b3a      	ldr	r3, [pc, #232]	@ (80005c0 <Security_Handler+0x1d8>)
 80004d6:	725a      	strb	r2, [r3, #9]
		KEY[10] = SEED[2] & SEED[3];
 80004d8:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <Security_Handler+0x1d4>)
 80004da:	789a      	ldrb	r2, [r3, #2]
 80004dc:	4b37      	ldr	r3, [pc, #220]	@ (80005bc <Security_Handler+0x1d4>)
 80004de:	78db      	ldrb	r3, [r3, #3]
 80004e0:	4013      	ands	r3, r2
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b36      	ldr	r3, [pc, #216]	@ (80005c0 <Security_Handler+0x1d8>)
 80004e6:	729a      	strb	r2, [r3, #10]
		KEY[11] = SEED[3] + SEED[0];
 80004e8:	4b34      	ldr	r3, [pc, #208]	@ (80005bc <Security_Handler+0x1d4>)
 80004ea:	78da      	ldrb	r2, [r3, #3]
 80004ec:	4b33      	ldr	r3, [pc, #204]	@ (80005bc <Security_Handler+0x1d4>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <Security_Handler+0x1d8>)
 80004f6:	72da      	strb	r2, [r3, #11]
		KEY[12] = SEED[0] - SEED[1];
 80004f8:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <Security_Handler+0x1d4>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b2f      	ldr	r3, [pc, #188]	@ (80005bc <Security_Handler+0x1d4>)
 80004fe:	785b      	ldrb	r3, [r3, #1]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b2e      	ldr	r3, [pc, #184]	@ (80005c0 <Security_Handler+0x1d8>)
 8000506:	731a      	strb	r2, [r3, #12]
		KEY[13] = SEED[1] + SEED[2];
 8000508:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <Security_Handler+0x1d4>)
 800050a:	785a      	ldrb	r2, [r3, #1]
 800050c:	4b2b      	ldr	r3, [pc, #172]	@ (80005bc <Security_Handler+0x1d4>)
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	4413      	add	r3, r2
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <Security_Handler+0x1d8>)
 8000516:	735a      	strb	r2, [r3, #13]
		KEY[14] = SEED[2] - SEED[3];
 8000518:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <Security_Handler+0x1d4>)
 800051a:	789a      	ldrb	r2, [r3, #2]
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <Security_Handler+0x1d4>)
 800051e:	78db      	ldrb	r3, [r3, #3]
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <Security_Handler+0x1d8>)
 8000526:	739a      	strb	r2, [r3, #14]
		KEY[15] = SEED[3] + SEED[0];
 8000528:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <Security_Handler+0x1d4>)
 800052a:	78da      	ldrb	r2, [r3, #3]
 800052c:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <Security_Handler+0x1d4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4413      	add	r3, r2
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <Security_Handler+0x1d8>)
 8000536:	73da      	strb	r2, [r3, #15]
		KEY_REMAIN = MAX_KEY;
 8000538:	4b22      	ldr	r3, [pc, #136]	@ (80005c4 <Security_Handler+0x1dc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a22      	ldr	r2, [pc, #136]	@ (80005c8 <Security_Handler+0x1e0>)
 800053e:	6013      	str	r3, [r2, #0]
		Send_SF_Security();
 8000540:	f7ff fe90 	bl	8000264 <Send_SF_Security>
		if(KEY[3] != RxData[7]) Access_flag = 0;
		NEXT_KEY = 4;
		KEY_REMAIN = MAX_KEY - NEXT_KEY;
		Send_FC_Security();
	}
}
 8000544:	e036      	b.n	80005b4 <Security_Handler+0x1cc>
	else if(RxData[3] == Security_KEY_level)
 8000546:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <Security_Handler+0x1d0>)
 8000548:	78db      	ldrb	r3, [r3, #3]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d132      	bne.n	80005b4 <Security_Handler+0x1cc>
		Access_flag = 1;
 800054e:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <Security_Handler+0x1e4>)
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
		if(KEY[0] != RxData[4]) Access_flag = 0;
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <Security_Handler+0x1d8>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4b17      	ldr	r3, [pc, #92]	@ (80005b8 <Security_Handler+0x1d0>)
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	d002      	beq.n	8000566 <Security_Handler+0x17e>
 8000560:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <Security_Handler+0x1e4>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
		if(KEY[1] != RxData[5]) Access_flag = 0;
 8000566:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <Security_Handler+0x1d8>)
 8000568:	785a      	ldrb	r2, [r3, #1]
 800056a:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <Security_Handler+0x1d0>)
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	429a      	cmp	r2, r3
 8000570:	d002      	beq.n	8000578 <Security_Handler+0x190>
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <Security_Handler+0x1e4>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
		if(KEY[2] != RxData[6]) Access_flag = 0;
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <Security_Handler+0x1d8>)
 800057a:	789a      	ldrb	r2, [r3, #2]
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <Security_Handler+0x1d0>)
 800057e:	799b      	ldrb	r3, [r3, #6]
 8000580:	429a      	cmp	r2, r3
 8000582:	d002      	beq.n	800058a <Security_Handler+0x1a2>
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <Security_Handler+0x1e4>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
		if(KEY[3] != RxData[7]) Access_flag = 0;
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <Security_Handler+0x1d8>)
 800058c:	78da      	ldrb	r2, [r3, #3]
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <Security_Handler+0x1d0>)
 8000590:	79db      	ldrb	r3, [r3, #7]
 8000592:	429a      	cmp	r2, r3
 8000594:	d002      	beq.n	800059c <Security_Handler+0x1b4>
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <Security_Handler+0x1e4>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
		NEXT_KEY = 4;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <Security_Handler+0x1e8>)
 800059e:	2204      	movs	r2, #4
 80005a0:	601a      	str	r2, [r3, #0]
		KEY_REMAIN = MAX_KEY - NEXT_KEY;
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <Security_Handler+0x1dc>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <Security_Handler+0x1e8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <Security_Handler+0x1e0>)
 80005ae:	6013      	str	r3, [r2, #0]
		Send_FC_Security();
 80005b0:	f7ff fe86 	bl	80002c0 <Send_FC_Security>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001a0 	.word	0x200001a0
 80005bc:	200001b4 	.word	0x200001b4
 80005c0:	200001b8 	.word	0x200001b8
 80005c4:	20000040 	.word	0x20000040
 80005c8:	200001d0 	.word	0x200001d0
 80005cc:	20000044 	.word	0x20000044
 80005d0:	200001cc 	.word	0x200001cc

080005d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, LED_G_Pin, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	4806      	ldr	r0, [pc, #24]	@ (80005fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005e2:	f001 fd33 	bl	800204c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim2);
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005e8:	f002 f9fa 	bl	80029e0 <HAL_TIM_Base_Stop_IT>
	Access_flag = 0;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	200000f4 	.word	0x200000f4
 8000604:	20000044 	.word	0x20000044

08000608 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) == HAL_OK)
 8000610:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8000612:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 ff1d 	bl	8001456 <HAL_CAN_GetRxMessage>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d13b      	bne.n	800069a <HAL_CAN_RxFifo1MsgPendingCallback+0x92>
		  {
			  if ((RxHeader.StdId == CAN_Request_ID))
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f240 7212 	movw	r2, #1810	@ 0x712
 800062a:	4293      	cmp	r3, r2
 800062c:	d135      	bne.n	800069a <HAL_CAN_RxFifo1MsgPendingCallback+0x92>
			   {
				  switch(RxData[0] >> 4)
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	091b      	lsrs	r3, r3, #4
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b03      	cmp	r3, #3
 8000638:	d82f      	bhi.n	800069a <HAL_CAN_RxFifo1MsgPendingCallback+0x92>
 800063a:	a201      	add	r2, pc, #4	@ (adr r2, 8000640 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000651 	.word	0x08000651
 8000644:	0800067b 	.word	0x0800067b
 8000648:	0800068b 	.word	0x0800068b
 800064c:	08000691 	.word	0x08000691
				  {
				  case SF:
					  switch(RxData[1])
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8000652:	785b      	ldrb	r3, [r3, #1]
 8000654:	2b2e      	cmp	r3, #46	@ 0x2e
 8000656:	d00c      	beq.n	8000672 <HAL_CAN_RxFifo1MsgPendingCallback+0x6a>
 8000658:	2b2e      	cmp	r3, #46	@ 0x2e
 800065a:	dc1b      	bgt.n	8000694 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
 800065c:	2b22      	cmp	r3, #34	@ 0x22
 800065e:	d002      	beq.n	8000666 <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
 8000660:	2b27      	cmp	r3, #39	@ 0x27
 8000662:	d003      	beq.n	800066c <HAL_CAN_RxFifo1MsgPendingCallback+0x64>
						  break;
					  case WriteDataByLocalIdentifier_Request_SID:
						  Write_Service_Handler();
						  break;
					  }
					  break;
 8000664:	e016      	b.n	8000694 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
						  Read_Service_Handler();
 8000666:	f7ff fd97 	bl	8000198 <Read_Service_Handler>
						  break;
 800066a:	e005      	b.n	8000678 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>
						  Security_Handler();
 800066c:	f7ff febc 	bl	80003e8 <Security_Handler>
						  break;
 8000670:	e002      	b.n	8000678 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>
						  Write_Service_Handler();
 8000672:	f7ff fde1 	bl	8000238 <Write_Service_Handler>
						  break;
 8000676:	bf00      	nop
					  break;
 8000678:	e00c      	b.n	8000694 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>
				  case FF:
					  switch(RxData[2])
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	2b27      	cmp	r3, #39	@ 0x27
 8000680:	d10a      	bne.n	8000698 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>
					  {
					  case SecurityAccess_Request_SID:
						  Security_Handler();
 8000682:	f7ff feb1 	bl	80003e8 <Security_Handler>
						  break;
 8000686:	bf00      	nop
					  }
					  break;
 8000688:	e006      	b.n	8000698 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>
				  case CF:
					  Security_CF_Handler();
 800068a:	f7ff fe63 	bl	8000354 <Security_CF_Handler>
					  break;
 800068e:	e004      	b.n	800069a <HAL_CAN_RxFifo1MsgPendingCallback+0x92>
				  case FC:
					  break;
 8000690:	bf00      	nop
 8000692:	e002      	b.n	800069a <HAL_CAN_RxFifo1MsgPendingCallback+0x92>
					  break;
 8000694:	bf00      	nop
 8000696:	e000      	b.n	800069a <HAL_CAN_RxFifo1MsgPendingCallback+0x92>
					  break;
 8000698:	bf00      	nop
				  }
			   }
		  }
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200001a0 	.word	0x200001a0
 80006a8:	20000184 	.word	0x20000184

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fb98 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f81a 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f90c 	bl	80008d4 <MX_GPIO_Init>
  MX_CAN_Init();
 80006bc:	f000 f85c 	bl	8000778 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80006c0:	f000 f8de 	bl	8000880 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006c4:	f000 f88e 	bl	80007e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80006c8:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <main+0x38>)
 80006ca:	f000 fdb1 	bl	8001230 <HAL_CAN_Start>
  HAL_CAN_ConfigFilter(&hcan, &Filter);
 80006ce:	4906      	ldr	r1, [pc, #24]	@ (80006e8 <main+0x3c>)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <main+0x38>)
 80006d2:	f000 fce4 	bl	800109e <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80006d6:	2110      	movs	r1, #16
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <main+0x38>)
 80006da:	f000 ffdd 	bl	8001698 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006de:	bf00      	nop
 80006e0:	e7fd      	b.n	80006de <main+0x32>
 80006e2:	bf00      	nop
 80006e4:	200000cc 	.word	0x200000cc
 80006e8:	20000018 	.word	0x20000018

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b090      	sub	sp, #64	@ 0x40
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2228      	movs	r2, #40	@ 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 ff3d 	bl	800357a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000712:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000728:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800072a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0318 	add.w	r3, r7, #24
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fca1 	bl	800207c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000740:	f000 f912 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f001 ff0e 	bl	8002580 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800076a:	f000 f8fd 	bl	8000968 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3740      	adds	r7, #64	@ 0x40
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_CAN_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <MX_CAN_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_CAN_Init+0x64>)
 8000784:	2209      	movs	r2, #9
 8000786:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_CAN_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_CAN_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_CAN_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_CAN_Init+0x64>)
 800079c:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 80007a0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_CAN_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_CAN_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_CAN_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_CAN_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_CAN_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_CAN_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_CAN_Init+0x64>)
 80007c8:	f000 fb6e 	bl	8000ea8 <HAL_CAN_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80007d2:	f000 f8c9 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000cc 	.word	0x200000cc
 80007e0:	40006400 	.word	0x40006400

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_TIM2_Init+0x98>)
 8000802:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_TIM2_Init+0x98>)
 800080a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800080e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_TIM2_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_TIM2_Init+0x98>)
 8000818:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_TIM2_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_TIM2_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082a:	4814      	ldr	r0, [pc, #80]	@ (800087c <MX_TIM2_Init+0x98>)
 800082c:	f002 f836 	bl	800289c <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000836:	f000 f897 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	@ (800087c <MX_TIM2_Init+0x98>)
 8000848:	f002 f9e8 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000852:	f000 f889 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <MX_TIM2_Init+0x98>)
 8000864:	f002 fbca 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800086e:	f000 f87b 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000f4 	.word	0x200000f4

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	@ (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f002 fc10 	bl	80030dc <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f851 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000013c 	.word	0x2000013c
 80008d0:	40013800 	.word	0x40013800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_GPIO_Init+0x8c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <MX_GPIO_Init+0x8c>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_GPIO_Init+0x8c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_GPIO_Init+0x8c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a16      	ldr	r2, [pc, #88]	@ (8000960 <MX_GPIO_Init+0x8c>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_GPIO_Init+0x8c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_GPIO_Init+0x8c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a10      	ldr	r2, [pc, #64]	@ (8000960 <MX_GPIO_Init+0x8c>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_GPIO_Init+0x8c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2110      	movs	r1, #16
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <MX_GPIO_Init+0x90>)
 8000936:	f001 fb89 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 800093a:	2310      	movs	r3, #16
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2302      	movs	r3, #2
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_GPIO_Init+0x90>)
 8000952:	f001 f9f7 	bl	8001d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000
 8000964:	40010c00 	.word	0x40010c00

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <HAL_MspInit+0x5c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <HAL_MspInit+0x5c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_MspInit+0x5c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_MspInit+0x5c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <HAL_MspInit+0x5c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_MspInit+0x5c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_MspInit+0x60>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <HAL_MspInit+0x60>)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000

080009d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <HAL_CAN_MspInit+0xc0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d14b      	bne.n	8000a90 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009f8:	4b28      	ldr	r3, [pc, #160]	@ (8000a9c <HAL_CAN_MspInit+0xc4>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a27      	ldr	r2, [pc, #156]	@ (8000a9c <HAL_CAN_MspInit+0xc4>)
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a02:	61d3      	str	r3, [r2, #28]
 8000a04:	4b25      	ldr	r3, [pc, #148]	@ (8000a9c <HAL_CAN_MspInit+0xc4>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <HAL_CAN_MspInit+0xc4>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <HAL_CAN_MspInit+0xc4>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <HAL_CAN_MspInit+0xc4>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <HAL_CAN_MspInit+0xc8>)
 8000a3e:	f001 f981 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <HAL_CAN_MspInit+0xc8>)
 8000a58:	f001 f974 	bl	8001d44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <HAL_CAN_MspInit+0xcc>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_CAN_MspInit+0xcc>)
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2015      	movs	r0, #21
 8000a86:	f001 f926 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a8a:	2015      	movs	r0, #21
 8000a8c:	f001 f93f 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	@ 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40006400 	.word	0x40006400
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010c00 	.word	0x40010c00
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab8:	d113      	bne.n	8000ae2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_TIM_Base_MspInit+0x44>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <HAL_TIM_Base_MspInit+0x44>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_TIM_Base_MspInit+0x44>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	201c      	movs	r0, #28
 8000ad8:	f001 f8fd 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000adc:	201c      	movs	r0, #28
 8000ade:	f001 f916 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <HAL_UART_MspInit+0x8c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d131      	bne.n	8000b74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <HAL_UART_MspInit+0x90>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a1a      	ldr	r2, [pc, #104]	@ (8000b80 <HAL_UART_MspInit+0x90>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_UART_MspInit+0x90>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_UART_MspInit+0x90>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <HAL_UART_MspInit+0x90>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_UART_MspInit+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <HAL_UART_MspInit+0x94>)
 8000b56:	f001 f8f5 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_MspInit+0x94>)
 8000b70:	f001 f8e8 	bl	8001d44 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010800 	.word	0x40010800

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f94a 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <CAN1_RX1_IRQHandler+0x10>)
 8000be6:	f000 fd7c 	bl	80016e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000cc 	.word	0x200000cc

08000bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <TIM2_IRQHandler+0x10>)
 8000bfa:	f001 ff1f 	bl	8002a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000f4 	.word	0x200000f4

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <_kill>:

int _kill(int pid, int sig)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c20:	f002 fd28 	bl	8003674 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2216      	movs	r2, #22
 8000c28:	601a      	str	r2, [r3, #0]
  return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_exit>:

void _exit (int status)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffe7 	bl	8000c16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <_exit+0x12>

08000c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c5e:	f3af 8000 	nop.w
 8000c62:	4601      	mov	r1, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf0      	blt.n	8000c5e <_read+0x12>
  }

  return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e009      	b.n	8000cac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf1      	blt.n	8000c98 <_write+0x12>
  }
  return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f002 fc90 	bl	8003674 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20005000 	.word	0x20005000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	200001d4 	.word	0x200001d4
 8000d88:	20000328 	.word	0x20000328

08000d8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d98:	f7ff fff8 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d9e:	490c      	ldr	r1, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000db4:	4c09      	ldr	r4, [pc, #36]	@ (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f002 fc5d 	bl	8003680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc6:	f7ff fc71 	bl	80006ac <main>
  bx lr
 8000dca:	4770      	bx	lr
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000dd4:	08004458 	.word	0x08004458
  ldr r2, =_sbss
 8000dd8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000ddc:	20000328 	.word	0x20000328

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_Init+0x28>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_Init+0x28>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 ff63 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfa:	200f      	movs	r0, #15
 8000dfc:	f000 f808 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e00:	f7ff fdb8 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40022000 	.word	0x40022000

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_InitTick+0x54>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 ff7b 	bl	8001d2a <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 ff43 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e50:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000048 	.word	0x20000048
 8000e68:	20000050 	.word	0x20000050
 8000e6c:	2000004c 	.word	0x2000004c

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_IncTick+0x1c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a03      	ldr	r2, [pc, #12]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000050 	.word	0x20000050
 8000e90:	200001d8 	.word	0x200001d8

08000e94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <HAL_GetTick+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	200001d8 	.word	0x200001d8

08000ea8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0ed      	b.n	8001096 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fd86 	bl	80009d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000edc:	f7ff ffda 	bl	8000e94 <HAL_GetTick>
 8000ee0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ee2:	e012      	b.n	8000f0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee4:	f7ff ffd6 	bl	8000e94 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b0a      	cmp	r3, #10
 8000ef0:	d90b      	bls.n	8000f0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0c5      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0e5      	beq.n	8000ee4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0202 	bic.w	r2, r2, #2
 8000f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f28:	f7ff ffb4 	bl	8000e94 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2e:	e012      	b.n	8000f56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f30:	f7ff ffb0 	bl	8000e94 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d90b      	bls.n	8000f56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e09f      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e5      	bne.n	8000f30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7e1b      	ldrb	r3, [r3, #24]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d108      	bne.n	8000f7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e007      	b.n	8000f8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7e5b      	ldrb	r3, [r3, #25]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d108      	bne.n	8000fa8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e007      	b.n	8000fb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e9b      	ldrb	r3, [r3, #26]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d108      	bne.n	8000fd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0220 	orr.w	r2, r2, #32
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0220 	bic.w	r2, r2, #32
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7edb      	ldrb	r3, [r3, #27]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d108      	bne.n	8000ffc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0210 	bic.w	r2, r2, #16
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e007      	b.n	800100c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0210 	orr.w	r2, r2, #16
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0208 	orr.w	r2, r2, #8
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7f5b      	ldrb	r3, [r3, #29]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0204 	bic.w	r2, r2, #4
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	ea42 0103 	orr.w	r1, r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800109e:	b480      	push	{r7}
 80010a0:	b087      	sub	sp, #28
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010b6:	7cfb      	ldrb	r3, [r7, #19]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d003      	beq.n	80010c4 <HAL_CAN_ConfigFilter+0x26>
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	f040 80aa 	bne.w	8001218 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2201      	movs	r2, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d123      	bne.n	8001146 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	401a      	ands	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001120:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3248      	adds	r2, #72	@ 0x48
 8001126:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800113c:	6979      	ldr	r1, [r7, #20]
 800113e:	3348      	adds	r3, #72	@ 0x48
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d122      	bne.n	8001194 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3248      	adds	r2, #72	@ 0x48
 8001174:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001188:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118a:	6979      	ldr	r1, [r7, #20]
 800118c:	3348      	adds	r3, #72	@ 0x48
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80011da:	e007      	b.n	80011ec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800120a:	f023 0201 	bic.w	r2, r3, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e006      	b.n	8001226 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
  }
}
 8001226:	4618      	mov	r0, r3
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d12e      	bne.n	80012a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fe1a 	bl	8000e94 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001262:	e012      	b.n	800128a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001264:	f7ff fe16 	bl	8000e94 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2205      	movs	r2, #5
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e012      	b.n	80012b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e5      	bne.n	8001264 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e006      	b.n	80012b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
  }
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d003      	beq.n	80012e4 <HAL_CAN_AddTxMessage+0x2c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	f040 80ad 	bne.w	800143e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10a      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8095 	beq.w	800142e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	0e1b      	lsrs	r3, r3, #24
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10d      	bne.n	800133c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3318      	adds	r3, #24
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	440b      	add	r3, r1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e00f      	b.n	800135c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001346:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800134c:	68f9      	ldr	r1, [r7, #12]
 800134e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001350:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3318      	adds	r3, #24
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	440b      	add	r3, r1
 800135a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3318      	adds	r3, #24
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	440b      	add	r3, r1
 800136c:	3304      	adds	r3, #4
 800136e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	7d1b      	ldrb	r3, [r3, #20]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d111      	bne.n	800139c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3318      	adds	r3, #24
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	6811      	ldr	r1, [r2, #0]
 800138c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3318      	adds	r3, #24
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	440b      	add	r3, r1
 8001398:	3304      	adds	r3, #4
 800139a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	061a      	lsls	r2, r3, #24
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3306      	adds	r3, #6
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	041b      	lsls	r3, r3, #16
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3305      	adds	r3, #5
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4313      	orrs	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	3204      	adds	r2, #4
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	4610      	mov	r0, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	6811      	ldr	r1, [r2, #0]
 80013c4:	ea43 0200 	orr.w	r2, r3, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	440b      	add	r3, r1
 80013ce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80013d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3303      	adds	r3, #3
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	061a      	lsls	r2, r3, #24
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3302      	adds	r3, #2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	4610      	mov	r0, r2
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	6811      	ldr	r1, [r2, #0]
 80013fa:	ea43 0200 	orr.w	r2, r3, r0
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	440b      	add	r3, r1
 8001404:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001408:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3318      	adds	r3, #24
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3318      	adds	r3, #24
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e00e      	b.n	800144c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e006      	b.n	800144c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	3724      	adds	r7, #36	@ 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001456:	b480      	push	{r7}
 8001458:	b087      	sub	sp, #28
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d003      	beq.n	800147a <HAL_CAN_GetRxMessage+0x24>
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b02      	cmp	r3, #2
 8001476:	f040 8103 	bne.w	8001680 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10e      	bne.n	800149e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d116      	bne.n	80014bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0f7      	b.n	800168e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d107      	bne.n	80014bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0e8      	b.n	800168e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	331b      	adds	r3, #27
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0204 	and.w	r2, r3, #4
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10c      	bne.n	80014f4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	331b      	adds	r3, #27
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	4413      	add	r3, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0d5b      	lsrs	r3, r3, #21
 80014ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e00b      	b.n	800150c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	331b      	adds	r3, #27
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	331b      	adds	r3, #27
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0202 	and.w	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	331b      	adds	r3, #27
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	3304      	adds	r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2208      	movs	r2, #8
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	e00b      	b.n	800155a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	331b      	adds	r3, #27
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	3304      	adds	r3, #4
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 020f 	and.w	r2, r3, #15
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	331b      	adds	r3, #27
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	3304      	adds	r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	b2da      	uxtb	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	331b      	adds	r3, #27
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	3304      	adds	r3, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0c1b      	lsrs	r3, r3, #16
 8001584:	b29a      	uxth	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0a1a      	lsrs	r2, r3, #8
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0c1a      	lsrs	r2, r3, #16
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3302      	adds	r3, #2
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0e1a      	lsrs	r2, r3, #24
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	3303      	adds	r3, #3
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3304      	adds	r3, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0a1a      	lsrs	r2, r3, #8
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3305      	adds	r3, #5
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	4413      	add	r3, r2
 800162a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0c1a      	lsrs	r2, r3, #16
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3306      	adds	r3, #6
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e1a      	lsrs	r2, r3, #24
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3307      	adds	r3, #7
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0220 	orr.w	r2, r2, #32
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	e007      	b.n	800167c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0220 	orr.w	r2, r2, #32
 800167a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e006      	b.n	800168e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001684:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d002      	beq.n	80016b6 <HAL_CAN_ActivateNotification+0x1e>
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d109      	bne.n	80016ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6959      	ldr	r1, [r3, #20]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e006      	b.n	80016d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b08a      	sub	sp, #40	@ 0x28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d07c      	beq.n	8001822 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f983 	bl	8001a50 <HAL_CAN_TxMailbox0CompleteCallback>
 800174a:	e016      	b.n	800177a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
 800175e:	e00c      	b.n	800177a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
 8001772:	e002      	b.n	800177a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f986 	bl	8001a86 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d024      	beq.n	80017ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800178c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f962 	bl	8001a62 <HAL_CAN_TxMailbox1CompleteCallback>
 800179e:	e016      	b.n	80017ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b2:	e00c      	b.n	80017ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c6:	e002      	b.n	80017ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f965 	bl	8001a98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d024      	beq.n	8001822 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f941 	bl	8001a74 <HAL_CAN_TxMailbox2CompleteCallback>
 80017f2:	e016      	b.n	8001822 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	e00c      	b.n	8001822 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
 800181a:	e002      	b.n	8001822 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f944 	bl	8001aaa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00c      	beq.n	8001846 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2210      	movs	r2, #16
 8001844:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00b      	beq.n	8001868 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2208      	movs	r2, #8
 8001860:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f933 	bl	8001ace <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f91b 	bl	8001abc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00c      	beq.n	80018aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2210      	movs	r2, #16
 80018a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2208      	movs	r2, #8
 80018c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f90a 	bl	8001ae0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7fe fe8f 	bl	8000608 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00b      	beq.n	800190c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2210      	movs	r2, #16
 8001904:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8f3 	bl	8001af2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2208      	movs	r2, #8
 8001926:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f8eb 	bl	8001b04 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d07b      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d072      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800199c:	2b00      	cmp	r3, #0
 800199e:	d043      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03e      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019b0:	2b60      	cmp	r3, #96	@ 0x60
 80019b2:	d02b      	beq.n	8001a0c <HAL_CAN_IRQHandler+0x32a>
 80019b4:	2b60      	cmp	r3, #96	@ 0x60
 80019b6:	d82e      	bhi.n	8001a16 <HAL_CAN_IRQHandler+0x334>
 80019b8:	2b50      	cmp	r3, #80	@ 0x50
 80019ba:	d022      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x320>
 80019bc:	2b50      	cmp	r3, #80	@ 0x50
 80019be:	d82a      	bhi.n	8001a16 <HAL_CAN_IRQHandler+0x334>
 80019c0:	2b40      	cmp	r3, #64	@ 0x40
 80019c2:	d019      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x316>
 80019c4:	2b40      	cmp	r3, #64	@ 0x40
 80019c6:	d826      	bhi.n	8001a16 <HAL_CAN_IRQHandler+0x334>
 80019c8:	2b30      	cmp	r3, #48	@ 0x30
 80019ca:	d010      	beq.n	80019ee <HAL_CAN_IRQHandler+0x30c>
 80019cc:	2b30      	cmp	r3, #48	@ 0x30
 80019ce:	d822      	bhi.n	8001a16 <HAL_CAN_IRQHandler+0x334>
 80019d0:	2b10      	cmp	r3, #16
 80019d2:	d002      	beq.n	80019da <HAL_CAN_IRQHandler+0x2f8>
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d005      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019d8:	e01d      	b.n	8001a16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019e2:	e019      	b.n	8001a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ec:	e014      	b.n	8001a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f043 0320 	orr.w	r3, r3, #32
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019f6:	e00f      	b.n	8001a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a00:	e00a      	b.n	8001a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a0a:	e005      	b.n	8001a18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a14:	e000      	b.n	8001a18 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f867 	bl	8001b16 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3728      	adds	r7, #40	@ 0x28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	@ (8001bc0 <__NVIC_EnableIRQ+0x34>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff90 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff2d 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff42 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff35 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	@ 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	@ (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	@ (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	@ (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	@ (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	@ (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	@ (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	@ (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	@ (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	@ (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	@ (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	@ (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	@ 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	@ 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	@ (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	@ (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	@ (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	@ (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	@ 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e272      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800209c:	4b92      	ldr	r3, [pc, #584]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d00c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a8:	4b8f      	ldr	r3, [pc, #572]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d112      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
 80020b4:	4b8c      	ldr	r3, [pc, #560]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b89      	ldr	r3, [pc, #548]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x12c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d168      	bne.n	80021a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e24c      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76>
 80020e4:	4b80      	ldr	r3, [pc, #512]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7f      	ldr	r2, [pc, #508]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b7b      	ldr	r3, [pc, #492]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7a      	ldr	r2, [pc, #488]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b78      	ldr	r3, [pc, #480]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a77      	ldr	r2, [pc, #476]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0xbc>
 800211e:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a71      	ldr	r2, [pc, #452]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6e      	ldr	r2, [pc, #440]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002138:	4b6b      	ldr	r3, [pc, #428]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6a      	ldr	r2, [pc, #424]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b68      	ldr	r3, [pc, #416]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a67      	ldr	r2, [pc, #412]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fe9c 	bl	8000e94 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7fe fe98 	bl	8000e94 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	@ 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e200      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b5d      	ldr	r3, [pc, #372]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xe4>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe fe88 	bl	8000e94 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fe84 	bl	8000e94 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	@ 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1ec      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b53      	ldr	r3, [pc, #332]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x10c>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b6:	4b4c      	ldr	r3, [pc, #304]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c2:	4b49      	ldr	r3, [pc, #292]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
 80021ce:	4b46      	ldr	r3, [pc, #280]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1c0      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4939      	ldr	r1, [pc, #228]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b36      	ldr	r3, [pc, #216]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fe3d 	bl	8000e94 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221e:	f7fe fe39 	bl	8000e94 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1a1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4927      	ldr	r1, [pc, #156]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <HAL_RCC_OscConfig+0x270>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fe1c 	bl	8000e94 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe fe18 	bl	8000e94 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e180      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03a      	beq.n	8002300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_RCC_OscConfig+0x274>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7fe fdfc 	bl	8000e94 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe fdf8 	bl	8000e94 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e160      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 face 	bl	8002860 <RCC_Delay>
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fde2 	bl	8000e94 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	e00f      	b.n	80022f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe fdde 	bl	8000e94 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e146      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	42420000 	.word	0x42420000
 80022f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b92      	ldr	r3, [pc, #584]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e9      	bne.n	80022d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a6 	beq.w	800245a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b8b      	ldr	r3, [pc, #556]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a87      	ldr	r2, [pc, #540]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b85      	ldr	r3, [pc, #532]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b82      	ldr	r3, [pc, #520]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b7f      	ldr	r3, [pc, #508]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7e      	ldr	r2, [pc, #504]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fd9f 	bl	8000e94 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fd9b 	bl	8000e94 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	@ 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e103      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b75      	ldr	r3, [pc, #468]	@ (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x312>
 8002380:	4b6f      	ldr	r3, [pc, #444]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a6e      	ldr	r2, [pc, #440]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x334>
 8002396:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a69      	ldr	r2, [pc, #420]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a66      	ldr	r2, [pc, #408]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x356>
 80023b8:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a60      	ldr	r2, [pc, #384]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b58      	ldr	r3, [pc, #352]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a57      	ldr	r2, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fd4f 	bl	8000e94 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fd4b 	bl	8000e94 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0b1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x37e>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fd39 	bl	8000e94 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fd35 	bl	8000e94 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e09b      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b40      	ldr	r3, [pc, #256]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b3c      	ldr	r3, [pc, #240]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a3b      	ldr	r2, [pc, #236]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8087 	beq.w	8002572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d061      	beq.n	8002534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d146      	bne.n	8002506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b33      	ldr	r3, [pc, #204]	@ (8002548 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fd09 	bl	8000e94 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fd05 	bl	8000e94 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e06d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4921      	ldr	r1, [pc, #132]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a19      	ldr	r1, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	430b      	orrs	r3, r1
 80024d2:	491b      	ldr	r1, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fcd9 	bl	8000e94 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fcd5 	bl	8000e94 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e03d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46a>
 8002504:	e035      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_RCC_OscConfig+0x4cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fcc2 	bl	8000e94 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fcbe 	bl	8000e94 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e026      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x498>
 8002532:	e01e      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e019      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_OscConfig+0x500>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0d0      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d910      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 0207 	bic.w	r2, r3, #7
 80025aa:	4965      	ldr	r1, [pc, #404]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0b8      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025dc:	4b59      	ldr	r3, [pc, #356]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f4:	4b53      	ldr	r3, [pc, #332]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a52      	ldr	r2, [pc, #328]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4b50      	ldr	r3, [pc, #320]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	494d      	ldr	r1, [pc, #308]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d040      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d115      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e07f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b41      	ldr	r3, [pc, #260]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e073      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3d      	ldr	r3, [pc, #244]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06b      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4936      	ldr	r1, [pc, #216]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7fe fc10 	bl	8000e94 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe fc0c 	bl	8000e94 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e053      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2d      	ldr	r3, [pc, #180]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b27      	ldr	r3, [pc, #156]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d210      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	4922      	ldr	r1, [pc, #136]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e032      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4916      	ldr	r1, [pc, #88]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490e      	ldr	r1, [pc, #56]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270e:	f000 f821 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490a      	ldr	r1, [pc, #40]	@ (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a09      	ldr	r2, [pc, #36]	@ (800274c <HAL_RCC_ClockConfig+0x1cc>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_ClockConfig+0x1d0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fb6e 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	08004348 	.word	0x08004348
 800274c:	20000048 	.word	0x20000048
 8002750:	2000004c 	.word	0x2000004c

08002754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276e:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x30>
 800277e:	2b08      	cmp	r3, #8
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x36>
 8002782:	e027      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002786:	613b      	str	r3, [r7, #16]
      break;
 8002788:	e027      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0c      	ldr	r2, [pc, #48]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	613b      	str	r3, [r7, #16]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	693b      	ldr	r3, [r7, #16]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	08004360 	.word	0x08004360
 80027f4:	08004370 	.word	0x08004370
 80027f8:	003d0900 	.word	0x003d0900

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b02      	ldr	r3, [pc, #8]	@ (800280c <HAL_RCC_GetHCLKFreq+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000048 	.word	0x20000048

08002810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002814:	f7ff fff2 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	@ (8002834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08004358 	.word	0x08004358

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800283c:	f7ff ffde 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	@ (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	08004358 	.word	0x08004358

08002860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002868:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <RCC_Delay+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <RCC_Delay+0x38>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800287c:	bf00      	nop
  }
  while (Delay --);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <RCC_Delay+0x1c>
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000048 	.word	0x20000048
 8002898:	10624dd3 	.word	0x10624dd3

0800289c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e041      	b.n	8002932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f8f0 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f000 fa8a 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d001      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e03a      	b.n	80029ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a18      	ldr	r2, [pc, #96]	@ (80029d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00e      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x58>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297e:	d009      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x58>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a14      	ldr	r2, [pc, #80]	@ (80029d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x58>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d010      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	e007      	b.n	80029c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a1a      	ldr	r2, [r3, #32]
 80029fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10f      	bne.n	8002a28 <HAL_TIM_Base_Stop_IT+0x48>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_TIM_Base_Stop_IT+0x48>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d020      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0202 	mvn.w	r2, #2
 8002a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f998 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f98b 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f99a 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0204 	mvn.w	r2, #4
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f972 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f965 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f974 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d020      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0208 	mvn.w	r2, #8
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f94c 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f93f 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f94e 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d020      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0210 	mvn.w	r2, #16
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f926 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f919 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f928 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0201 	mvn.w	r2, #1
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fd16 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa7f 	bl	80030ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8f8 	bl	8002de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00c      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0220 	mvn.w	r2, #32
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa52 	bl	80030b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIM_ConfigClockSource+0x1c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0b4      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x186>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c70:	d03e      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c76:	f200 8087 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x172>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c86:	d87f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b70      	cmp	r3, #112	@ 0x70
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c8c:	2b70      	cmp	r3, #112	@ 0x70
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b60      	cmp	r3, #96	@ 0x60
 8002c92:	d050      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x11a>
 8002c94:	2b60      	cmp	r3, #96	@ 0x60
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b50      	cmp	r3, #80	@ 0x50
 8002c9a:	d03c      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xfa>
 8002c9c:	2b50      	cmp	r3, #80	@ 0x50
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b40      	cmp	r3, #64	@ 0x40
 8002ca2:	d058      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x13a>
 8002ca4:	2b40      	cmp	r3, #64	@ 0x40
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b30      	cmp	r3, #48	@ 0x30
 8002caa:	d064      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b30      	cmp	r3, #48	@ 0x30
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd2:	f000 f974 	bl	8002fbe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d00:	f000 f95d 	bl	8002fbe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8d4 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	@ 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f92b 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8f2 	bl	8002f2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	@ 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f91b 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8b4 	bl	8002ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	@ 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f90b 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f902 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec4 <TIM_Base_SetConfig+0xd0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <TIM_Base_SetConfig+0x30>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e12:	d007      	beq.n	8002e24 <TIM_Base_SetConfig+0x30>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec8 <TIM_Base_SetConfig+0xd4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0x30>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ecc <TIM_Base_SetConfig+0xd8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d108      	bne.n	8002e36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a22      	ldr	r2, [pc, #136]	@ (8002ec4 <TIM_Base_SetConfig+0xd0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <TIM_Base_SetConfig+0x62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e44:	d007      	beq.n	8002e56 <TIM_Base_SetConfig+0x62>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <TIM_Base_SetConfig+0xd4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_Base_SetConfig+0x62>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <TIM_Base_SetConfig+0xd8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d108      	bne.n	8002e68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <TIM_Base_SetConfig+0xd0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d103      	bne.n	8002e9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f023 0201 	bic.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]
  }
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800

08002ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 030a 	bic.w	r3, r3, #10
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0210 	bic.w	r2, r3, #16
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	031b      	lsls	r3, r3, #12
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	621a      	str	r2, [r3, #32]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f043 0307 	orr.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	609a      	str	r2, [r3, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003010:	2302      	movs	r3, #2
 8003012:	e046      	b.n	80030a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a16      	ldr	r2, [pc, #88]	@ (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003060:	d009      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a10      	ldr	r2, [pc, #64]	@ (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d10c      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800307c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800

080030b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e042      	b.n	8003174 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fcf4 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	@ 0x24
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800311e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f82b 	bl	800317c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031b6:	f023 030c 	bic.w	r3, r3, #12
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <UART_SetConfig+0x114>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7ff fb28 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	e002      	b.n	80031f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7ff fb10 	bl	8002810 <HAL_RCC_GetPCLK1Freq>
 80031f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009a      	lsls	r2, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	0119      	lsls	r1, r3, #4
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fbb2 f2f3 	udiv	r2, r2, r3
 8003228:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <UART_SetConfig+0x118>)
 800322a:	fba3 0302 	umull	r0, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2064      	movs	r0, #100	@ 0x64
 8003232:	fb00 f303 	mul.w	r3, r0, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	@ 0x32
 800323c:	4a15      	ldr	r2, [pc, #84]	@ (8003294 <UART_SetConfig+0x118>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003248:	4419      	add	r1, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	@ 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	@ 0x32
 8003274:	4a07      	ldr	r2, [pc, #28]	@ (8003294 <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	440a      	add	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013800 	.word	0x40013800
 8003294:	51eb851f 	.word	0x51eb851f

08003298 <srand>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <srand+0x44>)
 800329c:	4604      	mov	r4, r0
 800329e:	681d      	ldr	r5, [r3, #0]
 80032a0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80032a2:	b9b3      	cbnz	r3, 80032d2 <srand+0x3a>
 80032a4:	2018      	movs	r0, #24
 80032a6:	f000 fa79 	bl	800379c <malloc>
 80032aa:	4602      	mov	r2, r0
 80032ac:	6328      	str	r0, [r5, #48]	@ 0x30
 80032ae:	b920      	cbnz	r0, 80032ba <srand+0x22>
 80032b0:	2146      	movs	r1, #70	@ 0x46
 80032b2:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <srand+0x48>)
 80032b4:	480b      	ldr	r0, [pc, #44]	@ (80032e4 <srand+0x4c>)
 80032b6:	f000 fa0b 	bl	80036d0 <__assert_func>
 80032ba:	490b      	ldr	r1, [pc, #44]	@ (80032e8 <srand+0x50>)
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <srand+0x54>)
 80032be:	e9c0 1300 	strd	r1, r3, [r0]
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <srand+0x58>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	6083      	str	r3, [r0, #8]
 80032c8:	230b      	movs	r3, #11
 80032ca:	8183      	strh	r3, [r0, #12]
 80032cc:	2001      	movs	r0, #1
 80032ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80032d2:	2200      	movs	r2, #0
 80032d4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80032d6:	611c      	str	r4, [r3, #16]
 80032d8:	615a      	str	r2, [r3, #20]
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	20000060 	.word	0x20000060
 80032e0:	08004372 	.word	0x08004372
 80032e4:	08004389 	.word	0x08004389
 80032e8:	abcd330e 	.word	0xabcd330e
 80032ec:	e66d1234 	.word	0xe66d1234
 80032f0:	0005deec 	.word	0x0005deec

080032f4 <rand>:
 80032f4:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <rand+0x5c>)
 80032f6:	b510      	push	{r4, lr}
 80032f8:	681c      	ldr	r4, [r3, #0]
 80032fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032fc:	b9b3      	cbnz	r3, 800332c <rand+0x38>
 80032fe:	2018      	movs	r0, #24
 8003300:	f000 fa4c 	bl	800379c <malloc>
 8003304:	4602      	mov	r2, r0
 8003306:	6320      	str	r0, [r4, #48]	@ 0x30
 8003308:	b920      	cbnz	r0, 8003314 <rand+0x20>
 800330a:	2152      	movs	r1, #82	@ 0x52
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <rand+0x60>)
 800330e:	4812      	ldr	r0, [pc, #72]	@ (8003358 <rand+0x64>)
 8003310:	f000 f9de 	bl	80036d0 <__assert_func>
 8003314:	4911      	ldr	r1, [pc, #68]	@ (800335c <rand+0x68>)
 8003316:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <rand+0x6c>)
 8003318:	e9c0 1300 	strd	r1, r3, [r0]
 800331c:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <rand+0x70>)
 800331e:	2100      	movs	r1, #0
 8003320:	6083      	str	r3, [r0, #8]
 8003322:	230b      	movs	r3, #11
 8003324:	8183      	strh	r3, [r0, #12]
 8003326:	2001      	movs	r0, #1
 8003328:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800332c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800332e:	480e      	ldr	r0, [pc, #56]	@ (8003368 <rand+0x74>)
 8003330:	690b      	ldr	r3, [r1, #16]
 8003332:	694c      	ldr	r4, [r1, #20]
 8003334:	4358      	muls	r0, r3
 8003336:	4a0d      	ldr	r2, [pc, #52]	@ (800336c <rand+0x78>)
 8003338:	fb02 0004 	mla	r0, r2, r4, r0
 800333c:	fba3 3202 	umull	r3, r2, r3, r2
 8003340:	3301      	adds	r3, #1
 8003342:	eb40 0002 	adc.w	r0, r0, r2
 8003346:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800334a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800334e:	bd10      	pop	{r4, pc}
 8003350:	20000060 	.word	0x20000060
 8003354:	08004372 	.word	0x08004372
 8003358:	08004389 	.word	0x08004389
 800335c:	abcd330e 	.word	0xabcd330e
 8003360:	e66d1234 	.word	0xe66d1234
 8003364:	0005deec 	.word	0x0005deec
 8003368:	5851f42d 	.word	0x5851f42d
 800336c:	4c957f2d 	.word	0x4c957f2d

08003370 <std>:
 8003370:	2300      	movs	r3, #0
 8003372:	b510      	push	{r4, lr}
 8003374:	4604      	mov	r4, r0
 8003376:	e9c0 3300 	strd	r3, r3, [r0]
 800337a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800337e:	6083      	str	r3, [r0, #8]
 8003380:	8181      	strh	r1, [r0, #12]
 8003382:	6643      	str	r3, [r0, #100]	@ 0x64
 8003384:	81c2      	strh	r2, [r0, #14]
 8003386:	6183      	str	r3, [r0, #24]
 8003388:	4619      	mov	r1, r3
 800338a:	2208      	movs	r2, #8
 800338c:	305c      	adds	r0, #92	@ 0x5c
 800338e:	f000 f8f4 	bl	800357a <memset>
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <std+0x58>)
 8003394:	6224      	str	r4, [r4, #32]
 8003396:	6263      	str	r3, [r4, #36]	@ 0x24
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <std+0x5c>)
 800339a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <std+0x60>)
 800339e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033a0:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <std+0x64>)
 80033a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80033a4:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <std+0x68>)
 80033a6:	429c      	cmp	r4, r3
 80033a8:	d006      	beq.n	80033b8 <std+0x48>
 80033aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033ae:	4294      	cmp	r4, r2
 80033b0:	d002      	beq.n	80033b8 <std+0x48>
 80033b2:	33d0      	adds	r3, #208	@ 0xd0
 80033b4:	429c      	cmp	r4, r3
 80033b6:	d105      	bne.n	80033c4 <std+0x54>
 80033b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f000 b982 	b.w	80036c8 <__retarget_lock_init_recursive>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	bf00      	nop
 80033c8:	080034f5 	.word	0x080034f5
 80033cc:	08003517 	.word	0x08003517
 80033d0:	0800354f 	.word	0x0800354f
 80033d4:	08003573 	.word	0x08003573
 80033d8:	200001dc 	.word	0x200001dc

080033dc <stdio_exit_handler>:
 80033dc:	4a02      	ldr	r2, [pc, #8]	@ (80033e8 <stdio_exit_handler+0xc>)
 80033de:	4903      	ldr	r1, [pc, #12]	@ (80033ec <stdio_exit_handler+0x10>)
 80033e0:	4803      	ldr	r0, [pc, #12]	@ (80033f0 <stdio_exit_handler+0x14>)
 80033e2:	f000 b869 	b.w	80034b8 <_fwalk_sglue>
 80033e6:	bf00      	nop
 80033e8:	20000054 	.word	0x20000054
 80033ec:	08003a09 	.word	0x08003a09
 80033f0:	20000064 	.word	0x20000064

080033f4 <cleanup_stdio>:
 80033f4:	6841      	ldr	r1, [r0, #4]
 80033f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <cleanup_stdio+0x34>)
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4299      	cmp	r1, r3
 80033fc:	4604      	mov	r4, r0
 80033fe:	d001      	beq.n	8003404 <cleanup_stdio+0x10>
 8003400:	f000 fb02 	bl	8003a08 <_fflush_r>
 8003404:	68a1      	ldr	r1, [r4, #8]
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <cleanup_stdio+0x38>)
 8003408:	4299      	cmp	r1, r3
 800340a:	d002      	beq.n	8003412 <cleanup_stdio+0x1e>
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fafb 	bl	8003a08 <_fflush_r>
 8003412:	68e1      	ldr	r1, [r4, #12]
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <cleanup_stdio+0x3c>)
 8003416:	4299      	cmp	r1, r3
 8003418:	d004      	beq.n	8003424 <cleanup_stdio+0x30>
 800341a:	4620      	mov	r0, r4
 800341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003420:	f000 baf2 	b.w	8003a08 <_fflush_r>
 8003424:	bd10      	pop	{r4, pc}
 8003426:	bf00      	nop
 8003428:	200001dc 	.word	0x200001dc
 800342c:	20000244 	.word	0x20000244
 8003430:	200002ac 	.word	0x200002ac

08003434 <global_stdio_init.part.0>:
 8003434:	b510      	push	{r4, lr}
 8003436:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <global_stdio_init.part.0+0x30>)
 8003438:	4c0b      	ldr	r4, [pc, #44]	@ (8003468 <global_stdio_init.part.0+0x34>)
 800343a:	4a0c      	ldr	r2, [pc, #48]	@ (800346c <global_stdio_init.part.0+0x38>)
 800343c:	4620      	mov	r0, r4
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	2104      	movs	r1, #4
 8003442:	2200      	movs	r2, #0
 8003444:	f7ff ff94 	bl	8003370 <std>
 8003448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800344c:	2201      	movs	r2, #1
 800344e:	2109      	movs	r1, #9
 8003450:	f7ff ff8e 	bl	8003370 <std>
 8003454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003458:	2202      	movs	r2, #2
 800345a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800345e:	2112      	movs	r1, #18
 8003460:	f7ff bf86 	b.w	8003370 <std>
 8003464:	20000314 	.word	0x20000314
 8003468:	200001dc 	.word	0x200001dc
 800346c:	080033dd 	.word	0x080033dd

08003470 <__sfp_lock_acquire>:
 8003470:	4801      	ldr	r0, [pc, #4]	@ (8003478 <__sfp_lock_acquire+0x8>)
 8003472:	f000 b92a 	b.w	80036ca <__retarget_lock_acquire_recursive>
 8003476:	bf00      	nop
 8003478:	2000031d 	.word	0x2000031d

0800347c <__sfp_lock_release>:
 800347c:	4801      	ldr	r0, [pc, #4]	@ (8003484 <__sfp_lock_release+0x8>)
 800347e:	f000 b925 	b.w	80036cc <__retarget_lock_release_recursive>
 8003482:	bf00      	nop
 8003484:	2000031d 	.word	0x2000031d

08003488 <__sinit>:
 8003488:	b510      	push	{r4, lr}
 800348a:	4604      	mov	r4, r0
 800348c:	f7ff fff0 	bl	8003470 <__sfp_lock_acquire>
 8003490:	6a23      	ldr	r3, [r4, #32]
 8003492:	b11b      	cbz	r3, 800349c <__sinit+0x14>
 8003494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003498:	f7ff bff0 	b.w	800347c <__sfp_lock_release>
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <__sinit+0x28>)
 800349e:	6223      	str	r3, [r4, #32]
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <__sinit+0x2c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f5      	bne.n	8003494 <__sinit+0xc>
 80034a8:	f7ff ffc4 	bl	8003434 <global_stdio_init.part.0>
 80034ac:	e7f2      	b.n	8003494 <__sinit+0xc>
 80034ae:	bf00      	nop
 80034b0:	080033f5 	.word	0x080033f5
 80034b4:	20000314 	.word	0x20000314

080034b8 <_fwalk_sglue>:
 80034b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034bc:	4607      	mov	r7, r0
 80034be:	4688      	mov	r8, r1
 80034c0:	4614      	mov	r4, r2
 80034c2:	2600      	movs	r6, #0
 80034c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034c8:	f1b9 0901 	subs.w	r9, r9, #1
 80034cc:	d505      	bpl.n	80034da <_fwalk_sglue+0x22>
 80034ce:	6824      	ldr	r4, [r4, #0]
 80034d0:	2c00      	cmp	r4, #0
 80034d2:	d1f7      	bne.n	80034c4 <_fwalk_sglue+0xc>
 80034d4:	4630      	mov	r0, r6
 80034d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034da:	89ab      	ldrh	r3, [r5, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d907      	bls.n	80034f0 <_fwalk_sglue+0x38>
 80034e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034e4:	3301      	adds	r3, #1
 80034e6:	d003      	beq.n	80034f0 <_fwalk_sglue+0x38>
 80034e8:	4629      	mov	r1, r5
 80034ea:	4638      	mov	r0, r7
 80034ec:	47c0      	blx	r8
 80034ee:	4306      	orrs	r6, r0
 80034f0:	3568      	adds	r5, #104	@ 0x68
 80034f2:	e7e9      	b.n	80034c8 <_fwalk_sglue+0x10>

080034f4 <__sread>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	460c      	mov	r4, r1
 80034f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fc:	f000 f896 	bl	800362c <_read_r>
 8003500:	2800      	cmp	r0, #0
 8003502:	bfab      	itete	ge
 8003504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003506:	89a3      	ldrhlt	r3, [r4, #12]
 8003508:	181b      	addge	r3, r3, r0
 800350a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800350e:	bfac      	ite	ge
 8003510:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003512:	81a3      	strhlt	r3, [r4, #12]
 8003514:	bd10      	pop	{r4, pc}

08003516 <__swrite>:
 8003516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351a:	461f      	mov	r7, r3
 800351c:	898b      	ldrh	r3, [r1, #12]
 800351e:	4605      	mov	r5, r0
 8003520:	05db      	lsls	r3, r3, #23
 8003522:	460c      	mov	r4, r1
 8003524:	4616      	mov	r6, r2
 8003526:	d505      	bpl.n	8003534 <__swrite+0x1e>
 8003528:	2302      	movs	r3, #2
 800352a:	2200      	movs	r2, #0
 800352c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003530:	f000 f86a 	bl	8003608 <_lseek_r>
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	4632      	mov	r2, r6
 8003538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	4628      	mov	r0, r5
 8003540:	463b      	mov	r3, r7
 8003542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800354a:	f000 b881 	b.w	8003650 <_write_r>

0800354e <__sseek>:
 800354e:	b510      	push	{r4, lr}
 8003550:	460c      	mov	r4, r1
 8003552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003556:	f000 f857 	bl	8003608 <_lseek_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	bf15      	itete	ne
 8003560:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800356a:	81a3      	strheq	r3, [r4, #12]
 800356c:	bf18      	it	ne
 800356e:	81a3      	strhne	r3, [r4, #12]
 8003570:	bd10      	pop	{r4, pc}

08003572 <__sclose>:
 8003572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003576:	f000 b825 	b.w	80035c4 <_close_r>

0800357a <memset>:
 800357a:	4603      	mov	r3, r0
 800357c:	4402      	add	r2, r0
 800357e:	4293      	cmp	r3, r2
 8003580:	d100      	bne.n	8003584 <memset+0xa>
 8003582:	4770      	bx	lr
 8003584:	f803 1b01 	strb.w	r1, [r3], #1
 8003588:	e7f9      	b.n	800357e <memset+0x4>
	...

0800358c <time>:
 800358c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800358e:	f04f 36ff 	mov.w	r6, #4294967295
 8003592:	f04f 37ff 	mov.w	r7, #4294967295
 8003596:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <time+0x34>)
 8003598:	4604      	mov	r4, r0
 800359a:	2200      	movs	r2, #0
 800359c:	4669      	mov	r1, sp
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	e9cd 6700 	strd	r6, r7, [sp]
 80035a4:	f000 f81e 	bl	80035e4 <_gettimeofday_r>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	da01      	bge.n	80035b0 <time+0x24>
 80035ac:	e9cd 6700 	strd	r6, r7, [sp]
 80035b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035b4:	b10c      	cbz	r4, 80035ba <time+0x2e>
 80035b6:	e9c4 0100 	strd	r0, r1, [r4]
 80035ba:	b004      	add	sp, #16
 80035bc:	bdd0      	pop	{r4, r6, r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000060 	.word	0x20000060

080035c4 <_close_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	2300      	movs	r3, #0
 80035c8:	4d05      	ldr	r5, [pc, #20]	@ (80035e0 <_close_r+0x1c>)
 80035ca:	4604      	mov	r4, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	f7fd fb75 	bl	8000cbe <_close>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d102      	bne.n	80035de <_close_r+0x1a>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	b103      	cbz	r3, 80035de <_close_r+0x1a>
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	20000318 	.word	0x20000318

080035e4 <_gettimeofday_r>:
 80035e4:	b538      	push	{r3, r4, r5, lr}
 80035e6:	2300      	movs	r3, #0
 80035e8:	4d06      	ldr	r5, [pc, #24]	@ (8003604 <_gettimeofday_r+0x20>)
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	602b      	str	r3, [r5, #0]
 80035f2:	f000 fe95 	bl	8004320 <_gettimeofday>
 80035f6:	1c43      	adds	r3, r0, #1
 80035f8:	d102      	bne.n	8003600 <_gettimeofday_r+0x1c>
 80035fa:	682b      	ldr	r3, [r5, #0]
 80035fc:	b103      	cbz	r3, 8003600 <_gettimeofday_r+0x1c>
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	bf00      	nop
 8003604:	20000318 	.word	0x20000318

08003608 <_lseek_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	2200      	movs	r2, #0
 8003612:	4d05      	ldr	r5, [pc, #20]	@ (8003628 <_lseek_r+0x20>)
 8003614:	602a      	str	r2, [r5, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f7fd fb75 	bl	8000d06 <_lseek>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_lseek_r+0x1e>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_lseek_r+0x1e>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	20000318 	.word	0x20000318

0800362c <_read_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4604      	mov	r4, r0
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	2200      	movs	r2, #0
 8003636:	4d05      	ldr	r5, [pc, #20]	@ (800364c <_read_r+0x20>)
 8003638:	602a      	str	r2, [r5, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	f7fd fb06 	bl	8000c4c <_read>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d102      	bne.n	800364a <_read_r+0x1e>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	b103      	cbz	r3, 800364a <_read_r+0x1e>
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	20000318 	.word	0x20000318

08003650 <_write_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	2200      	movs	r2, #0
 800365a:	4d05      	ldr	r5, [pc, #20]	@ (8003670 <_write_r+0x20>)
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fd fb11 	bl	8000c86 <_write>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_write_r+0x1e>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_write_r+0x1e>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000318 	.word	0x20000318

08003674 <__errno>:
 8003674:	4b01      	ldr	r3, [pc, #4]	@ (800367c <__errno+0x8>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000060 	.word	0x20000060

08003680 <__libc_init_array>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	2600      	movs	r6, #0
 8003684:	4d0c      	ldr	r5, [pc, #48]	@ (80036b8 <__libc_init_array+0x38>)
 8003686:	4c0d      	ldr	r4, [pc, #52]	@ (80036bc <__libc_init_array+0x3c>)
 8003688:	1b64      	subs	r4, r4, r5
 800368a:	10a4      	asrs	r4, r4, #2
 800368c:	42a6      	cmp	r6, r4
 800368e:	d109      	bne.n	80036a4 <__libc_init_array+0x24>
 8003690:	f000 fe4e 	bl	8004330 <_init>
 8003694:	2600      	movs	r6, #0
 8003696:	4d0a      	ldr	r5, [pc, #40]	@ (80036c0 <__libc_init_array+0x40>)
 8003698:	4c0a      	ldr	r4, [pc, #40]	@ (80036c4 <__libc_init_array+0x44>)
 800369a:	1b64      	subs	r4, r4, r5
 800369c:	10a4      	asrs	r4, r4, #2
 800369e:	42a6      	cmp	r6, r4
 80036a0:	d105      	bne.n	80036ae <__libc_init_array+0x2e>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a8:	4798      	blx	r3
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7ee      	b.n	800368c <__libc_init_array+0xc>
 80036ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b2:	4798      	blx	r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	e7f2      	b.n	800369e <__libc_init_array+0x1e>
 80036b8:	08004450 	.word	0x08004450
 80036bc:	08004450 	.word	0x08004450
 80036c0:	08004450 	.word	0x08004450
 80036c4:	08004454 	.word	0x08004454

080036c8 <__retarget_lock_init_recursive>:
 80036c8:	4770      	bx	lr

080036ca <__retarget_lock_acquire_recursive>:
 80036ca:	4770      	bx	lr

080036cc <__retarget_lock_release_recursive>:
 80036cc:	4770      	bx	lr
	...

080036d0 <__assert_func>:
 80036d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036d2:	4614      	mov	r4, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <__assert_func+0x2c>)
 80036d8:	4605      	mov	r5, r0
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68d8      	ldr	r0, [r3, #12]
 80036de:	b954      	cbnz	r4, 80036f6 <__assert_func+0x26>
 80036e0:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <__assert_func+0x30>)
 80036e2:	461c      	mov	r4, r3
 80036e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80036e8:	9100      	str	r1, [sp, #0]
 80036ea:	462b      	mov	r3, r5
 80036ec:	4905      	ldr	r1, [pc, #20]	@ (8003704 <__assert_func+0x34>)
 80036ee:	f000 f9b3 	bl	8003a58 <fiprintf>
 80036f2:	f000 f9d3 	bl	8003a9c <abort>
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <__assert_func+0x38>)
 80036f8:	e7f4      	b.n	80036e4 <__assert_func+0x14>
 80036fa:	bf00      	nop
 80036fc:	20000060 	.word	0x20000060
 8003700:	0800441c 	.word	0x0800441c
 8003704:	080043ee 	.word	0x080043ee
 8003708:	080043e1 	.word	0x080043e1

0800370c <_free_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4605      	mov	r5, r0
 8003710:	2900      	cmp	r1, #0
 8003712:	d040      	beq.n	8003796 <_free_r+0x8a>
 8003714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003718:	1f0c      	subs	r4, r1, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfb8      	it	lt
 800371e:	18e4      	addlt	r4, r4, r3
 8003720:	f000 f8e6 	bl	80038f0 <__malloc_lock>
 8003724:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <_free_r+0x8c>)
 8003726:	6813      	ldr	r3, [r2, #0]
 8003728:	b933      	cbnz	r3, 8003738 <_free_r+0x2c>
 800372a:	6063      	str	r3, [r4, #4]
 800372c:	6014      	str	r4, [r2, #0]
 800372e:	4628      	mov	r0, r5
 8003730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003734:	f000 b8e2 	b.w	80038fc <__malloc_unlock>
 8003738:	42a3      	cmp	r3, r4
 800373a:	d908      	bls.n	800374e <_free_r+0x42>
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	1821      	adds	r1, r4, r0
 8003740:	428b      	cmp	r3, r1
 8003742:	bf01      	itttt	eq
 8003744:	6819      	ldreq	r1, [r3, #0]
 8003746:	685b      	ldreq	r3, [r3, #4]
 8003748:	1809      	addeq	r1, r1, r0
 800374a:	6021      	streq	r1, [r4, #0]
 800374c:	e7ed      	b.n	800372a <_free_r+0x1e>
 800374e:	461a      	mov	r2, r3
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	b10b      	cbz	r3, 8003758 <_free_r+0x4c>
 8003754:	42a3      	cmp	r3, r4
 8003756:	d9fa      	bls.n	800374e <_free_r+0x42>
 8003758:	6811      	ldr	r1, [r2, #0]
 800375a:	1850      	adds	r0, r2, r1
 800375c:	42a0      	cmp	r0, r4
 800375e:	d10b      	bne.n	8003778 <_free_r+0x6c>
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	4401      	add	r1, r0
 8003764:	1850      	adds	r0, r2, r1
 8003766:	4283      	cmp	r3, r0
 8003768:	6011      	str	r1, [r2, #0]
 800376a:	d1e0      	bne.n	800372e <_free_r+0x22>
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4408      	add	r0, r1
 8003772:	6010      	str	r0, [r2, #0]
 8003774:	6053      	str	r3, [r2, #4]
 8003776:	e7da      	b.n	800372e <_free_r+0x22>
 8003778:	d902      	bls.n	8003780 <_free_r+0x74>
 800377a:	230c      	movs	r3, #12
 800377c:	602b      	str	r3, [r5, #0]
 800377e:	e7d6      	b.n	800372e <_free_r+0x22>
 8003780:	6820      	ldr	r0, [r4, #0]
 8003782:	1821      	adds	r1, r4, r0
 8003784:	428b      	cmp	r3, r1
 8003786:	bf01      	itttt	eq
 8003788:	6819      	ldreq	r1, [r3, #0]
 800378a:	685b      	ldreq	r3, [r3, #4]
 800378c:	1809      	addeq	r1, r1, r0
 800378e:	6021      	streq	r1, [r4, #0]
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	6054      	str	r4, [r2, #4]
 8003794:	e7cb      	b.n	800372e <_free_r+0x22>
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	20000324 	.word	0x20000324

0800379c <malloc>:
 800379c:	4b02      	ldr	r3, [pc, #8]	@ (80037a8 <malloc+0xc>)
 800379e:	4601      	mov	r1, r0
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	f000 b825 	b.w	80037f0 <_malloc_r>
 80037a6:	bf00      	nop
 80037a8:	20000060 	.word	0x20000060

080037ac <sbrk_aligned>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4e0f      	ldr	r6, [pc, #60]	@ (80037ec <sbrk_aligned+0x40>)
 80037b0:	460c      	mov	r4, r1
 80037b2:	6831      	ldr	r1, [r6, #0]
 80037b4:	4605      	mov	r5, r0
 80037b6:	b911      	cbnz	r1, 80037be <sbrk_aligned+0x12>
 80037b8:	f000 f960 	bl	8003a7c <_sbrk_r>
 80037bc:	6030      	str	r0, [r6, #0]
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f95b 	bl	8003a7c <_sbrk_r>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d103      	bne.n	80037d2 <sbrk_aligned+0x26>
 80037ca:	f04f 34ff 	mov.w	r4, #4294967295
 80037ce:	4620      	mov	r0, r4
 80037d0:	bd70      	pop	{r4, r5, r6, pc}
 80037d2:	1cc4      	adds	r4, r0, #3
 80037d4:	f024 0403 	bic.w	r4, r4, #3
 80037d8:	42a0      	cmp	r0, r4
 80037da:	d0f8      	beq.n	80037ce <sbrk_aligned+0x22>
 80037dc:	1a21      	subs	r1, r4, r0
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 f94c 	bl	8003a7c <_sbrk_r>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d1f2      	bne.n	80037ce <sbrk_aligned+0x22>
 80037e8:	e7ef      	b.n	80037ca <sbrk_aligned+0x1e>
 80037ea:	bf00      	nop
 80037ec:	20000320 	.word	0x20000320

080037f0 <_malloc_r>:
 80037f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f4:	1ccd      	adds	r5, r1, #3
 80037f6:	f025 0503 	bic.w	r5, r5, #3
 80037fa:	3508      	adds	r5, #8
 80037fc:	2d0c      	cmp	r5, #12
 80037fe:	bf38      	it	cc
 8003800:	250c      	movcc	r5, #12
 8003802:	2d00      	cmp	r5, #0
 8003804:	4606      	mov	r6, r0
 8003806:	db01      	blt.n	800380c <_malloc_r+0x1c>
 8003808:	42a9      	cmp	r1, r5
 800380a:	d904      	bls.n	8003816 <_malloc_r+0x26>
 800380c:	230c      	movs	r3, #12
 800380e:	6033      	str	r3, [r6, #0]
 8003810:	2000      	movs	r0, #0
 8003812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038ec <_malloc_r+0xfc>
 800381a:	f000 f869 	bl	80038f0 <__malloc_lock>
 800381e:	f8d8 3000 	ldr.w	r3, [r8]
 8003822:	461c      	mov	r4, r3
 8003824:	bb44      	cbnz	r4, 8003878 <_malloc_r+0x88>
 8003826:	4629      	mov	r1, r5
 8003828:	4630      	mov	r0, r6
 800382a:	f7ff ffbf 	bl	80037ac <sbrk_aligned>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	4604      	mov	r4, r0
 8003832:	d158      	bne.n	80038e6 <_malloc_r+0xf6>
 8003834:	f8d8 4000 	ldr.w	r4, [r8]
 8003838:	4627      	mov	r7, r4
 800383a:	2f00      	cmp	r7, #0
 800383c:	d143      	bne.n	80038c6 <_malloc_r+0xd6>
 800383e:	2c00      	cmp	r4, #0
 8003840:	d04b      	beq.n	80038da <_malloc_r+0xea>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	4639      	mov	r1, r7
 8003846:	4630      	mov	r0, r6
 8003848:	eb04 0903 	add.w	r9, r4, r3
 800384c:	f000 f916 	bl	8003a7c <_sbrk_r>
 8003850:	4581      	cmp	r9, r0
 8003852:	d142      	bne.n	80038da <_malloc_r+0xea>
 8003854:	6821      	ldr	r1, [r4, #0]
 8003856:	4630      	mov	r0, r6
 8003858:	1a6d      	subs	r5, r5, r1
 800385a:	4629      	mov	r1, r5
 800385c:	f7ff ffa6 	bl	80037ac <sbrk_aligned>
 8003860:	3001      	adds	r0, #1
 8003862:	d03a      	beq.n	80038da <_malloc_r+0xea>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	442b      	add	r3, r5
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	f8d8 3000 	ldr.w	r3, [r8]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	bb62      	cbnz	r2, 80038cc <_malloc_r+0xdc>
 8003872:	f8c8 7000 	str.w	r7, [r8]
 8003876:	e00f      	b.n	8003898 <_malloc_r+0xa8>
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	1b52      	subs	r2, r2, r5
 800387c:	d420      	bmi.n	80038c0 <_malloc_r+0xd0>
 800387e:	2a0b      	cmp	r2, #11
 8003880:	d917      	bls.n	80038b2 <_malloc_r+0xc2>
 8003882:	1961      	adds	r1, r4, r5
 8003884:	42a3      	cmp	r3, r4
 8003886:	6025      	str	r5, [r4, #0]
 8003888:	bf18      	it	ne
 800388a:	6059      	strne	r1, [r3, #4]
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	bf08      	it	eq
 8003890:	f8c8 1000 	streq.w	r1, [r8]
 8003894:	5162      	str	r2, [r4, r5]
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	4630      	mov	r0, r6
 800389a:	f000 f82f 	bl	80038fc <__malloc_unlock>
 800389e:	f104 000b 	add.w	r0, r4, #11
 80038a2:	1d23      	adds	r3, r4, #4
 80038a4:	f020 0007 	bic.w	r0, r0, #7
 80038a8:	1ac2      	subs	r2, r0, r3
 80038aa:	bf1c      	itt	ne
 80038ac:	1a1b      	subne	r3, r3, r0
 80038ae:	50a3      	strne	r3, [r4, r2]
 80038b0:	e7af      	b.n	8003812 <_malloc_r+0x22>
 80038b2:	6862      	ldr	r2, [r4, #4]
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	bf0c      	ite	eq
 80038b8:	f8c8 2000 	streq.w	r2, [r8]
 80038bc:	605a      	strne	r2, [r3, #4]
 80038be:	e7eb      	b.n	8003898 <_malloc_r+0xa8>
 80038c0:	4623      	mov	r3, r4
 80038c2:	6864      	ldr	r4, [r4, #4]
 80038c4:	e7ae      	b.n	8003824 <_malloc_r+0x34>
 80038c6:	463c      	mov	r4, r7
 80038c8:	687f      	ldr	r7, [r7, #4]
 80038ca:	e7b6      	b.n	800383a <_malloc_r+0x4a>
 80038cc:	461a      	mov	r2, r3
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d1fb      	bne.n	80038cc <_malloc_r+0xdc>
 80038d4:	2300      	movs	r3, #0
 80038d6:	6053      	str	r3, [r2, #4]
 80038d8:	e7de      	b.n	8003898 <_malloc_r+0xa8>
 80038da:	230c      	movs	r3, #12
 80038dc:	4630      	mov	r0, r6
 80038de:	6033      	str	r3, [r6, #0]
 80038e0:	f000 f80c 	bl	80038fc <__malloc_unlock>
 80038e4:	e794      	b.n	8003810 <_malloc_r+0x20>
 80038e6:	6005      	str	r5, [r0, #0]
 80038e8:	e7d6      	b.n	8003898 <_malloc_r+0xa8>
 80038ea:	bf00      	nop
 80038ec:	20000324 	.word	0x20000324

080038f0 <__malloc_lock>:
 80038f0:	4801      	ldr	r0, [pc, #4]	@ (80038f8 <__malloc_lock+0x8>)
 80038f2:	f7ff beea 	b.w	80036ca <__retarget_lock_acquire_recursive>
 80038f6:	bf00      	nop
 80038f8:	2000031c 	.word	0x2000031c

080038fc <__malloc_unlock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	@ (8003904 <__malloc_unlock+0x8>)
 80038fe:	f7ff bee5 	b.w	80036cc <__retarget_lock_release_recursive>
 8003902:	bf00      	nop
 8003904:	2000031c 	.word	0x2000031c

08003908 <__sflush_r>:
 8003908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	0716      	lsls	r6, r2, #28
 8003910:	4605      	mov	r5, r0
 8003912:	460c      	mov	r4, r1
 8003914:	d454      	bmi.n	80039c0 <__sflush_r+0xb8>
 8003916:	684b      	ldr	r3, [r1, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	dc02      	bgt.n	8003922 <__sflush_r+0x1a>
 800391c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	dd48      	ble.n	80039b4 <__sflush_r+0xac>
 8003922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003924:	2e00      	cmp	r6, #0
 8003926:	d045      	beq.n	80039b4 <__sflush_r+0xac>
 8003928:	2300      	movs	r3, #0
 800392a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800392e:	682f      	ldr	r7, [r5, #0]
 8003930:	6a21      	ldr	r1, [r4, #32]
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	d030      	beq.n	8003998 <__sflush_r+0x90>
 8003936:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	0759      	lsls	r1, r3, #29
 800393c:	d505      	bpl.n	800394a <__sflush_r+0x42>
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003944:	b10b      	cbz	r3, 800394a <__sflush_r+0x42>
 8003946:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003948:	1ad2      	subs	r2, r2, r3
 800394a:	2300      	movs	r3, #0
 800394c:	4628      	mov	r0, r5
 800394e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003950:	6a21      	ldr	r1, [r4, #32]
 8003952:	47b0      	blx	r6
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	d106      	bne.n	8003968 <__sflush_r+0x60>
 800395a:	6829      	ldr	r1, [r5, #0]
 800395c:	291d      	cmp	r1, #29
 800395e:	d82b      	bhi.n	80039b8 <__sflush_r+0xb0>
 8003960:	4a28      	ldr	r2, [pc, #160]	@ (8003a04 <__sflush_r+0xfc>)
 8003962:	410a      	asrs	r2, r1
 8003964:	07d6      	lsls	r6, r2, #31
 8003966:	d427      	bmi.n	80039b8 <__sflush_r+0xb0>
 8003968:	2200      	movs	r2, #0
 800396a:	6062      	str	r2, [r4, #4]
 800396c:	6922      	ldr	r2, [r4, #16]
 800396e:	04d9      	lsls	r1, r3, #19
 8003970:	6022      	str	r2, [r4, #0]
 8003972:	d504      	bpl.n	800397e <__sflush_r+0x76>
 8003974:	1c42      	adds	r2, r0, #1
 8003976:	d101      	bne.n	800397c <__sflush_r+0x74>
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	b903      	cbnz	r3, 800397e <__sflush_r+0x76>
 800397c:	6560      	str	r0, [r4, #84]	@ 0x54
 800397e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003980:	602f      	str	r7, [r5, #0]
 8003982:	b1b9      	cbz	r1, 80039b4 <__sflush_r+0xac>
 8003984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003988:	4299      	cmp	r1, r3
 800398a:	d002      	beq.n	8003992 <__sflush_r+0x8a>
 800398c:	4628      	mov	r0, r5
 800398e:	f7ff febd 	bl	800370c <_free_r>
 8003992:	2300      	movs	r3, #0
 8003994:	6363      	str	r3, [r4, #52]	@ 0x34
 8003996:	e00d      	b.n	80039b4 <__sflush_r+0xac>
 8003998:	2301      	movs	r3, #1
 800399a:	4628      	mov	r0, r5
 800399c:	47b0      	blx	r6
 800399e:	4602      	mov	r2, r0
 80039a0:	1c50      	adds	r0, r2, #1
 80039a2:	d1c9      	bne.n	8003938 <__sflush_r+0x30>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0c6      	beq.n	8003938 <__sflush_r+0x30>
 80039aa:	2b1d      	cmp	r3, #29
 80039ac:	d001      	beq.n	80039b2 <__sflush_r+0xaa>
 80039ae:	2b16      	cmp	r3, #22
 80039b0:	d11d      	bne.n	80039ee <__sflush_r+0xe6>
 80039b2:	602f      	str	r7, [r5, #0]
 80039b4:	2000      	movs	r0, #0
 80039b6:	e021      	b.n	80039fc <__sflush_r+0xf4>
 80039b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039bc:	b21b      	sxth	r3, r3
 80039be:	e01a      	b.n	80039f6 <__sflush_r+0xee>
 80039c0:	690f      	ldr	r7, [r1, #16]
 80039c2:	2f00      	cmp	r7, #0
 80039c4:	d0f6      	beq.n	80039b4 <__sflush_r+0xac>
 80039c6:	0793      	lsls	r3, r2, #30
 80039c8:	bf18      	it	ne
 80039ca:	2300      	movne	r3, #0
 80039cc:	680e      	ldr	r6, [r1, #0]
 80039ce:	bf08      	it	eq
 80039d0:	694b      	ldreq	r3, [r1, #20]
 80039d2:	1bf6      	subs	r6, r6, r7
 80039d4:	600f      	str	r7, [r1, #0]
 80039d6:	608b      	str	r3, [r1, #8]
 80039d8:	2e00      	cmp	r6, #0
 80039da:	ddeb      	ble.n	80039b4 <__sflush_r+0xac>
 80039dc:	4633      	mov	r3, r6
 80039de:	463a      	mov	r2, r7
 80039e0:	4628      	mov	r0, r5
 80039e2:	6a21      	ldr	r1, [r4, #32]
 80039e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80039e8:	47e0      	blx	ip
 80039ea:	2800      	cmp	r0, #0
 80039ec:	dc07      	bgt.n	80039fe <__sflush_r+0xf6>
 80039ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295
 80039fa:	81a3      	strh	r3, [r4, #12]
 80039fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039fe:	4407      	add	r7, r0
 8003a00:	1a36      	subs	r6, r6, r0
 8003a02:	e7e9      	b.n	80039d8 <__sflush_r+0xd0>
 8003a04:	dfbffffe 	.word	0xdfbffffe

08003a08 <_fflush_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	b913      	cbnz	r3, 8003a18 <_fflush_r+0x10>
 8003a12:	2500      	movs	r5, #0
 8003a14:	4628      	mov	r0, r5
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	b118      	cbz	r0, 8003a22 <_fflush_r+0x1a>
 8003a1a:	6a03      	ldr	r3, [r0, #32]
 8003a1c:	b90b      	cbnz	r3, 8003a22 <_fflush_r+0x1a>
 8003a1e:	f7ff fd33 	bl	8003488 <__sinit>
 8003a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f3      	beq.n	8003a12 <_fflush_r+0xa>
 8003a2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a2c:	07d0      	lsls	r0, r2, #31
 8003a2e:	d404      	bmi.n	8003a3a <_fflush_r+0x32>
 8003a30:	0599      	lsls	r1, r3, #22
 8003a32:	d402      	bmi.n	8003a3a <_fflush_r+0x32>
 8003a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a36:	f7ff fe48 	bl	80036ca <__retarget_lock_acquire_recursive>
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f7ff ff63 	bl	8003908 <__sflush_r>
 8003a42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a44:	4605      	mov	r5, r0
 8003a46:	07da      	lsls	r2, r3, #31
 8003a48:	d4e4      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	059b      	lsls	r3, r3, #22
 8003a4e:	d4e1      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a52:	f7ff fe3b 	bl	80036cc <__retarget_lock_release_recursive>
 8003a56:	e7dd      	b.n	8003a14 <_fflush_r+0xc>

08003a58 <fiprintf>:
 8003a58:	b40e      	push	{r1, r2, r3}
 8003a5a:	b503      	push	{r0, r1, lr}
 8003a5c:	4601      	mov	r1, r0
 8003a5e:	ab03      	add	r3, sp, #12
 8003a60:	4805      	ldr	r0, [pc, #20]	@ (8003a78 <fiprintf+0x20>)
 8003a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	f000 f845 	bl	8003af8 <_vfiprintf_r>
 8003a6e:	b002      	add	sp, #8
 8003a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a74:	b003      	add	sp, #12
 8003a76:	4770      	bx	lr
 8003a78:	20000060 	.word	0x20000060

08003a7c <_sbrk_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4d05      	ldr	r5, [pc, #20]	@ (8003a98 <_sbrk_r+0x1c>)
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	602b      	str	r3, [r5, #0]
 8003a88:	f7fd f94a 	bl	8000d20 <_sbrk>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_sbrk_r+0x1a>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_sbrk_r+0x1a>
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	20000318 	.word	0x20000318

08003a9c <abort>:
 8003a9c:	2006      	movs	r0, #6
 8003a9e:	b508      	push	{r3, lr}
 8003aa0:	f000 fb90 	bl	80041c4 <raise>
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f7fd f8c6 	bl	8000c36 <_exit>

08003aaa <__sfputc_r>:
 8003aaa:	6893      	ldr	r3, [r2, #8]
 8003aac:	b410      	push	{r4}
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	da07      	bge.n	8003ac6 <__sfputc_r+0x1c>
 8003ab6:	6994      	ldr	r4, [r2, #24]
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	db01      	blt.n	8003ac0 <__sfputc_r+0x16>
 8003abc:	290a      	cmp	r1, #10
 8003abe:	d102      	bne.n	8003ac6 <__sfputc_r+0x1c>
 8003ac0:	bc10      	pop	{r4}
 8003ac2:	f000 bac3 	b.w	800404c <__swbuf_r>
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	1c58      	adds	r0, r3, #1
 8003aca:	6010      	str	r0, [r2, #0]
 8003acc:	7019      	strb	r1, [r3, #0]
 8003ace:	4608      	mov	r0, r1
 8003ad0:	bc10      	pop	{r4}
 8003ad2:	4770      	bx	lr

08003ad4 <__sfputs_r>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	460f      	mov	r7, r1
 8003ada:	4614      	mov	r4, r2
 8003adc:	18d5      	adds	r5, r2, r3
 8003ade:	42ac      	cmp	r4, r5
 8003ae0:	d101      	bne.n	8003ae6 <__sfputs_r+0x12>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e007      	b.n	8003af6 <__sfputs_r+0x22>
 8003ae6:	463a      	mov	r2, r7
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aee:	f7ff ffdc 	bl	8003aaa <__sfputc_r>
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	d1f3      	bne.n	8003ade <__sfputs_r+0xa>
 8003af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003af8 <_vfiprintf_r>:
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	460d      	mov	r5, r1
 8003afe:	4614      	mov	r4, r2
 8003b00:	4698      	mov	r8, r3
 8003b02:	4606      	mov	r6, r0
 8003b04:	b09d      	sub	sp, #116	@ 0x74
 8003b06:	b118      	cbz	r0, 8003b10 <_vfiprintf_r+0x18>
 8003b08:	6a03      	ldr	r3, [r0, #32]
 8003b0a:	b90b      	cbnz	r3, 8003b10 <_vfiprintf_r+0x18>
 8003b0c:	f7ff fcbc 	bl	8003488 <__sinit>
 8003b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b12:	07d9      	lsls	r1, r3, #31
 8003b14:	d405      	bmi.n	8003b22 <_vfiprintf_r+0x2a>
 8003b16:	89ab      	ldrh	r3, [r5, #12]
 8003b18:	059a      	lsls	r2, r3, #22
 8003b1a:	d402      	bmi.n	8003b22 <_vfiprintf_r+0x2a>
 8003b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b1e:	f7ff fdd4 	bl	80036ca <__retarget_lock_acquire_recursive>
 8003b22:	89ab      	ldrh	r3, [r5, #12]
 8003b24:	071b      	lsls	r3, r3, #28
 8003b26:	d501      	bpl.n	8003b2c <_vfiprintf_r+0x34>
 8003b28:	692b      	ldr	r3, [r5, #16]
 8003b2a:	b99b      	cbnz	r3, 8003b54 <_vfiprintf_r+0x5c>
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 faca 	bl	80040c8 <__swsetup_r>
 8003b34:	b170      	cbz	r0, 8003b54 <_vfiprintf_r+0x5c>
 8003b36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b38:	07dc      	lsls	r4, r3, #31
 8003b3a:	d504      	bpl.n	8003b46 <_vfiprintf_r+0x4e>
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	b01d      	add	sp, #116	@ 0x74
 8003b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b46:	89ab      	ldrh	r3, [r5, #12]
 8003b48:	0598      	lsls	r0, r3, #22
 8003b4a:	d4f7      	bmi.n	8003b3c <_vfiprintf_r+0x44>
 8003b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b4e:	f7ff fdbd 	bl	80036cc <__retarget_lock_release_recursive>
 8003b52:	e7f3      	b.n	8003b3c <_vfiprintf_r+0x44>
 8003b54:	2300      	movs	r3, #0
 8003b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b58:	2320      	movs	r3, #32
 8003b5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b5e:	2330      	movs	r3, #48	@ 0x30
 8003b60:	f04f 0901 	mov.w	r9, #1
 8003b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b68:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003d14 <_vfiprintf_r+0x21c>
 8003b6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b70:	4623      	mov	r3, r4
 8003b72:	469a      	mov	sl, r3
 8003b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b78:	b10a      	cbz	r2, 8003b7e <_vfiprintf_r+0x86>
 8003b7a:	2a25      	cmp	r2, #37	@ 0x25
 8003b7c:	d1f9      	bne.n	8003b72 <_vfiprintf_r+0x7a>
 8003b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8003b82:	d00b      	beq.n	8003b9c <_vfiprintf_r+0xa4>
 8003b84:	465b      	mov	r3, fp
 8003b86:	4622      	mov	r2, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7ff ffa2 	bl	8003ad4 <__sfputs_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	f000 80a7 	beq.w	8003ce4 <_vfiprintf_r+0x1ec>
 8003b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b98:	445a      	add	r2, fp
 8003b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 809f 	beq.w	8003ce4 <_vfiprintf_r+0x1ec>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bb0:	f10a 0a01 	add.w	sl, sl, #1
 8003bb4:	9304      	str	r3, [sp, #16]
 8003bb6:	9307      	str	r3, [sp, #28]
 8003bb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bbe:	4654      	mov	r4, sl
 8003bc0:	2205      	movs	r2, #5
 8003bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc6:	4853      	ldr	r0, [pc, #332]	@ (8003d14 <_vfiprintf_r+0x21c>)
 8003bc8:	f000 fb18 	bl	80041fc <memchr>
 8003bcc:	9a04      	ldr	r2, [sp, #16]
 8003bce:	b9d8      	cbnz	r0, 8003c08 <_vfiprintf_r+0x110>
 8003bd0:	06d1      	lsls	r1, r2, #27
 8003bd2:	bf44      	itt	mi
 8003bd4:	2320      	movmi	r3, #32
 8003bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bda:	0713      	lsls	r3, r2, #28
 8003bdc:	bf44      	itt	mi
 8003bde:	232b      	movmi	r3, #43	@ 0x2b
 8003be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003be4:	f89a 3000 	ldrb.w	r3, [sl]
 8003be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bea:	d015      	beq.n	8003c18 <_vfiprintf_r+0x120>
 8003bec:	4654      	mov	r4, sl
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f04f 0c0a 	mov.w	ip, #10
 8003bf4:	9a07      	ldr	r2, [sp, #28]
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bfc:	3b30      	subs	r3, #48	@ 0x30
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	d94b      	bls.n	8003c9a <_vfiprintf_r+0x1a2>
 8003c02:	b1b0      	cbz	r0, 8003c32 <_vfiprintf_r+0x13a>
 8003c04:	9207      	str	r2, [sp, #28]
 8003c06:	e014      	b.n	8003c32 <_vfiprintf_r+0x13a>
 8003c08:	eba0 0308 	sub.w	r3, r0, r8
 8003c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c10:	4313      	orrs	r3, r2
 8003c12:	46a2      	mov	sl, r4
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	e7d2      	b.n	8003bbe <_vfiprintf_r+0xc6>
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	1d19      	adds	r1, r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	9103      	str	r1, [sp, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bfbb      	ittet	lt
 8003c24:	425b      	neglt	r3, r3
 8003c26:	f042 0202 	orrlt.w	r2, r2, #2
 8003c2a:	9307      	strge	r3, [sp, #28]
 8003c2c:	9307      	strlt	r3, [sp, #28]
 8003c2e:	bfb8      	it	lt
 8003c30:	9204      	strlt	r2, [sp, #16]
 8003c32:	7823      	ldrb	r3, [r4, #0]
 8003c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c36:	d10a      	bne.n	8003c4e <_vfiprintf_r+0x156>
 8003c38:	7863      	ldrb	r3, [r4, #1]
 8003c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c3c:	d132      	bne.n	8003ca4 <_vfiprintf_r+0x1ac>
 8003c3e:	9b03      	ldr	r3, [sp, #12]
 8003c40:	3402      	adds	r4, #2
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	9203      	str	r2, [sp, #12]
 8003c48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c4c:	9305      	str	r3, [sp, #20]
 8003c4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003d18 <_vfiprintf_r+0x220>
 8003c52:	2203      	movs	r2, #3
 8003c54:	4650      	mov	r0, sl
 8003c56:	7821      	ldrb	r1, [r4, #0]
 8003c58:	f000 fad0 	bl	80041fc <memchr>
 8003c5c:	b138      	cbz	r0, 8003c6e <_vfiprintf_r+0x176>
 8003c5e:	2240      	movs	r2, #64	@ 0x40
 8003c60:	9b04      	ldr	r3, [sp, #16]
 8003c62:	eba0 000a 	sub.w	r0, r0, sl
 8003c66:	4082      	lsls	r2, r0
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	3401      	adds	r4, #1
 8003c6c:	9304      	str	r3, [sp, #16]
 8003c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c72:	2206      	movs	r2, #6
 8003c74:	4829      	ldr	r0, [pc, #164]	@ (8003d1c <_vfiprintf_r+0x224>)
 8003c76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c7a:	f000 fabf 	bl	80041fc <memchr>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d03f      	beq.n	8003d02 <_vfiprintf_r+0x20a>
 8003c82:	4b27      	ldr	r3, [pc, #156]	@ (8003d20 <_vfiprintf_r+0x228>)
 8003c84:	bb1b      	cbnz	r3, 8003cce <_vfiprintf_r+0x1d6>
 8003c86:	9b03      	ldr	r3, [sp, #12]
 8003c88:	3307      	adds	r3, #7
 8003c8a:	f023 0307 	bic.w	r3, r3, #7
 8003c8e:	3308      	adds	r3, #8
 8003c90:	9303      	str	r3, [sp, #12]
 8003c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c94:	443b      	add	r3, r7
 8003c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c98:	e76a      	b.n	8003b70 <_vfiprintf_r+0x78>
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ca2:	e7a8      	b.n	8003bf6 <_vfiprintf_r+0xfe>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f04f 0c0a 	mov.w	ip, #10
 8003caa:	4619      	mov	r1, r3
 8003cac:	3401      	adds	r4, #1
 8003cae:	9305      	str	r3, [sp, #20]
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb6:	3a30      	subs	r2, #48	@ 0x30
 8003cb8:	2a09      	cmp	r2, #9
 8003cba:	d903      	bls.n	8003cc4 <_vfiprintf_r+0x1cc>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0c6      	beq.n	8003c4e <_vfiprintf_r+0x156>
 8003cc0:	9105      	str	r1, [sp, #20]
 8003cc2:	e7c4      	b.n	8003c4e <_vfiprintf_r+0x156>
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ccc:	e7f0      	b.n	8003cb0 <_vfiprintf_r+0x1b8>
 8003cce:	ab03      	add	r3, sp, #12
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	462a      	mov	r2, r5
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <_vfiprintf_r+0x22c>)
 8003cd8:	a904      	add	r1, sp, #16
 8003cda:	f3af 8000 	nop.w
 8003cde:	4607      	mov	r7, r0
 8003ce0:	1c78      	adds	r0, r7, #1
 8003ce2:	d1d6      	bne.n	8003c92 <_vfiprintf_r+0x19a>
 8003ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ce6:	07d9      	lsls	r1, r3, #31
 8003ce8:	d405      	bmi.n	8003cf6 <_vfiprintf_r+0x1fe>
 8003cea:	89ab      	ldrh	r3, [r5, #12]
 8003cec:	059a      	lsls	r2, r3, #22
 8003cee:	d402      	bmi.n	8003cf6 <_vfiprintf_r+0x1fe>
 8003cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cf2:	f7ff fceb 	bl	80036cc <__retarget_lock_release_recursive>
 8003cf6:	89ab      	ldrh	r3, [r5, #12]
 8003cf8:	065b      	lsls	r3, r3, #25
 8003cfa:	f53f af1f 	bmi.w	8003b3c <_vfiprintf_r+0x44>
 8003cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d00:	e71e      	b.n	8003b40 <_vfiprintf_r+0x48>
 8003d02:	ab03      	add	r3, sp, #12
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	462a      	mov	r2, r5
 8003d08:	4630      	mov	r0, r6
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <_vfiprintf_r+0x22c>)
 8003d0c:	a904      	add	r1, sp, #16
 8003d0e:	f000 f87d 	bl	8003e0c <_printf_i>
 8003d12:	e7e4      	b.n	8003cde <_vfiprintf_r+0x1e6>
 8003d14:	0800441d 	.word	0x0800441d
 8003d18:	08004423 	.word	0x08004423
 8003d1c:	08004427 	.word	0x08004427
 8003d20:	00000000 	.word	0x00000000
 8003d24:	08003ad5 	.word	0x08003ad5

08003d28 <_printf_common>:
 8003d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	4616      	mov	r6, r2
 8003d2e:	4698      	mov	r8, r3
 8003d30:	688a      	ldr	r2, [r1, #8]
 8003d32:	690b      	ldr	r3, [r1, #16]
 8003d34:	4607      	mov	r7, r0
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bfb8      	it	lt
 8003d3a:	4613      	movlt	r3, r2
 8003d3c:	6033      	str	r3, [r6, #0]
 8003d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d42:	460c      	mov	r4, r1
 8003d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d48:	b10a      	cbz	r2, 8003d4e <_printf_common+0x26>
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	0699      	lsls	r1, r3, #26
 8003d52:	bf42      	ittt	mi
 8003d54:	6833      	ldrmi	r3, [r6, #0]
 8003d56:	3302      	addmi	r3, #2
 8003d58:	6033      	strmi	r3, [r6, #0]
 8003d5a:	6825      	ldr	r5, [r4, #0]
 8003d5c:	f015 0506 	ands.w	r5, r5, #6
 8003d60:	d106      	bne.n	8003d70 <_printf_common+0x48>
 8003d62:	f104 0a19 	add.w	sl, r4, #25
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	6832      	ldr	r2, [r6, #0]
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	42ab      	cmp	r3, r5
 8003d6e:	dc2b      	bgt.n	8003dc8 <_printf_common+0xa0>
 8003d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	3b00      	subs	r3, #0
 8003d78:	bf18      	it	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	0692      	lsls	r2, r2, #26
 8003d7e:	d430      	bmi.n	8003de2 <_printf_common+0xba>
 8003d80:	4641      	mov	r1, r8
 8003d82:	4638      	mov	r0, r7
 8003d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d88:	47c8      	blx	r9
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d023      	beq.n	8003dd6 <_printf_common+0xae>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	6922      	ldr	r2, [r4, #16]
 8003d92:	f003 0306 	and.w	r3, r3, #6
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf14      	ite	ne
 8003d9a:	2500      	movne	r5, #0
 8003d9c:	6833      	ldreq	r3, [r6, #0]
 8003d9e:	f04f 0600 	mov.w	r6, #0
 8003da2:	bf08      	it	eq
 8003da4:	68e5      	ldreq	r5, [r4, #12]
 8003da6:	f104 041a 	add.w	r4, r4, #26
 8003daa:	bf08      	it	eq
 8003dac:	1aed      	subeq	r5, r5, r3
 8003dae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003db2:	bf08      	it	eq
 8003db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfc4      	itt	gt
 8003dbc:	1a9b      	subgt	r3, r3, r2
 8003dbe:	18ed      	addgt	r5, r5, r3
 8003dc0:	42b5      	cmp	r5, r6
 8003dc2:	d11a      	bne.n	8003dfa <_printf_common+0xd2>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e008      	b.n	8003dda <_printf_common+0xb2>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4652      	mov	r2, sl
 8003dcc:	4641      	mov	r1, r8
 8003dce:	4638      	mov	r0, r7
 8003dd0:	47c8      	blx	r9
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d103      	bne.n	8003dde <_printf_common+0xb6>
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dde:	3501      	adds	r5, #1
 8003de0:	e7c1      	b.n	8003d66 <_printf_common+0x3e>
 8003de2:	2030      	movs	r0, #48	@ 0x30
 8003de4:	18e1      	adds	r1, r4, r3
 8003de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003df0:	4422      	add	r2, r4
 8003df2:	3302      	adds	r3, #2
 8003df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003df8:	e7c2      	b.n	8003d80 <_printf_common+0x58>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4641      	mov	r1, r8
 8003e00:	4638      	mov	r0, r7
 8003e02:	47c8      	blx	r9
 8003e04:	3001      	adds	r0, #1
 8003e06:	d0e6      	beq.n	8003dd6 <_printf_common+0xae>
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7d9      	b.n	8003dc0 <_printf_common+0x98>

08003e0c <_printf_i>:
 8003e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e10:	7e0f      	ldrb	r7, [r1, #24]
 8003e12:	4691      	mov	r9, r2
 8003e14:	2f78      	cmp	r7, #120	@ 0x78
 8003e16:	4680      	mov	r8, r0
 8003e18:	460c      	mov	r4, r1
 8003e1a:	469a      	mov	sl, r3
 8003e1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e22:	d807      	bhi.n	8003e34 <_printf_i+0x28>
 8003e24:	2f62      	cmp	r7, #98	@ 0x62
 8003e26:	d80a      	bhi.n	8003e3e <_printf_i+0x32>
 8003e28:	2f00      	cmp	r7, #0
 8003e2a:	f000 80d3 	beq.w	8003fd4 <_printf_i+0x1c8>
 8003e2e:	2f58      	cmp	r7, #88	@ 0x58
 8003e30:	f000 80ba 	beq.w	8003fa8 <_printf_i+0x19c>
 8003e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e3c:	e03a      	b.n	8003eb4 <_printf_i+0xa8>
 8003e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e42:	2b15      	cmp	r3, #21
 8003e44:	d8f6      	bhi.n	8003e34 <_printf_i+0x28>
 8003e46:	a101      	add	r1, pc, #4	@ (adr r1, 8003e4c <_printf_i+0x40>)
 8003e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e4c:	08003ea5 	.word	0x08003ea5
 8003e50:	08003eb9 	.word	0x08003eb9
 8003e54:	08003e35 	.word	0x08003e35
 8003e58:	08003e35 	.word	0x08003e35
 8003e5c:	08003e35 	.word	0x08003e35
 8003e60:	08003e35 	.word	0x08003e35
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003e35 	.word	0x08003e35
 8003e6c:	08003e35 	.word	0x08003e35
 8003e70:	08003e35 	.word	0x08003e35
 8003e74:	08003e35 	.word	0x08003e35
 8003e78:	08003fbb 	.word	0x08003fbb
 8003e7c:	08003ee3 	.word	0x08003ee3
 8003e80:	08003f75 	.word	0x08003f75
 8003e84:	08003e35 	.word	0x08003e35
 8003e88:	08003e35 	.word	0x08003e35
 8003e8c:	08003fdd 	.word	0x08003fdd
 8003e90:	08003e35 	.word	0x08003e35
 8003e94:	08003ee3 	.word	0x08003ee3
 8003e98:	08003e35 	.word	0x08003e35
 8003e9c:	08003e35 	.word	0x08003e35
 8003ea0:	08003f7d 	.word	0x08003f7d
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6032      	str	r2, [r6, #0]
 8003eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e09e      	b.n	8003ff6 <_printf_i+0x1ea>
 8003eb8:	6833      	ldr	r3, [r6, #0]
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	1d19      	adds	r1, r3, #4
 8003ebe:	6031      	str	r1, [r6, #0]
 8003ec0:	0606      	lsls	r6, r0, #24
 8003ec2:	d501      	bpl.n	8003ec8 <_printf_i+0xbc>
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	e003      	b.n	8003ed0 <_printf_i+0xc4>
 8003ec8:	0645      	lsls	r5, r0, #25
 8003eca:	d5fb      	bpl.n	8003ec4 <_printf_i+0xb8>
 8003ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	da03      	bge.n	8003edc <_printf_i+0xd0>
 8003ed4:	232d      	movs	r3, #45	@ 0x2d
 8003ed6:	426d      	negs	r5, r5
 8003ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003edc:	230a      	movs	r3, #10
 8003ede:	4859      	ldr	r0, [pc, #356]	@ (8004044 <_printf_i+0x238>)
 8003ee0:	e011      	b.n	8003f06 <_printf_i+0xfa>
 8003ee2:	6821      	ldr	r1, [r4, #0]
 8003ee4:	6833      	ldr	r3, [r6, #0]
 8003ee6:	0608      	lsls	r0, r1, #24
 8003ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003eec:	d402      	bmi.n	8003ef4 <_printf_i+0xe8>
 8003eee:	0649      	lsls	r1, r1, #25
 8003ef0:	bf48      	it	mi
 8003ef2:	b2ad      	uxthmi	r5, r5
 8003ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ef6:	6033      	str	r3, [r6, #0]
 8003ef8:	bf14      	ite	ne
 8003efa:	230a      	movne	r3, #10
 8003efc:	2308      	moveq	r3, #8
 8003efe:	4851      	ldr	r0, [pc, #324]	@ (8004044 <_printf_i+0x238>)
 8003f00:	2100      	movs	r1, #0
 8003f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f06:	6866      	ldr	r6, [r4, #4]
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	bfa8      	it	ge
 8003f0c:	6821      	ldrge	r1, [r4, #0]
 8003f0e:	60a6      	str	r6, [r4, #8]
 8003f10:	bfa4      	itt	ge
 8003f12:	f021 0104 	bicge.w	r1, r1, #4
 8003f16:	6021      	strge	r1, [r4, #0]
 8003f18:	b90d      	cbnz	r5, 8003f1e <_printf_i+0x112>
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	d04b      	beq.n	8003fb6 <_printf_i+0x1aa>
 8003f1e:	4616      	mov	r6, r2
 8003f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f24:	fb03 5711 	mls	r7, r3, r1, r5
 8003f28:	5dc7      	ldrb	r7, [r0, r7]
 8003f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f2e:	462f      	mov	r7, r5
 8003f30:	42bb      	cmp	r3, r7
 8003f32:	460d      	mov	r5, r1
 8003f34:	d9f4      	bls.n	8003f20 <_printf_i+0x114>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d10b      	bne.n	8003f52 <_printf_i+0x146>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	07df      	lsls	r7, r3, #31
 8003f3e:	d508      	bpl.n	8003f52 <_printf_i+0x146>
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	6861      	ldr	r1, [r4, #4]
 8003f44:	4299      	cmp	r1, r3
 8003f46:	bfde      	ittt	le
 8003f48:	2330      	movle	r3, #48	@ 0x30
 8003f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f52:	1b92      	subs	r2, r2, r6
 8003f54:	6122      	str	r2, [r4, #16]
 8003f56:	464b      	mov	r3, r9
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	f8cd a000 	str.w	sl, [sp]
 8003f60:	aa03      	add	r2, sp, #12
 8003f62:	f7ff fee1 	bl	8003d28 <_printf_common>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d14a      	bne.n	8004000 <_printf_i+0x1f4>
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	b004      	add	sp, #16
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f043 0320 	orr.w	r3, r3, #32
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	2778      	movs	r7, #120	@ 0x78
 8003f7e:	4832      	ldr	r0, [pc, #200]	@ (8004048 <_printf_i+0x23c>)
 8003f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	6831      	ldr	r1, [r6, #0]
 8003f88:	061f      	lsls	r7, r3, #24
 8003f8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f8e:	d402      	bmi.n	8003f96 <_printf_i+0x18a>
 8003f90:	065f      	lsls	r7, r3, #25
 8003f92:	bf48      	it	mi
 8003f94:	b2ad      	uxthmi	r5, r5
 8003f96:	6031      	str	r1, [r6, #0]
 8003f98:	07d9      	lsls	r1, r3, #31
 8003f9a:	bf44      	itt	mi
 8003f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003fa0:	6023      	strmi	r3, [r4, #0]
 8003fa2:	b11d      	cbz	r5, 8003fac <_printf_i+0x1a0>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	e7ab      	b.n	8003f00 <_printf_i+0xf4>
 8003fa8:	4826      	ldr	r0, [pc, #152]	@ (8004044 <_printf_i+0x238>)
 8003faa:	e7e9      	b.n	8003f80 <_printf_i+0x174>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	f023 0320 	bic.w	r3, r3, #32
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	e7f6      	b.n	8003fa4 <_printf_i+0x198>
 8003fb6:	4616      	mov	r6, r2
 8003fb8:	e7bd      	b.n	8003f36 <_printf_i+0x12a>
 8003fba:	6833      	ldr	r3, [r6, #0]
 8003fbc:	6825      	ldr	r5, [r4, #0]
 8003fbe:	1d18      	adds	r0, r3, #4
 8003fc0:	6961      	ldr	r1, [r4, #20]
 8003fc2:	6030      	str	r0, [r6, #0]
 8003fc4:	062e      	lsls	r6, r5, #24
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	d501      	bpl.n	8003fce <_printf_i+0x1c2>
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	e002      	b.n	8003fd4 <_printf_i+0x1c8>
 8003fce:	0668      	lsls	r0, r5, #25
 8003fd0:	d5fb      	bpl.n	8003fca <_printf_i+0x1be>
 8003fd2:	8019      	strh	r1, [r3, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4616      	mov	r6, r2
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	e7bc      	b.n	8003f56 <_printf_i+0x14a>
 8003fdc:	6833      	ldr	r3, [r6, #0]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	6032      	str	r2, [r6, #0]
 8003fe4:	681e      	ldr	r6, [r3, #0]
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f000 f907 	bl	80041fc <memchr>
 8003fee:	b108      	cbz	r0, 8003ff4 <_printf_i+0x1e8>
 8003ff0:	1b80      	subs	r0, r0, r6
 8003ff2:	6060      	str	r0, [r4, #4]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ffe:	e7aa      	b.n	8003f56 <_printf_i+0x14a>
 8004000:	4632      	mov	r2, r6
 8004002:	4649      	mov	r1, r9
 8004004:	4640      	mov	r0, r8
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	47d0      	blx	sl
 800400a:	3001      	adds	r0, #1
 800400c:	d0ad      	beq.n	8003f6a <_printf_i+0x15e>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	079b      	lsls	r3, r3, #30
 8004012:	d413      	bmi.n	800403c <_printf_i+0x230>
 8004014:	68e0      	ldr	r0, [r4, #12]
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	4298      	cmp	r0, r3
 800401a:	bfb8      	it	lt
 800401c:	4618      	movlt	r0, r3
 800401e:	e7a6      	b.n	8003f6e <_printf_i+0x162>
 8004020:	2301      	movs	r3, #1
 8004022:	4632      	mov	r2, r6
 8004024:	4649      	mov	r1, r9
 8004026:	4640      	mov	r0, r8
 8004028:	47d0      	blx	sl
 800402a:	3001      	adds	r0, #1
 800402c:	d09d      	beq.n	8003f6a <_printf_i+0x15e>
 800402e:	3501      	adds	r5, #1
 8004030:	68e3      	ldr	r3, [r4, #12]
 8004032:	9903      	ldr	r1, [sp, #12]
 8004034:	1a5b      	subs	r3, r3, r1
 8004036:	42ab      	cmp	r3, r5
 8004038:	dcf2      	bgt.n	8004020 <_printf_i+0x214>
 800403a:	e7eb      	b.n	8004014 <_printf_i+0x208>
 800403c:	2500      	movs	r5, #0
 800403e:	f104 0619 	add.w	r6, r4, #25
 8004042:	e7f5      	b.n	8004030 <_printf_i+0x224>
 8004044:	0800442e 	.word	0x0800442e
 8004048:	0800443f 	.word	0x0800443f

0800404c <__swbuf_r>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	460e      	mov	r6, r1
 8004050:	4614      	mov	r4, r2
 8004052:	4605      	mov	r5, r0
 8004054:	b118      	cbz	r0, 800405e <__swbuf_r+0x12>
 8004056:	6a03      	ldr	r3, [r0, #32]
 8004058:	b90b      	cbnz	r3, 800405e <__swbuf_r+0x12>
 800405a:	f7ff fa15 	bl	8003488 <__sinit>
 800405e:	69a3      	ldr	r3, [r4, #24]
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	071a      	lsls	r2, r3, #28
 8004066:	d501      	bpl.n	800406c <__swbuf_r+0x20>
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	b943      	cbnz	r3, 800407e <__swbuf_r+0x32>
 800406c:	4621      	mov	r1, r4
 800406e:	4628      	mov	r0, r5
 8004070:	f000 f82a 	bl	80040c8 <__swsetup_r>
 8004074:	b118      	cbz	r0, 800407e <__swbuf_r+0x32>
 8004076:	f04f 37ff 	mov.w	r7, #4294967295
 800407a:	4638      	mov	r0, r7
 800407c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	6922      	ldr	r2, [r4, #16]
 8004082:	b2f6      	uxtb	r6, r6
 8004084:	1a98      	subs	r0, r3, r2
 8004086:	6963      	ldr	r3, [r4, #20]
 8004088:	4637      	mov	r7, r6
 800408a:	4283      	cmp	r3, r0
 800408c:	dc05      	bgt.n	800409a <__swbuf_r+0x4e>
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f7ff fcb9 	bl	8003a08 <_fflush_r>
 8004096:	2800      	cmp	r0, #0
 8004098:	d1ed      	bne.n	8004076 <__swbuf_r+0x2a>
 800409a:	68a3      	ldr	r3, [r4, #8]
 800409c:	3b01      	subs	r3, #1
 800409e:	60a3      	str	r3, [r4, #8]
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	6022      	str	r2, [r4, #0]
 80040a6:	701e      	strb	r6, [r3, #0]
 80040a8:	6962      	ldr	r2, [r4, #20]
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d004      	beq.n	80040ba <__swbuf_r+0x6e>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	07db      	lsls	r3, r3, #31
 80040b4:	d5e1      	bpl.n	800407a <__swbuf_r+0x2e>
 80040b6:	2e0a      	cmp	r6, #10
 80040b8:	d1df      	bne.n	800407a <__swbuf_r+0x2e>
 80040ba:	4621      	mov	r1, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	f7ff fca3 	bl	8003a08 <_fflush_r>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	d0d9      	beq.n	800407a <__swbuf_r+0x2e>
 80040c6:	e7d6      	b.n	8004076 <__swbuf_r+0x2a>

080040c8 <__swsetup_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4b29      	ldr	r3, [pc, #164]	@ (8004170 <__swsetup_r+0xa8>)
 80040cc:	4605      	mov	r5, r0
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	460c      	mov	r4, r1
 80040d2:	b118      	cbz	r0, 80040dc <__swsetup_r+0x14>
 80040d4:	6a03      	ldr	r3, [r0, #32]
 80040d6:	b90b      	cbnz	r3, 80040dc <__swsetup_r+0x14>
 80040d8:	f7ff f9d6 	bl	8003488 <__sinit>
 80040dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e0:	0719      	lsls	r1, r3, #28
 80040e2:	d422      	bmi.n	800412a <__swsetup_r+0x62>
 80040e4:	06da      	lsls	r2, r3, #27
 80040e6:	d407      	bmi.n	80040f8 <__swsetup_r+0x30>
 80040e8:	2209      	movs	r2, #9
 80040ea:	602a      	str	r2, [r5, #0]
 80040ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	e033      	b.n	8004160 <__swsetup_r+0x98>
 80040f8:	0758      	lsls	r0, r3, #29
 80040fa:	d512      	bpl.n	8004122 <__swsetup_r+0x5a>
 80040fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040fe:	b141      	cbz	r1, 8004112 <__swsetup_r+0x4a>
 8004100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004104:	4299      	cmp	r1, r3
 8004106:	d002      	beq.n	800410e <__swsetup_r+0x46>
 8004108:	4628      	mov	r0, r5
 800410a:	f7ff faff 	bl	800370c <_free_r>
 800410e:	2300      	movs	r3, #0
 8004110:	6363      	str	r3, [r4, #52]	@ 0x34
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	2300      	movs	r3, #0
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f043 0308 	orr.w	r3, r3, #8
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	b94b      	cbnz	r3, 8004142 <__swsetup_r+0x7a>
 800412e:	89a3      	ldrh	r3, [r4, #12]
 8004130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004138:	d003      	beq.n	8004142 <__swsetup_r+0x7a>
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 f890 	bl	8004262 <__smakebuf_r>
 8004142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004146:	f013 0201 	ands.w	r2, r3, #1
 800414a:	d00a      	beq.n	8004162 <__swsetup_r+0x9a>
 800414c:	2200      	movs	r2, #0
 800414e:	60a2      	str	r2, [r4, #8]
 8004150:	6962      	ldr	r2, [r4, #20]
 8004152:	4252      	negs	r2, r2
 8004154:	61a2      	str	r2, [r4, #24]
 8004156:	6922      	ldr	r2, [r4, #16]
 8004158:	b942      	cbnz	r2, 800416c <__swsetup_r+0xa4>
 800415a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800415e:	d1c5      	bne.n	80040ec <__swsetup_r+0x24>
 8004160:	bd38      	pop	{r3, r4, r5, pc}
 8004162:	0799      	lsls	r1, r3, #30
 8004164:	bf58      	it	pl
 8004166:	6962      	ldrpl	r2, [r4, #20]
 8004168:	60a2      	str	r2, [r4, #8]
 800416a:	e7f4      	b.n	8004156 <__swsetup_r+0x8e>
 800416c:	2000      	movs	r0, #0
 800416e:	e7f7      	b.n	8004160 <__swsetup_r+0x98>
 8004170:	20000060 	.word	0x20000060

08004174 <_raise_r>:
 8004174:	291f      	cmp	r1, #31
 8004176:	b538      	push	{r3, r4, r5, lr}
 8004178:	4605      	mov	r5, r0
 800417a:	460c      	mov	r4, r1
 800417c:	d904      	bls.n	8004188 <_raise_r+0x14>
 800417e:	2316      	movs	r3, #22
 8004180:	6003      	str	r3, [r0, #0]
 8004182:	f04f 30ff 	mov.w	r0, #4294967295
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800418a:	b112      	cbz	r2, 8004192 <_raise_r+0x1e>
 800418c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004190:	b94b      	cbnz	r3, 80041a6 <_raise_r+0x32>
 8004192:	4628      	mov	r0, r5
 8004194:	f000 f830 	bl	80041f8 <_getpid_r>
 8004198:	4622      	mov	r2, r4
 800419a:	4601      	mov	r1, r0
 800419c:	4628      	mov	r0, r5
 800419e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a2:	f000 b817 	b.w	80041d4 <_kill_r>
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d00a      	beq.n	80041c0 <_raise_r+0x4c>
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	d103      	bne.n	80041b6 <_raise_r+0x42>
 80041ae:	2316      	movs	r3, #22
 80041b0:	6003      	str	r3, [r0, #0]
 80041b2:	2001      	movs	r0, #1
 80041b4:	e7e7      	b.n	8004186 <_raise_r+0x12>
 80041b6:	2100      	movs	r1, #0
 80041b8:	4620      	mov	r0, r4
 80041ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80041be:	4798      	blx	r3
 80041c0:	2000      	movs	r0, #0
 80041c2:	e7e0      	b.n	8004186 <_raise_r+0x12>

080041c4 <raise>:
 80041c4:	4b02      	ldr	r3, [pc, #8]	@ (80041d0 <raise+0xc>)
 80041c6:	4601      	mov	r1, r0
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	f7ff bfd3 	b.w	8004174 <_raise_r>
 80041ce:	bf00      	nop
 80041d0:	20000060 	.word	0x20000060

080041d4 <_kill_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	2300      	movs	r3, #0
 80041d8:	4d06      	ldr	r5, [pc, #24]	@ (80041f4 <_kill_r+0x20>)
 80041da:	4604      	mov	r4, r0
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	f7fc fd18 	bl	8000c16 <_kill>
 80041e6:	1c43      	adds	r3, r0, #1
 80041e8:	d102      	bne.n	80041f0 <_kill_r+0x1c>
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	b103      	cbz	r3, 80041f0 <_kill_r+0x1c>
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd38      	pop	{r3, r4, r5, pc}
 80041f2:	bf00      	nop
 80041f4:	20000318 	.word	0x20000318

080041f8 <_getpid_r>:
 80041f8:	f7fc bd06 	b.w	8000c08 <_getpid>

080041fc <memchr>:
 80041fc:	4603      	mov	r3, r0
 80041fe:	b510      	push	{r4, lr}
 8004200:	b2c9      	uxtb	r1, r1
 8004202:	4402      	add	r2, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	4618      	mov	r0, r3
 8004208:	d101      	bne.n	800420e <memchr+0x12>
 800420a:	2000      	movs	r0, #0
 800420c:	e003      	b.n	8004216 <memchr+0x1a>
 800420e:	7804      	ldrb	r4, [r0, #0]
 8004210:	3301      	adds	r3, #1
 8004212:	428c      	cmp	r4, r1
 8004214:	d1f6      	bne.n	8004204 <memchr+0x8>
 8004216:	bd10      	pop	{r4, pc}

08004218 <__swhatbuf_r>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	460c      	mov	r4, r1
 800421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004220:	4615      	mov	r5, r2
 8004222:	2900      	cmp	r1, #0
 8004224:	461e      	mov	r6, r3
 8004226:	b096      	sub	sp, #88	@ 0x58
 8004228:	da0c      	bge.n	8004244 <__swhatbuf_r+0x2c>
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	2100      	movs	r1, #0
 800422e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004232:	bf14      	ite	ne
 8004234:	2340      	movne	r3, #64	@ 0x40
 8004236:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800423a:	2000      	movs	r0, #0
 800423c:	6031      	str	r1, [r6, #0]
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	b016      	add	sp, #88	@ 0x58
 8004242:	bd70      	pop	{r4, r5, r6, pc}
 8004244:	466a      	mov	r2, sp
 8004246:	f000 f849 	bl	80042dc <_fstat_r>
 800424a:	2800      	cmp	r0, #0
 800424c:	dbed      	blt.n	800422a <__swhatbuf_r+0x12>
 800424e:	9901      	ldr	r1, [sp, #4]
 8004250:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004254:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004258:	4259      	negs	r1, r3
 800425a:	4159      	adcs	r1, r3
 800425c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004260:	e7eb      	b.n	800423a <__swhatbuf_r+0x22>

08004262 <__smakebuf_r>:
 8004262:	898b      	ldrh	r3, [r1, #12]
 8004264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004266:	079d      	lsls	r5, r3, #30
 8004268:	4606      	mov	r6, r0
 800426a:	460c      	mov	r4, r1
 800426c:	d507      	bpl.n	800427e <__smakebuf_r+0x1c>
 800426e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	6123      	str	r3, [r4, #16]
 8004276:	2301      	movs	r3, #1
 8004278:	6163      	str	r3, [r4, #20]
 800427a:	b003      	add	sp, #12
 800427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427e:	466a      	mov	r2, sp
 8004280:	ab01      	add	r3, sp, #4
 8004282:	f7ff ffc9 	bl	8004218 <__swhatbuf_r>
 8004286:	9f00      	ldr	r7, [sp, #0]
 8004288:	4605      	mov	r5, r0
 800428a:	4639      	mov	r1, r7
 800428c:	4630      	mov	r0, r6
 800428e:	f7ff faaf 	bl	80037f0 <_malloc_r>
 8004292:	b948      	cbnz	r0, 80042a8 <__smakebuf_r+0x46>
 8004294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004298:	059a      	lsls	r2, r3, #22
 800429a:	d4ee      	bmi.n	800427a <__smakebuf_r+0x18>
 800429c:	f023 0303 	bic.w	r3, r3, #3
 80042a0:	f043 0302 	orr.w	r3, r3, #2
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	e7e2      	b.n	800426e <__smakebuf_r+0xc>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	9b01      	ldr	r3, [sp, #4]
 80042b6:	6020      	str	r0, [r4, #0]
 80042b8:	b15b      	cbz	r3, 80042d2 <__smakebuf_r+0x70>
 80042ba:	4630      	mov	r0, r6
 80042bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c0:	f000 f81e 	bl	8004300 <_isatty_r>
 80042c4:	b128      	cbz	r0, 80042d2 <__smakebuf_r+0x70>
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f023 0303 	bic.w	r3, r3, #3
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	431d      	orrs	r5, r3
 80042d6:	81a5      	strh	r5, [r4, #12]
 80042d8:	e7cf      	b.n	800427a <__smakebuf_r+0x18>
	...

080042dc <_fstat_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	2300      	movs	r3, #0
 80042e0:	4d06      	ldr	r5, [pc, #24]	@ (80042fc <_fstat_r+0x20>)
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	602b      	str	r3, [r5, #0]
 80042ea:	f7fc fcf3 	bl	8000cd4 <_fstat>
 80042ee:	1c43      	adds	r3, r0, #1
 80042f0:	d102      	bne.n	80042f8 <_fstat_r+0x1c>
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	b103      	cbz	r3, 80042f8 <_fstat_r+0x1c>
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	bd38      	pop	{r3, r4, r5, pc}
 80042fa:	bf00      	nop
 80042fc:	20000318 	.word	0x20000318

08004300 <_isatty_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	2300      	movs	r3, #0
 8004304:	4d05      	ldr	r5, [pc, #20]	@ (800431c <_isatty_r+0x1c>)
 8004306:	4604      	mov	r4, r0
 8004308:	4608      	mov	r0, r1
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	f7fc fcf1 	bl	8000cf2 <_isatty>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_isatty_r+0x1a>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	b103      	cbz	r3, 800431a <_isatty_r+0x1a>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000318 	.word	0x20000318

08004320 <_gettimeofday>:
 8004320:	2258      	movs	r2, #88	@ 0x58
 8004322:	4b02      	ldr	r3, [pc, #8]	@ (800432c <_gettimeofday+0xc>)
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	4770      	bx	lr
 800432c:	20000318 	.word	0x20000318

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
